[{"title":"Mr_Crowley_歌词","date":"2021-06-25T03:41:47.000Z","path":"2021/06/25/80-Mr-Crowley-歌词/","text":"Mr. Crowley, what went on in your head老克劳利，你在苦心经营着什么Mr. Crowley, did you talk to the dead老克劳利，你曾与死尸窃窃私语吗Your lifestyle to me seemed so tragic我看你活得真衰With the thrill of it all又他妈的火力全开You fooled all the people with magic你用小把戏欺世盗名You waited on Satan&apos;s door却在撒旦那儿程门立雪Mr. Charming, did you think you were pure笑面虎，你自以为一片冰心在玉壶吗Mr. Alarming, in nocturnal rapport吸血鬼，夜色就是你的披肩Uncovering things that were sacred manifest on this earth想掘地三尺集齐龙珠Conceived in the eye of a secret用以揣度圣意Yeah, they scattered the afterbirth却是见光死Solo单挑Mr. Crowley, won&apos;t you ride my white horse老克劳利，你骑朕的白龙马吗Mr. Crowley, it&apos;s symbolic of course老克劳利，你又要蠢蠢欲动了Approaching a time that is classic也无风雨也无晴I hear maidens call小女孩这么幻想着Approaching a time that is drastic山雨欲来风满楼Standing with their backs to the wall可屌丝们却这么想Was it polemically sent他们争论不休I wanna know what you meant我想知道你算哪根葱I wanna know我只想知道I wanna know what you meant, yeah!我想知道你到底算哪根葱solo单挑","tags":[{"name":"歌词","slug":"歌词","permalink":"http://zhourudong.cn/tags/歌词/"}]},{"title":"MySQLTips","date":"2021-02-26T05:41:09.000Z","path":"2021/02/26/79-MySQLTips/","text":"INNODB 相关https://github.com/jeremycole/innodb_ruby 拷机https://github.com/030io/stress fio","tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://zhourudong.cn/tags/MySQL/"}]},{"title":"java一些网站地址收藏","date":"2020-08-04T02:28:10.000Z","path":"2020/08/04/78-java/","text":"API文档https://github.com/APIJSON/APIJSONhttps://cizixs.com/2016/12/12/restful-api-design-guide/https://github.com/dakuohao/java-api-dochttps://github.com/dakuohao/api-dochttps://github.com/dakuohao/api-doc-angularhttps://gitee.com/loolly/hutool","tags":[{"name":"java网站收藏","slug":"java网站收藏","permalink":"http://zhourudong.cn/tags/java网站收藏/"}]},{"title":"centos8通用配置","date":"2019-11-02T07:16:14.000Z","path":"2019/11/02/77-centos8通用配置/","text":"yum源配置 [AppStream]name=CentOS-$releasever - AppStreambaseurl=https://mirrors.aliyun.com/centos/8/AppStream/x86_64/os/gpgcheck=0enabled=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial[BaseOS]name=CentOS-$releasever - Basebaseurl=https://mirrors.aliyun.com/centos/8/BaseOS/x86_64/os/gpgcheck=0enabled=1[extras]name=CentOS-$releasever - Extrasbaseurl=https://mirrors.aliyun.com/centos/8/extras/x86_64/os/gpgcheck=0enabled=1[epel]name=Extra Packages for Enterprise Linux $releasever - $basearchbaseurl=https://mirrors.aliyun.com/epel/8/Everything/x86_64/enabled=1gpgcheck=0","tags":[{"name":"centos8","slug":"centos8","permalink":"http://zhourudong.cn/tags/centos8/"}]},{"title":"Jenkins资源","date":"2019-06-12T01:20:55.000Z","path":"2019/06/12/76-Jenkins资源/","text":"# https://www.cloudbees.com/blog?_escaped_fragment_=&amp;view=550&amp;page=2 jenkinshttp://www.tsbakker.nl/jenkins.html","tags":[{"name":"jenkins","slug":"jenkins","permalink":"http://zhourudong.cn/tags/jenkins/"}]},{"title":"k8s-resource","date":"2019-06-10T01:40:21.000Z","path":"2019/06/10/75-k8s-resource/","text":"部署工具https://zhaohuabing.com/2018/04/16/using-helm-to-deploy-to-kubernetes/ 学习网站https://www.katacoda.com/courses/kubernetes/launch-single-node-cluster https://labs.play-with-k8s.com # https://developer.ibm.com/opentech/2017/06/21/tour-kubernetes-source-code-part-one-kubectl-api-server/ 培训kadm-2019-06.container.trainingqconuk2019.container.trainingcontainer.trainingintro-2019-01.container.training/#1kadm-2019-04.container.trainingpycon2019.container.trainingk8s2d.container.trainingoscon2019.container.traininggotochgo2019.container.trainingintro-2019-01.container.training tinyshellscript.com/kubernetes-bootstrap.htmltinyshellscript.com/kubernetes-ops-week.htmltinyshellscript.com/training.htmltraining.play-with-kubernetes.com","tags":[{"name":"k8s","slug":"k8s","permalink":"http://zhourudong.cn/tags/k8s/"}]},{"title":"php配置","date":"2019-05-22T01:48:57.000Z","path":"2019/05/22/74-php配置/","text":"docker-php版本docker pull php:5.5-fpm-alpine https://github.com/docker-library/php/tree/882b9c25f14e782e45a978a68d48843b7ac54042/5.5/fpm/alpine","tags":[{"name":"php","slug":"php","permalink":"http://zhourudong.cn/tags/php/"}]},{"title":"maven常用命令","date":"2019-04-18T02:38:57.000Z","path":"2019/04/18/73-maven常用命令/","text":"mvn help:effective-settings // 检查当前Maven环境启用的文件 mvn help:effective-pom // 查看当前项目的pom配置，包括所有依赖mvn help:active-profiles // 查看当前处于激活状态的profilemvn -s &lt;filepath&gt; &lt;goal&gt; // 指定使用某个配置文件执行Maven命令mvn -s ~/.m2/settings_local.xml clean deploy // 指定使用某个配置文件执行Maven命令mvn -X // 查看当前项目的所有mvn配置mvn help:system // 打印所有可用的环境变量和Java系统属性 mvn -v //查看版本mvn archetype:create //创建 Maven 项目mvn compile //编译源代码mvn test-compile //编译测试代码mvn test //运行应用程序中的单元测试mvn site //生成项目相关信息的网站mvn package //依据项目生成 jar 文件mvn install //在本地 Repository 中安装 jarmvn -Dmaven.test.skip=true //忽略测试文档编译mvn clean //清除目标目录中的生成结果mvn clean compile //将.java类编译为.class文件mvn clean package //进行打包mvn clean test //执行单元测试mvn clean deploy //部署到版本仓库mvn clean install //使其他项目使用这个jar,会安装到maven本地仓库中mvn archetype:generate //创建项目架构mvn dependency:list //查看已解析依赖mvn dependency:tree //看到依赖树mvn dependency:analyze //查看依赖的工具mvn help:system //从中央仓库下载文件至本地仓库mvn help:active-profiles //查看当前激活的profilesmvn help:all-profiles //查看所有profilesmvn help:effective -pom //查看完整的pom信息","tags":[{"name":"mvn","slug":"mvn","permalink":"http://zhourudong.cn/tags/mvn/"}]},{"title":"网络常用技巧","date":"2019-03-05T01:56:23.000Z","path":"2019/03/05/72-网络常用技巧/","text":"","tags":[{"name":"网络","slug":"网络","permalink":"http://zhourudong.cn/tags/网络/"}]},{"title":"cow配置","date":"2019-02-23T02:28:52.000Z","path":"2019/02/23/71-cow配置/","text":"下载https://github.com/cyfdecyf/cow/releases windows打开 rc.txt 在项目的配置文件中配置监听和代理 listen = http://127.0.0.1:7777proxy = socks5://127.0.0.1:1080 设置环境变量 // 之后设置环境变量 set http_proxy=http://127.0.0.1:7777set https_proxy=http://127.0.0.1:7777 export http_proxy=http://127.0.0.1:7777export https_proxy=http://127.0.0.1:7777 Windows系统（git + ss）：复制代码设置代理 http/https协议(clone https://前缀的repo会走ss)git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;删除git config --global --unset http.proxygit config --global --unset https.proxy复制代码 或者直接在 .gitconfig 文件中加上：[http] proxy = http://127.0.0.1:1080 sslVerify = false[https] proxy = https://127.0.0.1:1080 Update（Win10）：ssr配合cow可以解决go get的问题。（ssr全局模式，vscode里不用设置代理，.gitignore里也不用设置代理。）cow目录中有个rc.txt文件，打开后删除全部内容，然后添加两行：listen = http://127.0.0.1:7777proxy = socks5://127.0.0.1:1080最后在环境变量里加上2个变量：export http_proxy=&apos;http://127.0.0.1:7777&apos;export https_proxy=&apos;http://127.0.0.1:7777&apos;启动ssr，运行cow-taskbar.exe，然后go get吧！","tags":[{"name":"cow","slug":"cow","permalink":"http://zhourudong.cn/tags/cow/"}]},{"title":"go优秀博文","date":"2018-12-06T00:49:50.000Z","path":"2018/12/06/70-go优秀博文/","text":"延迟调式 https://medium.com/observability/debugging-latency-in-go-1-11-9f97a7910d68","tags":[{"name":"golang","slug":"golang","permalink":"http://zhourudong.cn/tags/golang/"}]},{"title":"微服务","date":"2018-11-03T01:49:06.000Z","path":"2018/11/03/69-微服务/","text":"","tags":[{"name":"微服务","slug":"微服务","permalink":"http://zhourudong.cn/tags/微服务/"}]},{"title":"酷站收藏","date":"2018-09-28T02:41:35.000Z","path":"2018/09/28/68-酷站收藏/","text":"前端表严肃 http://biaoyansu.com/e10 php 源 https://mirrors.tuna.tsinghua.edu.cn/remi/ mac ntfs 挂载 https://www.cnblogs.com/MDK-L/p/4531778.html http 流量拷贝 https://github.com/buger/goreplay golang 三种设计模式https://blog.appdynamics.com/engineering/three-productive-go-patterns-put-radar/ jwt flask https://www.thatyou.cn/flask-pyjwt-%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8Ejson-web-token%E7%9A%84%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/ devops 资源参考 好的示例代码 https://github.com/ixrjog/caesar 看板 https://github.com/phodal/ledge 跳板机https://github.com/tp4a/teleport","tags":[{"name":"网站","slug":"网站","permalink":"http://zhourudong.cn/tags/网站/"}]},{"title":"微服务","date":"2018-09-06T10:52:21.000Z","path":"2018/09/06/66-微服务/","text":"网站https://micro.mu/blog/https://wuyin.io/2018/05/10/microservices-part-1-introduction-and-consignment-service/","tags":[{"name":"微服务","slug":"微服务","permalink":"http://zhourudong.cn/tags/微服务/"}]},{"title":"常用命令和工具","date":"2018-09-06T10:52:21.000Z","path":"2018/09/06/67-常用命令和工具/","text":"网站iptraf-ng git 拉取所有远程分支git branch -r | grep -v &apos;\\-&gt;&apos; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; donegit fetch --allgit pull --all 谷歌浏览历史记录查看 导出History Trends Unlimited","tags":[{"name":"命令工具","slug":"命令工具","permalink":"http://zhourudong.cn/tags/命令工具/"}]},{"title":"GraphQL学习","date":"2018-09-05T06:17:52.000Z","path":"2018/09/05/65-GraphQL学习/","text":"概念Schema服务端定义 Query","tags":[{"name":"GraphQL","slug":"GraphQL","permalink":"http://zhourudong.cn/tags/GraphQL/"}]},{"title":"ununtu常用","date":"2018-08-16T03:40:38.000Z","path":"2018/08/16/64-ununtu常用/","text":"# 已安装软件文件展开 dpkg -L kubelet 添加源 apt-get update &amp;&amp; apt-get install -y apt-transport-httpscurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.listdeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOF apt-get update","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://zhourudong.cn/tags/ubuntu/"}]},{"title":"python中的类和object","date":"2018-07-12T02:15:43.000Z","path":"2018/07/12/63-python中的类和object/","text":"In [1]: i = 1In [2]: s = '字符'In [3]: alist=['1',1]In [4]: adict=&#123;'one':1&#125;In [5]: aset=&#123;1,2&#125;In [6]: type(i)Out[6]: intIn [7]: type(s)Out[7]: strIn [8]: type(alist)Out[8]: listIn [9]: type(adict)Out[9]: dictIn [10]: type(aset)Out[10]: set In [11]: i.__class__Out[11]: intIn [12]: s.__class__Out[12]: strIn [13]: alist.__class__Out[13]: list In [17]: int.__class__Out[17]: typeIn [18]: str.__class__Out[18]: type In [19]: type.__class__Out[19]: type In [20]: object.__class__Out[20]: type","tags":[{"name":"python class object","slug":"python-class-object","permalink":"http://zhourudong.cn/tags/python-class-object/"}]},{"title":"linux_tips","date":"2018-07-11T04:44:50.000Z","path":"2018/07/11/62-linux-tips/","text":"tar + ssh传输文件(引用)[https://serverfault.com/questions/326490/running-multiple-scp-threads-simultaneously] I would do it like this:tar -cf - /manyfiles | ssh dest.server &#39;tar -xf - -C /manyfiles&#39; Depending on the files you are transferring it can make sense to enable compression in the tarcommands:tar -czf - /manyfiles | ssh dest.server &#39;tar -xzf - -C /manyfiles&#39; It may also make sense that you choose a CPU friendlier cipher for the ssh command (like arcfour):tar -cf - /manyfiles | ssh -c arcfour dest.server &#39;tar -xf - -C /manyfiles&#39; Or combine both of them, but it really depends on what your bottleneck is.Obviously rsync will be a lot faster if you are doing incremental syncs. expect 捕捉ssh自动输入sudo yum install -y expect 批量ssh公钥往目标机上传 #!/usr/bin/expect -fset login \"install\"set addr [lindex $argv 0]set pw [lindex $argv 1]spawn ssh-copyid $login@$addrexpect \"*yes/no*\" &#123; send \"yes\\r\" expect \"*?assword*\" &#123; send \"$pw\\r\" &#125; &#125; \"*?asswor*\" &#123; send \"$pw\\r\" &#125;interact #!/bin/bashpassword=`cat /root/installpassword.txt`for j in 10 11 12 13 14 15 16 17 18 19 20 do./expectscript 192.168.1.$j $passworddone","tags":[{"name":"linux","slug":"linux","permalink":"http://zhourudong.cn/tags/linux/"}]},{"title":"tomcat多实例","date":"2018-06-29T09:40:15.000Z","path":"2018/06/29/61-tomcat多实例-nginx/","text":"用户useradd -s /sbin/nologin tomcat 安装jdk设置JAVA_HOME等环境变量 sed -i &#39;s#securerandom.source=file:/dev/random#securerandom.source=file:/dev/./urandom#g&#39; &quot;$JAVA_HOME/jre/lib/security/java.security&quot; 安装tomcat复制两份tomcat到/usr/local/目录下 [root@zrd /usr/local]# ls tomcat*tomcat1:bin conf lib LICENSE logs NOTICE RELEASE-NOTES RUNNING.txt temp webapps worktomcat2:bin conf lib LICENSE logs NOTICE RELEASE-NOTES RUNNING.txt temp webapps work chown -R tomcat /usr/local/tomcat* 配置 pid mkdir -p /var/run/tomcat &amp;&amp; chown tomcat.tomcat -R /var/run/tomcat &amp;&amp; chmod 600 /var/run/tomcat sed -i &#39;/cygwin=false/i\\CATALINA_PID=/var/run/tomcat/tomcat1.pid&#39; /usr/local/tomcat1/bin/catalina.sh sed -i &#39;/cygwin=false/i\\CATALINA_PID=/var/run/tomcat/tomcat2.pid&#39; /usr/local/tomcat2/bin/catalina.sh grep CATALINA_PID= /usr/local/tomcat1/bin/catalina.sh grep CATALINA_PID= /usr/local/tomcat2/bin/catalina.sh logs tomcat1 sed -i &#39;s#${catalina.base}/logs#/home/weblog/tomcat1#g&#39; /usr/local/tomcat1/conf/logging.properties grep tomcat1 /usr/local/tomcat1/conf/logging.properties sed -i &#39;s#CATALINA_OUT=&quot;$CATALINA_BASE&quot;/logs/catalina.out#CATALINA_OUT=/home/weblog/tomcat1/catalina.out#g&#39; /usr/local/tomcat1/bin/catalina.sh grep CATALINA_OUT= /usr/local/tomcat1/bin/catalina.sh sed -i &#39;s#directory=&quot;logs&quot;#directory=&quot;/home/weblog/tomcat1&quot;#g&#39; /usr/local/tomcat1/conf/server.xml grep /home/weblog/tomcat1 /usr/local/tomcat1/conf/server.xml tomat2 sed -i &#39;s#${catalina.base}/logs#/home/weblog/tomcat2#g&#39; /usr/local/tomcat2/conf/logging.properties grep tomcat2 /usr/local/tomcat2/conf/logging.properties sed -i &#39;s#CATALINA_OUT=&quot;$CATALINA_BASE&quot;/logs/catalina.out#CATALINA_OUT=/home/weblog/tomcat2/catalina.out#g&#39; /usr/local/tomcat2/bin/catalina.sh grep CATALINA_OUT= /usr/local/tomcat2/bin/catalina.sh sed -i &#39;s#directory=&quot;logs&quot;#directory=&quot;/home/weblog/tomcat2&quot;#g&#39; /usr/local/tomcat2/conf/server.xml grep /home/weblog/tomcat2 /usr/local/tomcat2/conf/server.xml 监听端口 tomat1 sed -i &#39;s#&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;#&lt;Server port=&quot;18005&quot; shutdown=&quot;tomcat1&quot;&gt;#g&#39; /usr/local/tomcat1/conf/server.xmlgrep shutdown= /usr/local/tomcat1/conf/server.xml sed -i &#39;s#&lt;Connector port=&quot;8080&quot;#&lt;Connector port=&quot;18080&quot;#g&#39; /usr/local/tomcat1/conf/server.xmlgrep &#39;Connector port=&quot;18080&quot;&#39; /usr/local/tomcat1/conf/server.xml sed -i &#39;s#redirectPort=&quot;8443&quot;#redirectPort=&quot;18443&quot;#g&#39; /usr/local/tomcat1/conf/server.xmlgrep &#39;redirectPort=&#39; /usr/local/tomcat1/conf/server.xml sed -i &#39;s#&lt;Connector port=&quot;8009&quot;#&lt;Connector port=&quot;18009&quot;#g&#39; /usr/local/tomcat1/conf/server.xmlgrep 18009 /usr/local/tomcat1/conf/server.xml tomat2 sed -i &#39;s#&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;#&lt;Server port=&quot;18006&quot; shutdown=&quot;tomcat2&quot;&gt;#g&#39; /usr/local/tomcat2/conf/server.xmlgrep shutdown= /usr/local/tomcat2/conf/server.xml sed -i &#39;s#&lt;Connector port=&quot;8080&quot;#&lt;Connector port=&quot;18081&quot;#g&#39; /usr/local/tomcat2/conf/server.xmlgrep &#39;Connector port=&quot;18081&quot;&#39; /usr/local/tomcat2/conf/server.xml sed -i &#39;s#redirectPort=&quot;8443&quot;#redirectPort=&quot;18444&quot;#g&#39; /usr/local/tomcat2/conf/server.xmlgrep &#39;redirectPort=&#39; /usr/local/tomcat2/conf/server.xml sed -i &#39;s#&lt;Connector port=&quot;8009&quot;#&lt;Connector port=&quot;18010&quot;#g&#39; /usr/local/tomcat2/conf/server.xmlgrep 18010 /usr/local/tomcat2/conf/server.xml 启动脚本 tomcat1 cat &gt;/usr/lib/systemd/system/tomcat1.service&lt;&lt; &apos;EOF&apos; [Unit]Description=tomcat1After=syslog.target network.target[Service]Type=forking# Environment=JAVA_HOME=/usr/lib/jvm/java-8-oracle/# Environment=&apos;CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC&apos;# Environment=&apos;JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom&apos;Environment=CATALINA_PID=/var/run/tomcat/tomcat1.pidEnvironment=CATALINA_HOME=/usr/local/tomcat1Environment=CATALINA_BASE=/usr/local/tomcat1ExecStart=/usr/local/tomcat1/bin/startup.shExecStop=/bin/kill -15 $MAINPIDUser=tomcatGroup=tomcatUMask=0007RestartSec=10Restart=always# 限制20%以内占用率# CPUQuota=20%# 可以使用低于1024端口# AmbientCapabilities=CAP_NET_BIND_SERVICE[Install]WantedBy=multi-user.targetEOF tomcat2 cat &gt;/usr/lib/systemd/system/tomcat2.service&lt;&lt; &apos;EOF&apos; [Unit]Description=tomcat2After=syslog.target network.target[Service]Type=forking# Environment=JAVA_HOME=/usr/lib/jvm/java-8-oracle/# Environment=&apos;CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC&apos;# Environment=&apos;JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom&apos;Environment=CATALINA_PID=/var/run/tomcat/tomcat2.pidEnvironment=CATALINA_HOME=/usr/local/tomcat2Environment=CATALINA_BASE=/usr/local/tomcat2ExecStart=/usr/local/tomcat2/bin/startup.shExecStop=/bin/kill -15 $MAINPIDUser=tomcatGroup=tomcatUMask=0007RestartSec=10Restart=always# 限制20%以内占用率# CPUQuota=20%# 可以使用低于1024端口# AmbientCapabilities=CAP_NET_BIND_SERVICE[Install]WantedBy=multi-user.targetEOF systemctl daemon-reload systemctl cat tomcat1 systemctl cat tomcat2 tomcat 项目存放目录mkdir -pv /home/wwwroot/{tomcat1,tomcat2} chown -R tomcat.tomcat /home/wwwroot","tags":[{"name":"tomcat","slug":"tomcat","permalink":"http://zhourudong.cn/tags/tomcat/"}]},{"title":"salt-api","date":"2018-06-09T09:40:15.000Z","path":"2018/06/09/60-salt-api/","text":"安装配置vim /etc/salt/masterinterface: 192.168.1.51hash_type: sha256systemctl start salt-master.servicevim /etc/salt/minionmaster: 192.168.1.51hash_type: sha256systemctl start salt-minion.servicesalt-key -LAccepted Keys:Denied Keys:Unaccepted Keys:bukatest01-office-stg-192.168.1.51Rejected Keys:salt-key --accept=bukatest01-office-stg-192.168.1.51.centos7The following keys are going to be accepted:Unaccepted Keys:bukatest01-office-stg-192.168.1.51.centos7.sanhao.comProceed? [n/Y] YKey for minion bukatest01-office-stg-192.168.1.51.centos7 accepted.cat /etc/salt/master.d/api.conf rest_cherrypy: port: 8888 disable_ssl: True external_auth: pam: zrd: #用户 - .* # =========================https://www.jianshu.com/p/012ccdff93cchttps://www.cnblogs.com/evilliu/articles/6137336.htmlapihttps://blog.csdn.net/qq942477618/article/details/53437004https://www.jianshu.com/p/6c9b34cfe3f9# =========================== 获取tokencurl -k http://192.168.1.51:8888/login -H &quot;Accept: application/x-yaml&quot; -d username=&apos;zrd&apos; -d password=&apos;changan123&apos; -d eauth=&apos;pam&apos; return:- eauth: pam expire: 1528580253.86816 perms: - .* start: 1528537053.868159 token: 1da9b2c6c0db3fc85f374a0470186363d4b6ead7 user: zrd","tags":[{"name":"salt-api","slug":"salt-api","permalink":"http://zhourudong.cn/tags/salt-api/"}]},{"title":"npm常用命令","date":"2018-05-05T07:55:44.000Z","path":"2018/05/05/58-npm常用命令/","text":"镜像源export PHANTOMJS_CDNURL=http://npm.taobao.org/mirrors/phantomjsexport CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriverexport SELENIUM_CDNURL=http://npm.taobao.org/mirrorss/selenium","tags":[{"name":"npm","slug":"npm","permalink":"http://zhourudong.cn/tags/npm/"}]},{"title":"css_tips","date":"2018-04-23T06:35:27.000Z","path":"2018/04/23/57-css-tips/","text":"样式 行内 嵌入式 外部样式表 &lt;style type=\"text/css\"&gt; @import url(site.css); @import url(navbar.css); @import url(footer.css) screen and (min-width: 960px); body &#123; background: yellow; &#125;&lt;/style&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;basic.css&quot; media=&quot;all&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;web.css&quot; media=&quot;screen and (max-width: 960px)&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;paper.css&quot; media=&quot;print and (color-depth: 2)&quot;&gt; at-rules@charset@charset &quot;utf-8&quot;;@import@namespace@counter-style@font-face@keyframes@media@supports Position[[ left | center | right | top | bottom | &lt;percentage&gt; | &lt;length&gt; ] |[ left | center | right | &lt;percentage&gt; | &lt;length&gt; ][ top | center | bottom | &lt;percentage&gt; | &lt;length&gt; ] |[ center | [ left | right ] [ &lt;percentage&gt; | &lt;length&gt; ]? ] &amp;&amp;[ center | [ top | bottom ] [ &lt;percentage&gt; | &lt;length&gt; ]? ]] 响应式设计媒体查询 screen: 用于电脑屏幕、平板电脑、智能手机、电视监视器等 print: 打印机 speech: 阅读设备 all(default): screen, print, and speech. min-widthmax-width 语法 基本语法 https://drafts.csswg.org/mediaqueries-4/#media-query @media media-type and (media-feature) &#123; CSS-style rules …&#125; body &#123; @media screen and (max-width: 480px)&#123; background-color:white; &#125; @media screen and (min-width: 480px)&#123; background-color:black; &#125;&#125; 逻辑 and .midsize&#123; @media (min-witdh:501px) and (max-width:800px)&#123; css style rules.... &#125;&#125;&lt;!-- --&gt;@media not (width &lt;= -100px) &#123; body &#123; background: green; &#125;&#125; 小栗子 body &#123;@media screen and (max-width: 480px) &#123; background-color: white; &#125; /* phone background */@media screen and (min-width: 481px) and (max-width: 780px) &#123; background-color: yellow; &#125; /* tablet background */&#125;@media screen and (min-width: 781px) &#123; background-color: red; &#125; /* computer background */&#125; Text 响应式文本div &#123; font-size: 16px; /* 1em = 16 px */ width: 2.5em; ; /* width = 40 px */&#125; html &#123; font-size: 20px; &#125;div &#123; font-size: 16px;&#125;p &#123; font-size: 0.5rem;&#125; /* font size is 10px */ 内容垂直居中http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/ &lt;section&gt; &lt;style type=\"text/css\"&gt; .single_line&#123;line-height:30px; border:1px dashed #cccccc; padding-left:5px;&#125; .mulit_line&#123;line-height:150px; border:1px dashed #cccccc; padding-left:5px; font-size:0;&#125; .mulit_line span&#123;display:inline-block; line-height:1.4em; vertical-align:middle;&#125;&lt;/style&gt; &lt;div class=\"zxx_main_con\"&gt; &lt;strong class=\"f11\"&gt;单行文字&lt;/strong&gt; &lt;p class=\"single_line mt10 mb20\"&gt; 这是高度为30像素的单行文字 &lt;/p&gt; &lt;strong class=\"f11\"&gt;多行文字&lt;/strong&gt; &lt;p class=\"mulit_line mt10\"&gt; &lt;span style=\"font-size:12px;\"&gt;这里是高度为150像素的标签内的多行文字，文字大小为12像素。&lt;br /&gt;这里是第二行，用来测试多行的显示效果。&lt;/span&gt;&lt;i class=\"vm dib\"&gt;&amp;nbsp;&lt;/i&gt; &lt;/p&gt; &lt;p class=\"mulit_line mt10\"&gt; &lt;span style=\"font-size:20px;\"&gt;这里是高度为150像素的标签内的多行文字，文字大小为20像素。&lt;br /&gt;这里是第二行，用来测试多行的显示效果。&lt;/span&gt;&lt;i class=\"vm dib\"&gt;&amp;nbsp;&lt;/i&gt; &lt;/p&gt; &lt;/div&gt;&lt;/section&gt;","tags":[{"name":"css","slug":"css","permalink":"http://zhourudong.cn/tags/css/"}]},{"title":"html-css网站收藏","date":"2018-04-23T02:06:58.000Z","path":"2018/04/23/56-html-css网站收藏/","text":"w3c DOM:http://www.w3school.com.cn/htmldom css checked checkbox hackhttps://www.thecssninja.com/demo/css_tree/https://css-tricks.com/the-checkbox-hack/https://css-tricks.com/almanac/properties/t/transition/http://timpietrusky.com/advanced-checkbox-hack css 网站https://css-tricks.com/box-sizing/ 静态博客https://vuepress.vuejs.org/zh/ css 动画https://css-tricks.com/iron-mans-arc-reactor-using-css3-transforms-and-animations/ modal实现https://css-tricks.com/sticky-as-a-local-fixed/ css 变量https://css-tricks.com/theming-with-variables-globals-and-locals/https://gumroad.com/l/lwaUhhttps://medium.freecodecamp.org/everything-you-need-to-know-about-css-variables-c74d922ea855 autofixerhttp://pleeease.io/play/https://autoprefixer.github.io/ 布局样式https://mediaqueri.es/lyc/https://mediaqueri.es/neo/https://mediaqueri.es/mod/https://mediaqueri.es/owl/https://mediaqueri.es/ala/http://foodsense.is/https://mediaqueri.es/ffg/https://www.kaemingk.com/en/ 浏览器存储localstorehttps://blog.csdn.net/mjzhang1993/article/details/70820868","tags":[{"name":"css","slug":"css","permalink":"http://zhourudong.cn/tags/css/"}]},{"title":"flask使用总结2","date":"2018-04-18T07:18:32.000Z","path":"2018/04/18/55-flask使用总结2/","text":"[toc] User Authenticationexample from werkzeug.security import generate_password_hash, check_password_hashclass User(db.Model): # ... password_hash = db.Column(db.String(128)) @property def password(self): raise AttributeError('password is not a readable attribute') @password.setter def password(self, password): self.password_hash = generate_password_hash(password) def verify_password(self, password): return check_password_hash(self.password_hash, password) (venv) $ flask shell&gt;&gt;&gt; u = User()&gt;&gt;&gt; u.password = 'cat'&gt;&gt;&gt; u.passwordTraceback (most recent call last): File \"&lt;console&gt;\", line 1, in &lt;module&gt; File \"/home/flask/flasky/app/models.py\", line 24, in password raise AttributeError('password is not a readable attribute')AttributeError: password is not a readable attribute &gt;&gt;&gt; u.password_hash 'pbkdf2:sha256:50000$moHwFH1B$ef1574909f9c549285e8547cad181c5e0213cfa44a4aba4349fa830aa1fd227f' &gt;&gt;&gt; u.verify_password('cat') True &gt;&gt;&gt; u.verify_password('dog') False &gt;&gt;&gt; u2 = User() &gt;&gt;&gt; u2.password = 'cat' &gt;&gt;&gt; u2.password_hash 'pbkdf2:sha256:50000$Pfz0m0KU$27be930b7f0e0119d38e8d8a62f7f5e75c0a7db61ae16709bcaa6cfd60c44b74' tests/test_user_model.py: Password hashing testsimport unittestfrom app import create_app, dbfrom app.models import Userclass UserModelTestCase(unittest.TestCase): def setUp(self): self.app = create_app('testing') self.app_context = self.app.app_context() self.app_context.push() db.create_all() def tearDown(self): db.session.remove() db.drop_all() self.app_context.pop() def test_password_setter(self): u = User(password='cat') self.assertTrue(u.password_hash is not None) def test_no_password_getter(self): u = User(password='cat') with self.assertRaises(AttributeError): u.password def test_password_verification(self): u = User(password='cat') self.assertTrue(u.verify_password('cat')) self.assertFalse(u.verify_password('dog')) def test_password_salts_are_random(self): u = User(password='cat') u2 = User(password='cat') self.assertTrue(u.password_hash != u2.password_hash) (venv) $ flask testtest_app_exists (test_basics.BasicsTestCase) ... oktest_app_is_testing (test_basics.BasicsTestCase) ... oktest_no_password_getter (test_user_model.UserModelTestCase) ... oktest_password_salts_are_random (test_user_model.UserModelTestCase) ... oktest_password_setter (test_user_model.UserModelTestCase) ... oktest_password_verification (test_user_model.UserModelTestCase) ... ok----------------------------------------------------------------------Ran 6 tests in 0.393sOK app/auth/init.py: Blueprint creation 1from flask import Blueprintauth = Blueprint('auth', __name__)from . import views app/auth/views.py: Blueprint routes and view functions 2from flask import render_templatefrom . import auth@auth.route('/login')def login(): return render_template('auth/login.html') app/init.py: Blueprint attachment 3def create_app(config_name): # ... from .auth import auth as auth_blueprint app.register_blueprint(auth_blueprint, url_prefix='/auth') return app User Authentication with Flask-Login(venv) $ pip install flask-login app/models.py: Updates to the User model to support user logins 1from werkzeug.security import generate_password_hash, check_password_hashfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializerfrom flask import current_appfrom flask_login import UserMixin, AnonymousUserMixinfrom . import db, login_managerclass Permission: FOLLOW = 1 COMMENT = 2 WRITE = 4 MODERATE = 8 ADMIN = 16class Role(db.Model): __tablename__ = 'roles' id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(64), unique=True) default = db.Column(db.Boolean, default=False, index=True) permissions = db.Column(db.Integer) users = db.relationship('User', backref='role', lazy='dynamic') def __init__(self, **kwargs): super(Role, self).__init__(**kwargs) if self.permissions is None: self.permissions = 0 @staticmethod def insert_roles(): roles = &#123; 'User': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE], 'Moderator': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE], 'Administrator': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE, Permission.ADMIN], &#125; default_role = 'User' for r in roles: role = Role.query.filter_by(name=r).first() if role is None: role = Role(name=r) role.reset_permissions() for perm in roles[r]: role.add_permission(perm) role.default = (role.name == default_role) db.session.add(role) db.session.commit() def add_permission(self, perm): if not self.has_permission(perm): self.permissions += perm def remove_permission(self, perm): if self.has_permission(perm): self.permissions -= perm def reset_permissions(self): self.permissions = 0 def has_permission(self, perm): return self.permissions &amp; perm == perm def __repr__(self): return '&lt;Role %r&gt;' % self.nameclass User(UserMixin, db.Model): __tablename__ = 'users' id = db.Column(db.Integer, primary_key=True) email = db.Column(db.String(64), unique=True, index=True) username = db.Column(db.String(64), unique=True, index=True) role_id = db.Column(db.Integer, db.ForeignKey('roles.id')) password_hash = db.Column(db.String(128)) confirmed = db.Column(db.Boolean, default=False) def __init__(self, **kwargs): super(User, self).__init__(**kwargs) if self.role is None: if self.email == current_app.config['FLASKY_ADMIN']: self.role = Role.query.filter_by(name='Administrator').first() if self.role is None: self.role = Role.query.filter_by(default=True).first() @property def password(self): raise AttributeError('password is not a readable attribute') @password.setter def password(self, password): self.password_hash = generate_password_hash(password) def verify_password(self, password): return check_password_hash(self.password_hash, password) def generate_confirmation_token(self, expiration=3600): s = Serializer(current_app.config['SECRET_KEY'], expiration) return s.dumps(&#123;'confirm': self.id&#125;).decode('utf-8') def confirm(self, token): s = Serializer(current_app.config['SECRET_KEY']) try: data = s.loads(token.encode('utf-8')) except: return False if data.get('confirm') != self.id: return False self.confirmed = True db.session.add(self) return True def generate_reset_token(self, expiration=3600): s = Serializer(current_app.config['SECRET_KEY'], expiration) return s.dumps(&#123;'reset': self.id&#125;).decode('utf-8') @staticmethod def reset_password(token, new_password): s = Serializer(current_app.config['SECRET_KEY']) try: data = s.loads(token.encode('utf-8')) except: return False user = User.query.get(data.get('reset')) if user is None: return False user.password = new_password db.session.add(user) return True def generate_email_change_token(self, new_email, expiration=3600): s = Serializer(current_app.config['SECRET_KEY'], expiration) return s.dumps( &#123;'change_email': self.id, 'new_email': new_email&#125;).decode('utf-8') def change_email(self, token): s = Serializer(current_app.config['SECRET_KEY']) try: data = s.loads(token.encode('utf-8')) except: return False if data.get('change_email') != self.id: return False new_email = data.get('new_email') if new_email is None: return False if self.query.filter_by(email=new_email).first() is not None: return False self.email = new_email db.session.add(self) return True def can(self, perm): return self.role is not None and self.role.has_permission(perm) def is_administrator(self): return self.can(Permission.ADMIN) def __repr__(self): return '&lt;User %r&gt;' % self.usernameclass AnonymousUser(AnonymousUserMixin): def can(self, permissions): return False def is_administrator(self): return Falselogin_manager.anonymous_user = AnonymousUser@login_manager.user_loaderdef load_user(user_id): return User.query.get(int(user_id)) app/init.py: Flask-Login initialization 2from flask_login import LoginManagerlogin_manager = LoginManager()login_manager.login_view = 'auth.login'def create_app(config_name): # ... login_manager.init_app(app) # ... app/models.py: User loader callback function 3from . import login_manager@login_manager.user_loaderdef load_user(user_id): return User.query.get(int(user_id)) login_required登录装饰器from flask_login import login_required@app.route('/secret')@login_requireddef secret(): return 'Only authenticated users are allowed!' app/auth/forms.py: Login form 4 登录表单from flask_wtf import FlaskFormfrom wtforms import StringField, PasswordField, BooleanField, SubmitFieldfrom wtforms.validators import DataRequired, Length, Email, Regexp, EqualTofrom wtforms import ValidationErrorfrom ..models import Userclass LoginForm(FlaskForm): email = StringField('Email', validators=[DataRequired(), Length(1, 64), Email()]) password = PasswordField('Password', validators=[DataRequired()]) remember_me = BooleanField('Keep me logged in') submit = SubmitField('Log In') app/templates/base.html: Sign In and Sign Out navigation bar links 退出登录连接&lt;ul class=\"nav navbar-nav navbar-right\"&gt; &#123;% if current_user.is_authenticated %&#125; &lt;li class=\"dropdown\"&gt; &lt;a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"&gt;Account &lt;b class=\"caret\"&gt;&lt;/b&gt;&lt;/a&gt; &lt;ul class=\"dropdown-menu\"&gt; &lt;li&gt;&lt;a href=\"&#123;&#123; url_for('auth.change_password') &#125;&#125;\"&gt;Change Password&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"&#123;&#123; url_for('auth.change_email_request') &#125;&#125;\"&gt;Change Email&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"&#123;&#123; url_for('auth.logout') &#125;&#125;\"&gt;Log Out&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &#123;% else %&#125; &lt;li&gt;&lt;a href=\"&#123;&#123; url_for('auth.login') &#125;&#125;\"&gt;Log In&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125;&lt;/ul&gt; app/auth/views.py: Sign In route 用户登录viewfrom flask import render_template, redirect, request, url_for, flashfrom flask_login import login_user, logout_user, login_required, \\ current_userfrom . import authfrom .. import dbfrom ..models import Userfrom ..email import send_emailfrom .forms import LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm @auth.route('/login', methods=['GET', 'POST'])def login(): form = LoginForm() if form.validate_on_submit(): user = User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, form.remember_me.data) next = request.args.get('next') if next is None or not next.startswith('/'): next = url_for('main.index') return redirect(next) flash('Invalid username or password.') return render_template('auth/login.html', form=form) app/templates/auth/login.html: Render login form 登录表单 4&#123;% extends \"base.html\" %&#125;&#123;% import \"bootstrap/wtf.html\" as wtf %&#125;&#123;% block title %&#125;Flasky - Login&#123;% endblock %&#125;&#123;% block page_content %&#125;&lt;div class=\"page-header\"&gt; &lt;h1&gt;Login&lt;/h1&gt;&lt;/div&gt;&lt;div class=\"col-md-4\"&gt; &#123;&#123; wtf.quick_form(form) &#125;&#125; &lt;br&gt; &lt;p&gt;Forgot your password? &lt;a href=\"&#123;&#123; url_for('auth.password_reset_request') &#125;&#125;\"&gt;Click here to reset it&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;New user? &lt;a href=\"&#123;&#123; url_for('auth.register') &#125;&#125;\"&gt;Click here to register&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&#123;% endblock %&#125; app/auth/views.py: Sign Out route 用户登出 1from flask_login import logout_user, login_required@auth.route('/login', methods=['GET', 'POST'])def login(): form = LoginForm() if form.validate_on_submit(): user = User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, form.remember_me.data) next = request.args.get('next') if next is None or not next.startswith('/'): next = url_for('main.index') return redirect(next) flash('Invalid username or password.') return render_template('auth/login.html', form=form) app/templates/index.html: Greet the logged-in user 2(venv) $ flask shell&gt;&gt;&gt; u = User(email='john@example.com', username='john', password='cat')&gt;&gt;&gt; db.session.add(u)&gt;&gt;&gt; db.session.commit() app/auth/forms.py: User registration form 新用户注册from flask import render_template, redirect, request, url_for, flashfrom flask_login import login_user, logout_user, login_required, \\ current_userfrom . import authfrom .. import dbfrom ..models import Userfrom ..email import send_emailfrom .forms import LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm app/auth/forms.py: User registration form 1from flask import render_template, redirect, request, url_for, flashfrom flask_login import login_user, logout_user, login_required, \\ current_userfrom . import authfrom .. import dbfrom ..models import Userfrom ..email import send_emailfrom .forms import LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm class RegistrationForm(FlaskForm): email = StringField('Email', validators=[DataRequired(), Length(1, 64), Email()]) username = StringField('Username', validators=[ DataRequired(), Length(1, 64), Regexp('^[A-Za-z][A-Za-z0-9_.]*$', 0, 'Usernames must have only letters, numbers, dots or ' 'underscores')]) password = PasswordField('Password', validators=[ DataRequired(), EqualTo('password2', message='Passwords must match.')]) password2 = PasswordField('Confirm password', validators=[DataRequired()]) submit = SubmitField('Register') def validate_email(self, field): if User.query.filter_by(email=field.data).first(): raise ValidationError('Email already registered.') def validate_username(self, field): if User.query.filter_by(username=field.data).first(): raise ValidationError('Username already in use.') app/auth/views.py: User registration route 注册新用户@auth.route(&apos;/register&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])def register(): form = RegistrationForm() if form.validate_on_submit(): user = User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add(user) db.session.commit() token = user.generate_confirmation_token() send_email(user.email, &apos;Confirm Your Account&apos;, &apos;auth/email/confirm&apos;, user=user, token=token) flash(&apos;A confirmation email has been sent to you by email.&apos;) return redirect(url_for(&apos;auth.login&apos;)) return render_template(&apos;auth/register.html&apos;, form=form) 用户权限app/models.py: Role permissions 1class Role(db.Model): __tablename__ = 'roles' id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(64), unique=True) default = db.Column(db.Boolean, default=False, index=True) permissions = db.Column(db.Integer) users = db.relationship('User', backref='role', lazy='dynamic') def __init__(self, **kwargs): super(Role, self).__init__(**kwargs) if self.permissions is None: self.permissions = 0 @staticmethod def insert_roles(): roles = &#123; 'User': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE], 'Moderator': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE], 'Administrator': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE, Permission.ADMIN], &#125; default_role = 'User' for r in roles: role = Role.query.filter_by(name=r).first() if role is None: role = Role(name=r) role.reset_permissions() for perm in roles[r]: role.add_permission(perm) role.default = (role.name == default_role) db.session.add(role) db.session.commit() def add_permission(self, perm): if not self.has_permission(perm): self.permissions += perm def remove_permission(self, perm): if self.has_permission(perm): self.permissions -= perm def reset_permissions(self): self.permissions = 0 def has_permission(self, perm): return self.permissions &amp; perm == perm def __repr__(self): return '&lt;Role %r&gt;' % self.name app/models.py: Permission constants 2class Permission: FOLLOW = 1 COMMENT = 2 WRITE = 4 MODERATE = 8 ADMIN = 16 app/models.py: Permission management in the Role model 3class Role(db.Model): # ... def add_permission(self, perm): if not self.has_permission(perm): self.permissions += perm def remove_permission(self, perm): if self.has_permission(perm): self.permissions -= perm def reset_permissions(self): self.permissions = 0 def has_permission(self, perm): return self.permissions &amp; perm == perm (venv) $ flask shell&gt;&gt;&gt; r = Role(name='User')&gt;&gt;&gt; r.add_permission(Permission.FOLLOW)&gt;&gt;&gt; r.add_permission(Permission.WRITE)&gt;&gt;&gt; r.has_permission(Permission.FOLLOW)True&gt;&gt;&gt; r.has_permission(Permission.ADMIN)False&gt;&gt;&gt; r.reset_permissions()&gt;&gt;&gt; r.has_permission(Permission.FOLLOW)False app/models.py: Create roles in the database 3class Role(db.Model): # .... @staticmethod def insert_roles(): roles = &#123; 'User': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE], 'Moderator': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE], 'Administrator': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE, Permission.MODERATE, Permission.ADMIN], &#125; default_role = 'User' for r in roles: role = Role.query.filter_by(name=r).first() if role is None: role = Role(name=r) role.reset_permissions() for perm in roles[r]: role.add_permission(perm) role.default = (role.name == default_role) db.session.add(role) db.session.commit() app/models.py: Define a default role for users 权限分配class User(UserMixin, db.Model): def __init__(self, **kwargs): super(User, self).__init__(**kwargs) if self.role is None: if self.email == current_app.config['FLASKY_ADMIN']: self.role = Role.query.filter_by(name='Administrator').first() if self.role is None: self.role = Role.query.filter_by(default=True).first() app/models.py: Evaluate whether a user has a given permission 权限检查class User(UserMixin, db.Model): # ... def can(self, perm): return self.role is not None and self.role.has_permission(perm) def is_administrator(self): return self.can(Permission.ADMIN) def __repr__(self): return '&lt;User %r&gt;' % self.usernameclass AnonymousUser(AnonymousUserMixin): def can(self, permissions): return False def is_administrator(self): return Falselogin_manager.anonymous_user = AnonymousUser 权限检查装饰器from functools import wrapsfrom flask import abortfrom flask_login import current_userfrom .models import Permissiondef permission_required(permission): def decorator(f): @wraps(f) def decorated_function(*args, **kwargs): if not current_user.can(permission): abort(403) return f(*args, **kwargs) return decorated_function return decoratordef admin_required(f): return permission_required(Permission.ADMIN)(f) 使用权限装饰器from .decorators import admin_required, permission_required@main.route('/admin')@login_required@admin_requireddef for_admins_only(): return \"For administrators!\"@main.route('/admin')@login_required@permission_required(Permission.MODERATE)def for_moderators_only(): return \"For comment moderators!\" 将权限检查添加到 全局上下文中# app/main/__init__.py: Adding the Permission class to the template context@main.app_context_processordef inject_permissions(): return dict(Permission=Permission) 测试tests/test_user_model.py: Unit tests for roles and permissions import unittestimport timefrom app import create_app, dbfrom app.models import User, AnonymousUser, Role, Permissionclass UserModelTestCase(unittest.TestCase): def setUp(self): self.app = create_app('testing') self.app_context = self.app.app_context() self.app_context.push() db.create_all() Role.insert_roles() def test_user_role(self): u = User(email='john@example.com', password='cat') self.assertTrue(u.can(Permission.FOLLOW)) self.assertTrue(u.can(Permission.COMMENT)) self.assertTrue(u.can(Permission.WRITE)) self.assertFalse(u.can(Permission.MODERATE)) self.assertFalse(u.can(Permission.ADMIN)) def test_moderator_role(self): r = Role.query.filter_by(name='Moderator').first() u = User(email='john@example.com', password='cat', role=r) self.assertTrue(u.can(Permission.FOLLOW)) self.assertTrue(u.can(Permission.COMMENT)) self.assertTrue(u.can(Permission.WRITE)) self.assertTrue(u.can(Permission.MODERATE)) self.assertFalse(u.can(Permission.ADMIN)) def test_administrator_role(self): r = Role.query.filter_by(name='Administrator').first() u = User(email='john@example.com', password='cat', role=r) self.assertTrue(u.can(Permission.FOLLOW)) self.assertTrue(u.can(Permission.COMMENT)) self.assertTrue(u.can(Permission.WRITE)) self.assertTrue(u.can(Permission.MODERATE)) self.assertTrue(u.can(Permission.ADMIN)) def test_anonymous_user(self): u = AnonymousUser() self.assertFalse(u.can(Permission.FOLLOW)) self.assertFalse(u.can(Permission.COMMENT)) self.assertFalse(u.can(Permission.WRITE)) self.assertFalse(u.can(Permission.MODERATE)) self.assertFalse(u.can(Permission.ADMIN)) (venv) $ flask shell&gt;&gt;&gt; Role.insert_roles()&gt;&gt;&gt; Role.query.all()[&lt;Role 'Administrator'&gt;, &lt;Role 'User'&gt;, &lt;Role 'Moderator'&gt;](venv) $ flask shell&gt;&gt;&gt; admin_role = Role.query.filter_by(name='Administrator').first()&gt;&gt;&gt; default_role = Role.query.filter_by(default=True).first()&gt;&gt;&gt; for u in User.query.all():... if u.role is None:... if u.email == app.config['FLASKY_ADMIN']:... u.role = admin_role... else:... u.role = default_role...&gt;&gt;&gt; db.session.commit()","tags":[{"name":"flask","slug":"flask","permalink":"http://zhourudong.cn/tags/flask/"}]},{"title":"flask使用总结1","date":"2018-04-18T07:18:31.000Z","path":"2018/04/18/54-flask使用总结1/","text":"[TOC] 路由@app.route('/')def index(): return '&lt;h1&gt;Hello World!&lt;/h1&gt;'def index(): return '&lt;h1&gt;Hello World!&lt;/h1&gt;'app.add_url_rule('/', 'index', index)# 动态路由from flask import Flaskapp = Flask(__name__)@app.route('/')def index(): return '&lt;h1&gt;Hello World!&lt;/h1&gt;'@app.route('/user/&lt;name&gt;')def user(name): return '&lt;h1&gt;Hello, &#123;&#125;!&lt;/h1&gt;'.format(name)# 打印出所有的路由(venv) $ python&gt;&gt;&gt; from hello import app&gt;&gt;&gt; app.url_mapMap([&lt;Rule '/' (HEAD, OPTIONS, GET) -&gt; index&gt;, &lt;Rule '/static/&lt;filename&gt;' (HEAD, OPTIONS, GET) -&gt; static&gt;, &lt;Rule '/user/&lt;name&gt;' (HEAD, OPTIONS, GET) -&gt; user&gt;])# 重定向from flask import redirect@app.route('/')def index(): return redirect('http://www.example.com')# 抛出错误页面from flask import abort@app.route('/user/&lt;id&gt;')def get_user(id): user = load_user(id) if not user: abort(404) return '&lt;h1&gt;Hello, &#123;&#125;&lt;/h1&gt;'.format(user.name)# url_for()url_for('.index')\"\"\"In its simplest usage, this function takes the view function name (or endpoint name for routes defined with app.add_url_route()) as its single argument and returns its URL. For example, in the current version of hello.py the call url_for('index') would return /, the root URL of the application. Calling url_for('index', _external=True) would instead return an absolute URL, which in this example is http://localhost:5000/.\"\"\" Static Files 静态文件&#123;% block head %&#125;&#123;&#123; super() &#125;&#125; &lt;link rel=\"shortcut icon\" href=\"&#123;&#123; url_for('static', filename='favicon.ico') &#125;&#125;\" type=\"image/x-icon\"&gt; &lt;link rel=\"icon\" href=\"&#123;&#123; url_for('static', filename='favicon.ico') &#125;&#125;\" type=\"image/x-icon\"&gt;&#123;% endblock %&#125; 开发服务器(venv) $ export FLASK_APP=hello.py(venv) $ flask run * Serving Flask app \"hello\" * * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)(venv) $ set FLASK_APP=hello.py(venv) $ flask run * Serving Flask app \"hello\" * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)# debug模式(venv) $ export FLASK_APP=hello.py(venv) $ export FLASK_DEBUG=1(venv) $ flask run * Serving Flask app \"hello\" * Forcing debug mode on * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 273-181-528# 命令行参数(venv) $ flask run --host 0.0.0.0 * Serving Flask app \"hello\" * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit) The Request-Response Cycle 请求 响应上下文from flask import request@app.route('/')def index(): user_agent = request.headers.get('User-Agent') return '&lt;p&gt;Your browser is &#123;&#125;&lt;/p&gt;'.format(user_agent) post from flask import request@app.route('/login', methods=['POST', 'GET'])def login(): error = None if request.method == 'POST': if valid_login(request.form['username'], request.form['password']): return log_the_user_in(request.form['username']) else: error = 'Invalid username/password' # the code below is executed if the request method # was GET or the credentials were invalid return render_template('login.html', error=error)print request.form.get('myid') #inputprint request.form.getlist('mychecks') #check组 全局变量 current_app g request session &gt;&gt;&gt; from hello import app&gt;&gt;&gt; from flask import current_app&gt;&gt;&gt; current_app.nameTraceback (most recent call last):...RuntimeError: working outside of application context&gt;&gt;&gt; app_ctx = app.app_context()&gt;&gt;&gt; app_ctx.push()&gt;&gt;&gt; current_app.name'hello'&gt;&gt;&gt; app_ctx.pop() The Request Objecthttp://flask.pocoo.org/docs/0.12/api/#incoming-request-data form dict对象 args dict对象 values dict对象 cookies dict对象 Request Hooks 请求钩子 before_first_request before_request @auth.before_app_requestdef before_request(): if current_user.is_authenticated: current_user.ping() if not current_user.confirmed \\ and request.endpoint \\ and request.blueprint != 'auth' \\ and request.endpoint != 'static': return redirect(url_for('auth.unconfirmed')) after_request teardown_request Responses 响应对象http://flask.pocoo.org/docs/0.12/api/#response-objects from flask import make_response@app.route('/')def index(): response = make_response('&lt;h1&gt;This document carries a cookie!&lt;/h1&gt;') response.set_cookie('answer', '42') return response headers A Headers object representing the response headers. status A string with a response status. status_code The response status as integer. data A descriptor that calls get_data() and set_data(). This should not be used and will eventually get deprecated. mimetype The mimetype (content type without charset etc.) Templates# 模板渲染from flask import Flask, render_template# ...@app.route('/')def index(): return render_template('index.html')@app.route('/user/&lt;name&gt;')def user(name): return render_template('user.html', name=name) jinjia2 内置过滤器Hello, safe capitalize lower upper title trim striptags 渲染语法&#123;% macro render_comment(comment) %&#125; &lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;/li&gt;&#123;% endmacro %&#125;&lt;ul&gt; &#123;% for comment in comments %&#125; &#123;&#123; render_comment(comment) &#125;&#125; &#123;% endfor %&#125;&lt;/ul&gt;&lt;!-- example 2 部分渲染 --&gt;&#123;% import 'macros.html' as macros %&#125;&lt;ul&gt; &#123;% for comment in comments %&#125; &#123;&#123; macros.render_comment(comment) &#125;&#125; &#123;% endfor %&#125;&lt;/ul&gt;&lt;!-- example 块语法 --&gt;&lt;html&gt;&lt;head&gt; &#123;% block head %&#125; &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125; - My Application&lt;/title&gt; &#123;% endblock %&#125;&lt;/head&gt;&lt;body&gt;&#123;% block body %&#125;&#123;% endblock %&#125;&lt;/body&gt;&lt;/html&gt;&lt;!-- example 使用super()保留原来的内容 --&gt;&#123;% extends \"base.html\" %&#125;&#123;% block title %&#125;Index&#123;% endblock %&#125;&#123;% block head %&#125; &#123;&#123; super() &#125;&#125; &lt;style&gt; &lt;/style&gt;&#123;% endblock %&#125;&#123;% block body %&#125;&lt;h1&gt;Hello, World!&lt;/h1&gt;&#123;% endblock %&#125; 集成bootstrap(venv) $ pip install flask-bootstrap from flask_bootstrap import Bootstrap# ...bootstrap = Bootstrap(app) 导航菜单示例 &#123;% extends \"bootstrap/base.html\" %&#125;&#123;% block title %&#125;页面标题&#123;% endblock %&#125;&#123;% block navbar %&#125; &lt;div class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"/\"&gt;Flasky&lt;/a&gt; &lt;/div&gt; &lt;div class=\"navbar-collapse collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &lt;div class=\"page-header\"&gt; &lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125; 错误页面@app.errorhandler(404)def page_not_found(e): return render_template('404.html'), 404 @app.errorhandler(500)def internal_server_error(e): return render_template('500.html'), 500 表单(venv) $ pip install flask-wtf from flask_wtf import FlaskFormfrom wtforms import StringField, SubmitFieldfrom wtforms.validators import DataRequiredclass NameForm(FlaskForm): name = StringField('What is your name?', validators=[DataRequired()]) submit = SubmitField('Submit') @app.route('/', methods=['GET', 'POST'])def index(): name = None form = NameForm() if form.validate_on_submit(): name = form.name.data form.name.data = '' return render_template('index.html', form=form, name=name) sessionfrom flask import Flask, render_template, session, redirect, url_for@app.route('/', methods=['GET', 'POST'])def index(): form = NameForm() if form.validate_on_submit(): session['name'] = form.name.data return redirect(url_for('index')) return render_template('index.html', form=form, name=session.get('name')) database(venv) $ pip install flask-sqlalchemy http://flask-sqlalchemy.pocoo.org/2.3/config/ 关联表class Role(db.Model): # ... users = db.relationship('User', backref='role') class User(db.Model): # ... role_id = db.Column(db.Integer, db.ForeignKey('roles.id')) (venv) $ flask shell&gt;&gt;&gt; from hello import db&gt;&gt;&gt; db.create_all() 多表关联registrations = db.Table('registrations', db.Column('student_id', db.Integer, db.ForeignKey('students.id')), db.Column('class_id', db.Integer, db.ForeignKey('classes.id')))class Student(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String) classes = db.relationship('Class', secondary=registrations, backref=db.backref('students', lazy='dynamic'), lazy='dynamic')class Class(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String) 操作 &gt;&gt;&gt; s.classes.append(c)&gt;&gt;&gt; db.session.add(s)&gt;&gt;&gt; s.classes.all()&gt;&gt;&gt; c.students.all()&gt;&gt;&gt; s.classes.remove(c) example view @app.route('/', methods=['GET', 'POST'])def index(): form = NameForm() if form.validate_on_submit(): user = User.query.filter_by(username=form.name.data).first() if user is None: user = User(username=form.name.data) db.session.add(user) db.session.commit() session['known'] = False else: session['known'] = True session['name'] = form.name.data form.name.data = '' return redirect(url_for('index')) return render_template('index.html', form=form, name=session.get('name'), known=session.get('known', False)) html &#123;% extends \"base.html\" %&#125;&#123;% import \"bootstrap/wtf.html\" as wtf %&#125;&#123;% block title %&#125;Flasky&#123;% endblock %&#125;&#123;% block page_content %&#125; &lt;div class=\"page-header\"&gt; &lt;h1&gt;Hello, &#123;% if name %&#125;&#123;&#123; name &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!&lt;/h1&gt; &#123;% if not known %&#125; &lt;p&gt;Pleased to meet you!&lt;/p&gt; &#123;% else %&#125; &lt;p&gt;Happy to see you again!&lt;/p&gt; &#123;% endif %&#125; &lt;/div&gt; &#123;&#123; wtf.quick_form(form) &#125;&#125;&#123;% endblock %&#125; ## 集成到shell命令行中@app.shell_context_processordef make_shell_context(): return dict(db=db, User=User, Role=Role) $ flask shell&gt;&gt;&gt; app&lt;Flask 'hello'&gt;&gt;&gt;&gt; db&lt;SQLAlchemy engine='sqlite:////home/flask/flasky/data.sqlite'&gt;&gt;&gt;&gt; User&lt;class 'hello.User'&gt; 迁移文件(venv) $ pip install flask-migrate from flask_migrate import Migrate# ...migrate = Migrate(app, db) (venv) $ flask db init Creating directory /home/flask/flasky/migrations...done Creating directory /home/flask/flasky/migrations/versions...done 迁移文件 # 加上注释便于回滚(venv) $ flask db migrate -m \"initial migration\"INFO [alembic.migration] Context impl SQLiteImpl. Generating /home/flask/flasky/migrations/versions/1bc 594146bb5_initial_migration.py...done (venv) $ flask db upgradeINFO [alembic.migration] Context impl SQLiteImpl.INFO [alembic.migration] Will assume non-transactional DDL.INFO [alembic.migration] Running upgrade None -&gt; 1bc594146bb5, initial migration 邮件(venv) $ pip install flask-mail import os# ...app.config['MAIL_SERVER'] = 'smtp.googlemail.com'app.config['MAIL_PORT'] = 587app.config['MAIL_USE_TLS'] = Trueapp.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD') from flask_mail import Mailmail = Mail(app) (venv) $ export MAIL_USERNAME=&lt;Gmail username&gt;(venv) $ export MAIL_PASSWORD=&lt;Gmail password&gt;# windows (venv) $ set MAIL_USERNAME=&lt;Gmail username&gt;(venv) $ set MAIL_PASSWORD=&lt;Gmail password&gt; shell 命令行中发送邮件 (venv) $ flask shell&gt;&gt;&gt; from flask_mail import Message&gt;&gt;&gt; from hello import mail&gt;&gt;&gt; msg = Message('test email', sender='you@example.com',... recipients=['you@example.com'])&gt;&gt;&gt; msg.body = 'This is the plain text body'&gt;&gt;&gt; msg.html = 'This is the &lt;b&gt;HTML&lt;/b&gt; body'&gt;&gt;&gt; with app.app_context():... mail.send(msg)... Integrating Emails with the Application 集成到应用中 from flask_mail import Messageapp.config['FLASKY_MAIL_SUBJECT_PREFIX'] = '[Flasky]'app.config['FLASKY_MAIL_SENDER'] = 'Flasky Admin &lt;flasky@example.com&gt;'def send_email(to, subject, template, **kwargs): msg = Message(app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject, sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to]) msg.body = render_template(template + '.txt', **kwargs) msg.html = render_template(template + '.html', **kwargs) mail.send(msg) example # ...app.config['FLASKY_ADMIN'] = os.environ.get('FLASKY_ADMIN')# ...@app.route('/', methods=['GET', 'POST'])def index(): form = NameForm() if form.validate_on_submit(): user = User.query.filter_by(username=form.name.data).first() if user is None: user = User(username=form.name.data) db.session.add(user) session['known'] = False if app.config['FLASKY_ADMIN']: send_email(app.config['FLASKY_ADMIN'], 'New User', 'mail/new_user', user=user) else: session['known'] = True session['name'] = form.name.data form.name.data = '' return redirect(url_for('index')) return render_template('index.html', form=form, name=session.get('name'), known=session.get('known', False)) (venv) $ export FLASKY_ADMIN=&lt;your-email-address&gt;(venv) $ set FLASKY_ADMIN=&lt;your-email-address&gt; Sending Asynchronous Emailfrom threading import Threaddef send_async_email(app, msg): with app.app_context(): mail.send(msg)def send_email(to, subject, template, **kwargs): msg = Message( app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject, sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to] ) msg.body = render_template(template + '.txt', **kwargs) msg.html = render_template(template + '.html', **kwargs) thr = Thread(target=send_async_email, args=[app, msg]) thr.start() return thr 大型项目文件结构flasky├── LICENSE├── README.md├── __pycache__│ └── hello.cpython-35.pyc├── app│ ├── __init__.py│ ├── email.py│ ├── main│ │ ├── __init__.py│ │ ├── errors.py│ │ ├── forms.py│ │ └── views.py│ ├── models.py│ ├── static│ │ └── favicon.ico│ └── templates│ ├── 404.html│ ├── 500.html│ ├── base.html│ ├── index.html│ └── mail│ ├── new_user.html│ └── new_user.txt├── config.py├── flasky.py├── migrations│ ├── README│ ├── alembic.ini│ ├── env.py│ ├── script.py.mako│ └── versions│ └── 38c4e85512a9_initial_migration.py├── requirements.txt└── tests ├── __init__.py └── test_basics.py9 directories, 27 files config.pyimport osbasedir = os.path.abspath(os.path.dirname(__file__))class Config: SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string' MAIL_SERVER = os.environ.get('MAIL_SERVER', 'smtp.googlemail.com') MAIL_PORT = int(os.environ.get('MAIL_PORT', '587')) MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in \\ ['true', 'on', '1'] MAIL_USERNAME = os.environ.get('MAIL_USERNAME') MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD') FLASKY_MAIL_SUBJECT_PREFIX = '[Flasky]' FLASKY_MAIL_SENDER = 'Flasky Admin &lt;flasky@example.com&gt;' FLASKY_ADMIN = os.environ.get('FLASKY_ADMIN') SQLALCHEMY_TRACK_MODIFICATIONS = False @staticmethod def init_app(app): passclass DevelopmentConfig(Config): DEBUG = True SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\ 'sqlite:///' + os.path.join(basedir, 'data-dev.sqlite')class TestingConfig(Config): TESTING = True SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or \\ 'sqlite://'class ProductionConfig(Config): SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\ 'sqlite:///' + os.path.join(basedir, 'data.sqlite')config = &#123; 'development': DevelopmentConfig, 'testing': TestingConfig, 'production': ProductionConfig, 'default': DevelopmentConfig&#125; app/main/init.py: Blueprint creation 蓝图创建from flask import Blueprintmain = Blueprint('main', __name__)from . import views, errors app/init.pyfrom flask import Flaskfrom flask_bootstrap import Bootstrapfrom flask_mail import Mailfrom flask_moment import Momentfrom flask_sqlalchemy import SQLAlchemyfrom config import configbootstrap = Bootstrap()mail = Mail()moment = Moment()db = SQLAlchemy()def create_app(config_name): app = Flask(__name__) app.config.from_object(config[config_name]) config[config_name].init_app(app) bootstrap.init_app(app) mail.init_app(app) moment.init_app(app) db.init_app(app) from .main import main as main_blueprint # 注册蓝图 app.register_blueprint(main_blueprint) # 注册蓝图 return app app/main/errors.py: Blueprint with error handlersfrom flask import render_templatefrom . import main@main.app_errorhandler(404)def page_not_found(e): return render_template('404.html'), 404@main.app_errorhandler(500)def internal_server_error(e): return render_template('500.html'), 500 app/main/views.py: Blueprint with application routesfrom flask import render_template, session, redirect, url_for, current_appfrom .. import dbfrom ..models import Userfrom ..email import send_emailfrom . import mainfrom .forms import NameForm@main.route('/', methods=['GET', 'POST'])def index(): form = NameForm() if form.validate_on_submit(): user = User.query.filter_by(username=form.name.data).first() if user is None: user = User(username=form.name.data) db.session.add(user) session['known'] = False if current_app.config['FLASKY_ADMIN']: send_email(current_app.config['FLASKY_ADMIN'], 'New User', 'mail/new_user', user=user) else: session['known'] = True session['name'] = form.name.data return redirect(url_for('.index')) return render_template('index.html', form=form, name=session.get('name'), known=session.get('known', False)) Application Scriptflasky.py: Main script import osfrom flask_migrate import Migratefrom app import create_app, dbfrom app.models import User, Roleapp = create_app(os.getenv('FLASK_CONFIG') or 'default')migrate = Migrate(app, db)@app.shell_context_processordef make_shell_context(): return dict(db=db, User=User, Role=Role)@app.cli.command()def test(): \"\"\"Run the unit tests.\"\"\" import unittest tests = unittest.TestLoader().discover('tests') unittest.TextTestRunner(verbosity=2).run(tests) Requirements File(venv) $ pip freeze &gt;requirements.txt (venv) $ pip install -r requirements.txt # 安装 Unit Teststests/test_basics.py: Unit testsimport unittestfrom flask import current_appfrom app import create_app, dbclass BasicsTestCase(unittest.TestCase): def setUp(self): self.app = create_app('testing') self.app_context = self.app.app_context() self.app_context.push() db.create_all() def tearDown(self): db.session.remove() db.drop_all() self.app_context.pop() def test_app_exists(self): self.assertFalse(current_app is None) def test_app_is_testing(self): self.assertTrue(current_app.config['TESTING']) flasky.py: Unit test launcher command@app.cli.command()def test(): \"\"\"Run the unit tests.\"\"\" import unittest tests = unittest.TestLoader().discover('tests') unittest.TextTestRunner(verbosity=2).run(tests) 运行单元测试(venv) $ flask testtest_app_exists (test_basics.BasicsTestCase) ... oktest_app_is_testing (test_basics.BasicsTestCase) ... ok.----------------------------------------------------------------------Ran 2 tests in 0.001sOK 修改模型(venv) $ flask db upgradeINFO [alembic.runtime.migration] Context impl SQLiteImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.INFO [alembic.runtime.migration] Running upgrade -&gt; 38c4e85512a9, initial migration Running the Application(venv) $ export FLASK_APP=flasky.py(venv) $ export FLASK_DEBUG=1(venv) $ flask run utils获取当前时间Message Flashing 消息闪现from flask import Flask, render_template, session, redirect, url_for, flash@app.route('/', methods=['GET', 'POST'])def index(): form = NameForm() if form.validate_on_submit(): old_name = session.get('name') if old_name is not None and old_name != form.name.data: flash('Looks like you have changed your name!') session['name'] = form.name.data return redirect(url_for('index')) return render_template('index.html', form = form, name = session.get('name')) &#123;% block content %&#125; &lt;div class=\"container\"&gt; &#123;% for message in get_flashed_messages() %&#125; &lt;div class=\"alert alert-warning\"&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\"&gt;&amp;times;&lt;/button&gt; &#123;&#123; message &#125;&#125; &lt;/div&gt; &#123;% endfor %&#125; &#123;% block page_content %&#125;&#123;% endblock %&#125; &lt;/div&gt;&#123;% endblock %&#125;","tags":[{"name":"flask","slug":"flask","permalink":"http://zhourudong.cn/tags/flask/"}]},{"title":"python3进程池_线程池","date":"2018-03-24T10:58:46.000Z","path":"2018/03/24/53-python3进程池-线程池/","text":"进程池from concurrent.futures import ProcessPoolExecutorimport osdef task(): print(\"Executing our Task on Process &#123;&#125;\".format(os.getpid()))def main(): executor = ProcessPoolExecutor(max_workers=3) task1 = executor.submit(task) task2 = executor.submit(task)if __name__ == '__main__': main() 上下文进程池from concurrent.futures import ProcessPoolExecutorimport osdef task(): print(\"Executing our Task on Process: &#123;&#125;\".format(os.getpid()))def main():# executor = ProcessPoolExecutor(max_workers=3) with ProcessPoolExecutor(max_workers=3) as executor: task1 = executor.submit(task) task2 = executor.submit(task)main() 线程池from concurrent.futures import ThreadPoolExecutorimport threadingimport randomdef task(): print(\"Executing our Task\") result = 0 i = 0 for i in range(10): result = result + i print(\"I: &#123;&#125;\".format(result)) print(\"Task Executed &#123;&#125;\".format(threading.current_thread()))def main(): executor = ThreadPoolExecutor(max_workers=3) task1 = executor.submit(task) task2 = executor.submit(task)if __name__ == '__main__': main() 带上下文线程池from concurrent.futures import ThreadPoolExecutordef task(n): print(\"Processing &#123;&#125;\".format(n))def main(): print(\"Starting ThreadPoolExecutor\") with ThreadPoolExecutor(max_workers=3) as executor: future = executor.submit(task, (2)) future = executor.submit(task, (3)) future = executor.submit(task, (4)) print(\"All tasks complete\") if __name__ == '__main__': main()","tags":[{"name":"进程池 线程池","slug":"进程池-线程池","permalink":"http://zhourudong.cn/tags/进程池-线程池/"}]},{"title":"ss使用","date":"2018-01-10T10:00:35.000Z","path":"2018/01/10/52-ss/","text":"1https://github.com/rofl0r/proxychains-ng*** Installation *** # needs a working C compiler, preferably gcc ./configure --prefix=/usr --sysconfdir=/etc make [optional] sudo make install [optional] sudo make install-config (installs proxychains.conf)# 改配置文件tail -1 proxychains.conf socks5 127.0.0.1 1080 2https://github.com/shadowsocks/shadowsocks-libevhttps://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/yum install shadowsocks-libev vim hk.json&#123; \"server\": \"hk1-dafsasdfs.dsaf.pw\", \"server_port\": 5146, \"password\": \"dasfsfsdfasdf\", \"method\": \"chacha20-ietf-poly1305\", \"plugin\": \"\", \"plugin_opts\": \"\", \"remarks\": \"香港 流量费率: 1.0\", \"timeout\": 5, \"local_address\": 127.0.0.1, \"method\": \"chacha20-ietf-poly1305\", &#125; 3 ./proxychains4 curl ip.cn[proxychains] config file found: /sock/etc/proxychains.conf[proxychains] preloading /sock/bin/lib/libproxychains4.so[proxychains] DLL init: proxychains-ng 4.12[proxychains] Strict chain ... 127.0.0.1:1080 ... ip.cn:80 ... OK当前 IP：15.25.12.17 来自：香港特别行政区 两个命令ss-local -c /sock/hk.jsonss-local -s 127.0.0.1 -l 1080 -m chacha20-ietf-poly1305 -c /ss/jp.json proxychains4 -f /sock/etc/proxychains.conf curl ip.cn","tags":[{"name":"ss","slug":"ss","permalink":"http://zhourudong.cn/tags/ss/"}]},{"title":"mongodb副本集搭建","date":"2017-10-19T05:58:45.000Z","path":"2017/10/19/51-mongodb副本集搭建/","text":"[TOC] mongodb副本集搭建软件版本os:# cat /etc/redhat-release CentOS Linux release 7.4.1708 (Core) 3.4.xcat /etc/yum.repos.d/mongodb.repo[mongodb-org]name=MongoDB Repositorybaseurl=https://mirrors.tuna.tsinghua.edu.cn/mongodb/yum/el7-3.4/gpgcheck=0enabled=1cat /etc/hosts10.76.249.128 n110.76.249.129 n210.76.249.130 n3 安装yum install mongodb-org 创建keyfileopenssl rand -base64 756 &gt; /var/lib/mongo/mongokeyfilescp -p /var/lib/mongo/mongokeyfile n2:/var/lib/mongo/mongokeyfilechmod 400 /var/lib/mongo/mongokeyfile chown mongod:mongod /var/lib/mongo/mongokeyfile 复制集各节点keyfile必须一致，否则复制集群初始化失败 配置文件 配置详情cat /etc/mongod.conf# mongod.conf# for documentation of all options, see:# http://docs.mongodb.org/manual/reference/configuration-options/# where to write logging data.systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log# Where and how to store data.storage: dbPath: /var/lib/mongo journal: enabled: true directoryPerDB: true engine: wiredTiger wiredTiger: engineConfig: cacheSizeGB: 2 #cacheSizeGB:1 # 默认大小 = 50%总内存 - 1GB 或者是 256MB(内存过小情况下)# how the process runsprocessManagement: fork: true # fork and run in background pidFilePath: /var/run/mongodb/mongod.pid # location of pidfile# network interfacesnet: port: 27017 #bindIp: [127.0.0.1,10.76.249.129] # Listen to local interface only, comment to listen on all interfaces. bindIp: [127.0.0.1] # Listen to local interface only, comment to listen on all interfaces.#security:security: keyFile: /var/lib/mongo/mongokeyfile clusterAuthMode: keyFile authorization: enabledsetParameter: enableLocalhostAuthBypass: true # 开启权限认证,防止数据库中没有用户,创建第一个用户必须有创建用户和授权的权限 #operationProfiling:operationProfiling: slowOpThresholdMs: 1 # 默认100毫秒 mode: slowOp # 只包含oplog的慢查日志#replication:replication: oplogSizeMB: 1024 replSetName: sanhao #secondaryIndexPrefetch: &lt;string&gt; # mmapv1有效 #enableMajorityReadConcern: &lt;boolean&gt;#sharding:## Enterprise-Only Options#snmp: 启动systemctl start mongod.service 初始化副本集rs.initiate( &#123; _id : &quot;sanhao&quot;, members: [ &#123; _id : 0, host : &quot;192.168.1.52:27017&quot; &#125;, &#123; _id : 1, host : &quot;192.168.1.52:27018&quot; &#125;, &#123; _id : 2, host : &quot;192.168.1.52:27019&quot; &#125; ] &#125;) 创建用户admin = db.getSiblingDB(&quot;admin&quot;)admin.createUser( &#123; user: &quot;root&quot;, pwd: &quot;abcd123&quot;, roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ] &#125;)# 集群状态use admindb.auth(&apos;root&apos;, &apos;abcd123&apos;)rs.status() 测试复制集可用sanhao:PRIMARY&gt; use zrdswitched to db zrdsanhao:PRIMARY&gt; db.test.insert(&#123;&apos;zrdtttttt&apos;:true&#125;)WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)# 从节点验证mongo 10.76.249.129:27017sanhao:SECONDARY&gt; use adminswitched to db adminsanhao:SECONDARY&gt; db.auth(&apos;root&apos;, &apos;abcd123&apos;)sanhao:SECONDARY&gt; rs.slaveOk()sanhao:SECONDARY&gt; show dbsadmin 0.000GBlocal 0.000GBzrd 0.000GBsanhao:SECONDARY&gt; use zrdswitched to db zrdsanhao:SECONDARY&gt; show tables;testsanhao:SECONDARY&gt; db.test.find()&#123; &quot;_id&quot; : ObjectId(&quot;59e70ad42e1529b30c5d9def&quot;), &quot;zrdtttttt&quot; : true &#125; #状态查看 rs.status()replica state复制集状态查看sanhao:SECONDARY&gt; rs.status()&#123; &quot;set&quot; : &quot;sanhao&quot;, &quot;date&quot; : ISODate(&quot;2017-10-18T08:26:02.906Z&quot;), &quot;myState&quot; : 2, &quot;term&quot; : NumberLong(1), &quot;syncingTo&quot; : &quot;192.168.1.52:27017&quot;, &quot;heartbeatIntervalMillis&quot; : NumberLong(2000), # 心跳检查间隔2秒 &quot;optimes&quot; : &#123; &quot;lastCommittedOpTime&quot; : &#123; &quot;ts&quot; : Timestamp(1508315157, 1), &quot;t&quot; : NumberLong(1) &#125;, &quot;appliedOpTime&quot; : &#123; &quot;ts&quot; : Timestamp(1508315157, 1), &quot;t&quot; : NumberLong(1) &#125;, &quot;durableOpTime&quot; : &#123; &quot;ts&quot; : Timestamp(1508315157, 1), &quot;t&quot; : NumberLong(1) &#125; &#125;, &quot;members&quot; : [ &#123; &quot;_id&quot; : 0, &quot;name&quot; : &quot;192.168.1.52:27017&quot;, &quot;health&quot; : 1, &quot;state&quot; : 1, &quot;stateStr&quot; : &quot;PRIMARY&quot;, &quot;uptime&quot; : 1676, &quot;optime&quot; : &#123; &quot;ts&quot; : Timestamp(1508315157, 1), &quot;t&quot; : NumberLong(1) &#125;, &quot;optimeDurable&quot; : &#123; &quot;ts&quot; : Timestamp(1508315157, 1), &quot;t&quot; : NumberLong(1) &#125;, &quot;optimeDate&quot; : ISODate(&quot;2017-10-18T08:25:57Z&quot;), &quot;optimeDurableDate&quot; : ISODate(&quot;2017-10-18T08:25:57Z&quot;), &quot;lastHeartbeat&quot; : ISODate(&quot;2017-10-18T08:26:01.366Z&quot;), &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2017-10-18T08:26:02.647Z&quot;), &quot;pingMs&quot; : NumberLong(0), &quot;electionTime&quot; : Timestamp(1508313496, 1), &quot;electionDate&quot; : ISODate(&quot;2017-10-18T07:58:16Z&quot;), &quot;configVersion&quot; : 1 &#125;, &#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;192.168.1.52:27018&quot;, &quot;health&quot; : 1, &quot;state&quot; : 2, &quot;stateStr&quot; : &quot;SECONDARY&quot;, &quot;uptime&quot; : 1772, &quot;optime&quot; : &#123; &quot;ts&quot; : Timestamp(1508315157, 1), &quot;t&quot; : NumberLong(1) &#125;, &quot;optimeDate&quot; : ISODate(&quot;2017-10-18T08:25:57Z&quot;), &quot;syncingTo&quot; : &quot;192.168.1.52:27017&quot;, &quot;configVersion&quot; : 1, &quot;self&quot; : true &#125; ], &quot;ok&quot; : 1&#125; db.isMaster() rs.printReplicationInfo() 类似binlong默认会大小为5%的磁盘分区容量， 配置文件oplogSizeMB选项指定大小修改oplog大小: https://docs.mongodb.com/manual/tutorial/change-oplog-size/sanhao:SECONDARY&gt; rs.printReplicationInfo()configured oplog size: 1737.5037107467651MBlog length start to end: 2363secs (0.66hrs)oplog first event time: Wed Oct 18 2017 15:58:04 GMT+0800 (CST)oplog last event time: Wed Oct 18 2017 16:37:27 GMT+0800 (CST)now: Wed Oct 18 2017 16:37:36 GMT+0800 (CST) db.serverStatus() 当前实例详细信息db.serverBuildInfo() mongodb编译环境信息mongos路由暂略 优化选项暂略 要点 先关闭SECONDARY节点,再关闭PRIMARY 当复制集群存活的节点小于大多数时,主节点自动降级为SECONDARY","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://zhourudong.cn/tags/mongodb/"}]},{"title":"mysql之连接and参数and用户角色权限篇","date":"2017-09-16T08:13:35.000Z","path":"2017/09/16/50-mysql之连接and参数and用户权限篇/","text":"[TOC] 连接主要登录方式方式一默认是当前登录的系统用户 $USER@localhost[root@mysqlenv_test ~]#mysqlERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO) 方式二 使用socket连接LINUX 系统才有socket连接mysql -S /tmp/mysql.sock -uroot -p 方式三 指定主机名mysql -h 127.0.0.1 -p mysql -h localhost -p # 属于不同的用户,授权时需要指定的host不同 免密码登录主要是修改my.cnf方式一 cat /etc/my.cnf [client]user=\"root\" password=\"123456\" 方式二 #单对定义不同的客户端[mysql] # 这个是给/usr/loca/mysql/bin/mysql 使用的user=rootpassword=\"password\"[mysqladmin] # 给mysqladmin使用user=rootpassword=\"password\"# 用户自己家目录设置#Filename: ~/.my.cnf[client]user=\"root\"password=\"你的密码\" 方式三 使用密文登录mysql,mysqladmin，mysqldump都可以使用# 1. 生成密文[root@mysqlenv_test ~]#mysql_config_editor set -G login_sert_passwd -h localhost -u root -pEnter password: /root/.mylogin.cnf # 默认会在用户的家目录生成.mylogin.cnf隐藏文件# 2.查看所有的密文[root@mysqlenv_test ~]#mysql_config_editor print --all[login_sert_passwd]user = rootpassword = *****host = localhost# 3. 使用密文登录mysql --login-path=login_sert_passwdmysqladmin --login-path=login_sert_passwd statusmysqldump --login-path=login_sert_passwd --opt mysql 参数类型 全局参数: GLOBAL 可修改参数 不可修改参数 会话参数: SESSION 可修改参数 不可修改参数 注意： 用户登录只能在线修改非只读参数,只读参数只能在my.cnf配置文件中预先设置，重启数据库方能生效（例如监听的端口 port,bind等参数） 在线修改的所有参数（GLOBAL或者SESSION）生效周期是当前正在运行的状态数据库，重启后在线修改的配置作用都会丢失，只有修改my.cnf才能永久生效，（例如set GLOBAL slow_query_log =0;） 有些参数即存在于GLOBAL又存在于SESSION， （例如autocommit SET GLOBAL autocommit = 0;, SET SESSION autocommit = 1;） 参数设置参数查看mysql&gt; SHOW GLOBAL VARIABLES ; # 只查看全局的变量参数mysql&gt; SHOW VARIABLES ; # 查看所有的参数 设置GLOBAL或SESSION参数# 全局mysql&gt; SET GLOBAL autocommit = 0;# 会话mysql&gt; SET SESSION autocommit = 1;# 查看mysql&gt; SELECT @@GLOBAL.autocommit;+---------------------+| @@GLOBAL.autocommit |+---------------------+| 0 |+---------------------+mysql&gt; SELECT @@SESSION.autocommit; # 等价于 SELECT @@autocommit;+----------------------+| @@SESSION.autocommit |+----------------------+| 1 |+----------------------+ 权限MySQL校验权限流程Title: MySQL校验权限流程开始 -&gt;&gt; IP和用户名能否访问: 查看mysql.user表 （所有库权限）IP和用户名能否访问 -&gt;&gt; 指定库权限: 查看mysql.db表指定库权限 -&gt;&gt; 指定表权限: 查看mysql.tables_priv表指定表权限 -&gt;&gt;指定列权限: 查看mysql.columns_priv表指定列权限 --&gt;&gt; 开始 : 没有权限 系统表权限信息: a) 用户名和IP是否允许 b) 查看mysql.user表 // 查看全局所有库的权限 c) 查看mysql.db表 // 查看指定库的权限 d) 查看mysql.table_priv表 // 查看指定表的权限 e) 查看mysql.column_priv表 // 查看指定列的权限 所有权限详情 常用权限： SQL语句：SELECT、INSERT、UPDATE、DELETE、INDEX 存储过程：CREATE ROUTINE、ALTER ROUTINE、EXECUTE、TRIGGER 管理权限：SUPER、RELOAD、SHOW DATABASE、SHUTDOWN、 可选资源项，资源限制类型: MAX_QUERIES_PER_HOUR count MAX_UPDATES_PER_HOUR count MAX_CONNECTIONS_PER_HOUR count MAX_USER_CONNECTIONS count 授权当前用户权限mysql&gt; SHOW GRANTS ;+---------------------------------------------------------------------+| Grants for root@localhost |+---------------------------------------------------------------------+| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION || GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION |+---------------------------------------------------------------------+2 rows in set (0.00 sec)mysql&gt; SHOW GRANTS FOR root@'localhost'; 查看详细权限信息user, db , tables_priv ,columns_priv 这些表都是权限相关mysql&gt; SELECT * from user WHERE User='root' AND Host='localhost'\\G*************************** 1. row *************************** Host: localhost User: root Select_priv: Y Insert_priv: Y Update_priv: Y Delete_priv: Y Create_priv: Y Drop_priv: Y Reload_priv: Y Shutdown_priv: Y Process_priv: Y File_priv: Y Grant_priv: Y References_priv: Y Index_priv: Y Alter_priv: Y Show_db_priv: Y Super_priv: Y Create_tmp_table_priv: Y Lock_tables_priv: Y Execute_priv: Y Repl_slave_priv: Y Repl_client_priv: Y Create_view_priv: Y Show_view_priv: Y Create_routine_priv: Y Alter_routine_priv: Y Create_user_priv: Y Event_priv: Y Trigger_priv: YCreate_tablespace_priv: Y ssl_type: ssl_cipher: x509_issuer: x509_subject: max_questions: 0 max_updates: 0 max_connections: 0 max_user_connections: 0 plugin: mysql_native_password authentication_string: *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 password_expired: N password_last_changed: 2017-09-16 15:56:38 password_lifetime: NULL account_locked: N1 row in set (0.02 sec) 操作将被废弃的授权方式mysql&gt; GRANT ALL ON test.* TO tomcat@'127.0.0.1' IDENTIFIED BY '123456';Query OK, 0 rows affected, 1 warning (0.02 sec)mysql&gt; SHOW GRANTS FOR tomcat@'127.0.0.1' ;+----------------------------------------------------------+| Grants for tomcat@127.0.0.1 |+----------------------------------------------------------+| GRANT USAGE ON *.* TO 'tomcat'@'127.0.0.1' || GRANT ALL PRIVILEGES ON `test`.* TO 'tomcat'@'127.0.0.1' |+----------------------------------------------------------+2 rows in set (0.01 sec) 新的授权方式, 先创建用户后授权mysql&gt; CREATE USER 'nginx'@'127.0.0.1' IDENTIFIED BY '123456';Query OK, 0 rows affected (0.01 sec)mysql&gt; GRANT ALL ON sys.* TO 'nginx'@'127.0.0.1';Query OK, 0 rows affected (0.01 sec) 具有再次授权mysql&gt; GRANT ALL ON test.* TO 'apache'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;mysql&gt; SHOW GRANTS FOR 'apache'@'%';+--------------------------------------------------------------------+| Grants for apache@% |+--------------------------------------------------------------------+| GRANT USAGE ON *.* TO 'apache'@'%' || GRANT ALL PRIVILEGES ON `test`.* TO 'apache'@'%' WITH GRANT OPTION |+--------------------------------------------------------------------+2 rows in set (0.00 sec) 回收权限 REVOKE 只收回权限，并不会删除用户 revoke 语法同grant一致, 从grant ... to 变为revoke ... from# 回收SELECT mysql&gt; REVOKE SELECT ON test.* FROM 'apache'@'%';Query OK, 0 rows affected (0.19 sec)# 回收所有权限mysql&gt; REVOKE ALL ON test.* FROM 'apache'@'%';Query OK, 0 rows affected (0.01 sec)mysql&gt; SHOW GRANTS FOR 'apache'@'%';+-----------------------------------------------------------+| Grants for apache@% |+-----------------------------------------------------------+| GRANT USAGE ON *.* TO 'apache'@'%' || GRANT USAGE ON `test`.* TO 'apache'@'%' WITH GRANT OPTION |+-----------------------------------------------------------+ 删除用户mysql&gt; DROP USER 'apache'@'%';Query OK, 0 rows affected (0.04 sec) 角色 角色(Role)可以用来批量管理用户，同一个角色下的用户，拥有相同的权限。MySQL5.7.X以后可以模拟角色(Role)的功能，通过mysql.proxies_priv模拟实现。mysql.proxies_priv在5.5.X和5.6.X的时候就存在，但是无法模拟角色(Role)功能继承关系，方便管理 是否开启权限代理功能 mysql&gt; SHOW VARIABLES LIKE \"%proxy%\";+-----------------------------------+-------+| Variable_name | Value |+-----------------------------------+-------+| check_proxy_users | ON || mysql_native_password_proxy_users | ON || proxy_user | || sha256_password_proxy_users | ON |+-----------------------------------+-------+4 rows in set (0.00 sec) 如果为off 需要修改my.cnf# cat /etc/my.cnf# ... ...### 角色相关参数 ####check_proxy_users = 1mysql_native_password_proxy_users = 1sha256_password_proxy_users = 1 操作# 创建用户mysql&gt; CREATE USER 'web'@'127.0.0.1' IDENTIFIED BY '123456';mysql&gt; CREATE USER 'tomcat'@'127.%';mysql&gt; CREATE USER 'nginx'@'127.%';# 权限映射, 将'web'@'127.0.0.1' 所有的权限映射给 nginx，tomcat用户mysql&gt; GRANT PROXY ON 'web'@'127.0.0.1' TO 'tomcat'@'127.%','nginx'@'127.%';Query OK, 0 rows affected (0.03 sec)# 授权mysql&gt; GRANT SELECT ON *.* TO 'web'@'127.0.0.1';Query OK, 0 rows affected (0.03 sec)# 查看权限mysql&gt; SHOW GRANTS FOR 'web'@'127.0.0.1';+------------------------------------------+| Grants for web@127.0.0.1 |+------------------------------------------+| GRANT SELECT ON *.* TO 'web'@'127.0.0.1' |+------------------------------------------+1 row in set (0.00 sec)# 虽然nginx用户没有select权限，但是使用了代理模式，nginx用户将继承到了web用户的select权限mysql&gt; SHOW GRANTS FOR 'nginx'@'127.%';+-----------------------------------------------------+| Grants for nginx@127.% |+-----------------------------------------------------+| GRANT USAGE ON *.* TO 'nginx'@'127.%' || GRANT PROXY ON 'web'@'127.0.0.1' TO 'nginx'@'127.%' |+-----------------------------------------------------+2 rows in set (0.00 sec)# 验证nginx用户是否有权限mysql&gt; SELECT USER();+-----------------+| USER() |+-----------------+| nginx@localhost |+-----------------+1 row in set (0.00 sec)# 可以顺利执行mysql&gt; SELECT * FROM user;","tags":[{"name":"mysql","slug":"mysql","permalink":"http://zhourudong.cn/tags/mysql/"}]},{"title":"mysql之安装升级篇","date":"2017-09-16T06:59:21.000Z","path":"2017/09/16/49-mysql之安装升级篇/","text":"[TOC] mysql 国内镜像http://mirrors.ustc.edu.cn/mysql-ftp/Downloads/https://dev.mysql.com/downloads/mysql/5.6.html#downloads# 下载完成后进行MD5校验和mysql官网进行对比,检查软件包是否被修改$ md5sum mysql-5.6.37-linux-glibc2.12-x86_64.tar.gz 16be12598f7e4dcedb91b79b133fdbfc mysql-5.6.37-linux-glibc2.12-x86_64.tar.gzhttp://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz$md5sum mysql-5.7.19-linux-glibc2.12-x86_64.tar.gzdbe7e5e820377c29d8681005065e5728 mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz 版本选择 略 MySQL官方页面https://dev.mysql.com DEVELOPER ZONE: 开发者模块 Forums Bugs Worklog:开发记录 Labs：实验性项目 Planet MySQL News and Events Community DOWNLOADS:下载 MySQL Community Server (GPL): MySQL server 下载 MySQL Cluster (GPL) MySQL Utilities (GPL)：有用的工具包集合 MySQL Workbench (GPL)：图形管理界面 DOCUMENTATION：官方文档 PDF (US Ltr) - 38.0Mb PDF (A4) - 38.0Mb PDF (RPM) - 37.3Mb HTML Download (TGZ) - 10.3Mb HTML Download (Zip) - 10.3Mb Man Pages (TGZ) - 216.7Kb Man Pages (Zip) - 329.5Kb Info (Gzip) - 3.4Mb Info (Zip) - 3.4Mb 安装安装前CentOs 删除默认安装的mariadbcentos7$ rpm -qa | grep mariadbmariadb-libs-5.5.52-1.el7.x86_64$ sudo yum remove mariadb-libs# 安装依赖软件$ yum install libaio perl autoconf 5.6.x安装https://dev.mysql.com/doc/refman/5.6/en/binary-installation.html[root@mysqlenv_test ~]# mv mysql-5.6.37-linux-glibc2.12-x86_64.tar.gz /usr/local/shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql -s /bin/false mysqlshell&gt; cd /usr/localshell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gzshell&gt; ln -s full-path-to-mysql-VERSION-OS mysqlshell&gt; cd mysqlshell&gt; chown -R mysql .shell&gt; chgrp -R mysql .shell&gt; scripts/mysql_install_db --user=mysqlshell&gt; chown -R root .shell&gt; chown -R mysql datashell&gt; bin/mysqld_safe --user=mysql &amp;# Next command is optionalshell&gt; cp support-files/mysql.server /etc/init.d/mysql.servershell&gt; echo 'export PATH=/usr/local/mysql/bin:$PATH' &gt; /etc/profile.d/mysql.sh &amp;&amp; cat /etc/profile.d/mysql.sh 5.7.x安装官方安装文档https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html[root@mysqlenv_test ~]# mv mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz /usr/local/shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql -s /bin/false mysqlshell&gt; cd /usr/localshell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gzshell&gt; ln -s full-path-to-mysql-VERSION-OS mysqlshell&gt; cd mysqlshell&gt; mkdir mysql-filesshell&gt; chmod 750 mysql-filesshell&gt; chown -R mysql .shell&gt; chgrp -R mysql .shell&gt; bin/mysql_install_db --user=mysql # MySQL 5.7.5shell&gt; bin/mysqld --initialize --user=mysql # MySQL 5.7.6 and upshell&gt; bin/mysql_ssl_rsa_setup # MySQL 5.7.6 and upshell&gt; chown -R root .shell&gt; chown -R mysql data mysql-filesshell&gt; bin/mysqld_safe --user=mysql &amp;# Next command is optionalshell&gt; cp support-files/mysql.server /etc/init.d/mysql.server shell&gt; echo 'export PATH=/usr/local/mysql/bin:$PATH' &gt; /etc/profile.d/mysql.sh &amp;&amp; cat /etc/profile.d/mysql.sh 验证是否安装成功 指定的datadir是否为空 查看datadir中的$HOSTNAME.err内容， 5.7会生成临时的密码到error日志中，登录MySQL后及时修改密码set password = (&quot;new_password&quot;); 启动 bin/mysqld_safe --user=mysql直接启动， mysqld_safe守护进程防止mysqld意外停止，当mysqld意外停止时mysqld_safe会重启mysqld进程 使用/etc/init.d/mysql.server start进行启动（注意脚本的名字） 配置文件# cat /etc/my.cnf [client][mysqld]########basic settings########server-id = 1 port = 3306user = mysql# bind_address = 127.0.0.1 #根据实际情况修改# autocommit = 0 #5.6.X安装时，需要注释掉，安装完成后再打开character_set_server=utf8 # 或者 utf8mb4# skip_name_resolve = 1max_connections = 800max_connect_errors = 1000datadir = /data/mysql_data #根据实际情况修改,建议和程序分离存放transaction_isolation = READ-COMMITTEDexplicit_defaults_for_timestamp = 1join_buffer_size = 134217728tmp_table_size = 67108864tmpdir = /tmpmax_allowed_packet = 16777216sql_mode = \"STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER\"interactive_timeout = 1800wait_timeout = 1800read_buffer_size = 16777216read_rnd_buffer_size = 33554432sort_buffer_size = 33554432########log settings########log_error = error.logslow_query_log = 1slow_query_log_file = slow.loglog_queries_not_using_indexes = 1log_slow_admin_statements = 1log_slow_slave_statements = 1log_throttle_queries_not_using_indexes = 10expire_logs_days = 90long_query_time = 2min_examined_row_limit = 100########replication settings########master_info_repository = TABLErelay_log_info_repository = TABLElog_bin = bin.logsync_binlog = 1gtid_mode = onenforce_gtid_consistency = 1log_slave_updatesbinlog_format = row relay_log = relay.logrelay_log_recovery = 1binlog_gtid_simple_recovery = 1slave_skip_errors = ddl_exist_errors########innodb settings########innodb_page_size = 8192innodb_buffer_pool_size = 1G #根据实际情况修改innodb_buffer_pool_instances = 8innodb_buffer_pool_load_at_startup = 1innodb_buffer_pool_dump_at_shutdown = 1innodb_lru_scan_depth = 2000innodb_lock_wait_timeout = 5innodb_io_capacity = 4000innodb_io_capacity_max = 8000innodb_flush_method = O_DIRECTinnodb_file_format = Barracudainnodb_file_format_max = Barracudainnodb_log_group_home_dir = /redolog/ #根据实际情况修改innodb_undo_directory = /undolog/ #根据实际情况修改innodb_undo_logs = 128innodb_undo_tablespaces = 3innodb_flush_neighbors = 1innodb_log_file_size = 1G #根据实际情况修改innodb_log_buffer_size = 16777216innodb_purge_threads = 4 #根据实际情况修改innodb_large_prefix = 1innodb_thread_concurrency = 64innodb_print_all_deadlocks = 1innodb_strict_mode = 1innodb_sort_buffer_size = 67108864 ########semi sync replication settings########plugin_dir=/usr/local/mysql/lib/plugin #根据实际情况修改plugin_load = \"rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so\"loose_rpl_semi_sync_master_enabled = 1loose_rpl_semi_sync_slave_enabled = 1loose_rpl_semi_sync_master_timeout = 5000[mysqld-5.7]innodb_buffer_pool_dump_pct = 40innodb_page_cleaners = 4innodb_undo_log_truncate = 1innodb_max_undo_log_size = 2Ginnodb_purge_rseg_truncate_frequency = 128binlog_gtid_simple_recovery=1log_timestamps=systemtransaction_write_set_extraction=MURMUR32show_compatibility_56=on 关注重要的参数 innodb_log_file_size = 2G 生产环境按实际情况修改 innodb_undo_logs = 128 和 innodb_undo_tablespaces = 3 安装之前先确定好，安装后不好修改 [mysqld]，[mysqld-5.7]:[mysqld]配置在所有MySQL版本全部生效，[mysqld-5.7]只在MySQL5.7.X版本下才生效 autocommit,这个参数在5.5.X以后才有，安装5.6.X前先把该参数注释掉，等安装完成后，再行打开, 5.7.X无需预先注释 datadir, innodb_log_group_home_dir, innodb_undo_directory一定要注意目录权限是 mysql:mysql my.cnf关注点 mysqld --help -vv | grep my.cnf查看配置文件的读取顺序，如果有相同的配置，最后读取的文件配置项生效 使用--defaults-files可指定配置文件 升级 说明通常情况下使用MySQLLinux - Generic通用的二进制包进行安装，my.cnf中datadir指定数据目录;数据目录和程序目录分开后，对后续升级操作很方便 例子 应用程序目录5.6应用程序所在目录: /usr/local/mysql-5.6.37-linux-glibc2.12-x86_645.7应用撤销所在目录: /usr/local/mysql-5.7.19-linux-glibc2.12-x86_64 数据目录/data/mysql_data/ 环境[root@mysqlenv_test /usr/local]#ls -l | grep mysqllrwxrwxrwx 1 root root 35 Sep 16 15:20 mysql -&gt; mysql-5.6.37-linux-glibc2.12-x86_64 # 当前软链接指向为5.6的版本drwxr-xr-x 13 mysql mysql 223 Sep 16 14:06 mysql-5.6.37-linux-glibc2.12-x86_64drwxr-xr-x 10 root mysql 148 Sep 16 13:25 mysql-5.7.19-linux-glibc2.12-x86_64[root@mysqlenv_test ~]#ls -l /data/mysql_data/total 13576-rw-rw---- 1 mysql mysql 56 Sep 16 15:22 auto.cnf-rw-rw---- 1 mysql mysql 65423 Sep 16 15:21 bin.000001-rw-rw---- 1 mysql mysql 1199276 Sep 16 15:21 bin.000002-rw-rw---- 1 mysql mysql 369 Sep 16 15:29 bin.000003-rw-rw---- 1 mysql mysql 356 Sep 16 15:35 bin.000004-rw-rw---- 1 mysql mysql 52 Sep 16 15:30 bin.indexdrwx------ 2 mysql mysql 20 Sep 16 15:31 db56-rw-rw---- 1 mysql mysql 19134 Sep 16 15:35 error.log-rw-rw---- 1 mysql mysql 865 Sep 16 15:35 ib_buffer_pool-rw-rw---- 1 mysql mysql 12582912 Sep 16 15:35 ibdata1drwx------ 2 mysql mysql 4096 Sep 16 15:21 mysqldrwx------ 2 mysql mysql 4096 Sep 16 15:21 performance_schema-rw-rw---- 1 mysql mysql 350 Sep 16 15:30 slow.logdrwx------ 2 mysql mysql 6 Sep 16 15:21 testDatabase changedmysql&gt; SELECT VERSION ();+------------+| VERSION () |+------------+| 5.6.37-log |+------------+1 row in set (0.00 sec)mysql&gt; CREATE DATABASE db56;Query OK, 1 row affected (0.02 sec)mysql&gt; SHOW DATABASES;+--------------------+| Database |+--------------------+| information_schema || db56 || mysql || performance_schema || test |+--------------------+5 rows in set (0.00 sec) 升级操作应该在slave先进行测试# 1. 必须安全停止数据库[root@mysqlenv_test ~]#/etc/init.d/56mysql.server stopShutting down MySQL.. SUCCESS! # 2. 使用新的版本[root@mysqlenv_test ~]#cd /usr/local/[root@mysqlenv_test /usr/local]#unlink mysql[root@mysqlenv_test /usr/local]#ln -sv mysql-5.7.19-linux-glibc2.12-x86_64 mysql‘mysql’ -&gt; ‘mysql-5.7.19-linux-glibc2.12-x86_64’ # MySQL的应用程序版本已经升级完成 #都不需要做任何的改变，即可将当前系统的mysql版本升级完成 #注意：此时只是应用程序升级完成，系统表仍然还是5.6的版本# 3.修改目录权限[root@mysqlenv_test /usr/local]#cd /usr/local/mysql[root@mysqlenv_test /usr/local/mysql]# chown root:mysql -R . # 4.启动[root@mysqlenv_test /usr/local]#/etc/init.d/mysql.server startStarting MySQL....... SUCCESS! # 此时error.log中有很多[ERROR] 日志或者警告日志 # 需要进行upgrade更新系统表元数据才不会产生警告# 5.升级元数据[root@mysqlenv_test /usr/local]#mysql_upgrade -p -s Enter password: The --upgrade-system-tables option was used, databases won't be touched.Checking if update is needed.Checking server version.Running queries to upgrade MySQL server.Upgrading the sys schema.Upgrade process completed successfully.Checking if update is needed. # 参数 -s 一定要加,表示只更新系统表，-s: upgrade-system-tables # 如果不加-s,则会把所有库的表以5.7.x的方式重建，会非常的耗时 # 因为数据库二进制文件是兼容的，无需升级# 6. 验证mysql&gt; SELECT VERSION();+------------+| VERSION() |+------------+| 5.7.19-log |+------------+1 row in set (0.00 sec)mysql&gt; SHOW DATABASES;+--------------------+| Database |+--------------------+| information_schema || db56 || mysql || performance_schema || sys | # sys是5.7新加的库| test | # test在5.7以后已弃用，从5.6升级所以保留+--------------------+6 rows in set (0.00 sec) 注意能否顺利升级datadir是关键，datadir最好是和程序目录进行分离","tags":[{"name":"mysql","slug":"mysql","permalink":"http://zhourudong.cn/tags/mysql/"}]},{"title":"django架构","date":"2017-09-13T09:31:19.000Z","path":"2017/09/13/48-django架构/","text":"项目结构:gazette/ __init__.py models.py views.py static/ ... templates/ gazette/ __base.html __l_single_col.html __l_right_sidebar.html __l_left_sidebar.html _article_full.html _article_summary.html _author_list.html _author_name.html _category_list.html _navigation.html _tag_list.html article_detail.html article_list.html author_list.html category_list.html tag_list.html","tags":[{"name":"django","slug":"django","permalink":"http://zhourudong.cn/tags/django/"}]},{"title":"django官方文档快捷链接","date":"2017-09-13T09:18:51.000Z","path":"2017/09/13/47-django官方文档快捷链接/","text":"官方快捷链接 django http Django如何处理一个http请求404，403，500错误Including other URLconfs语法Reverse resolution of URLs 反向解析URL namespaces命名空间A simple viewReturning errors返回错误Customizing error views自定义错误页面View decorators views装饰器File Uploads 文件上传 Django shortcut functions django内置快简函数Middleware 中间件How to use sessionsWorking with formsRendering fields manuallyFormsetsCreating forms from modelsOverriding the default fields 重写form字段 自定义、错误信息、样式 Changing the queryset 修改modelform中的querysetChanging the form modelform 中的cleanSaving objects in the formsetUsing a model formset in a viewForm Assets (the Media class)Templates¶ Class-based views¶ Introduction to class-based views Built-in class-based generic views Form handling with class-based views Using mixins with class-based views Using class-based views¶Using mixinsHandling forms with class-based viewsDecorating the class cbv装饰器Built-in class-based generic views 内置通用CBVGeneric views of objectsAdding extra contextViewing subsets of objects 设定querysetDynamic filtering 动态过滤Performing extra work 动态更新一些信息Form handling with class-based viewsBasic formsNotes: FormView inherits TemplateResponseMixin so template_name can be used here. The default implementation for form_valid() simply redirects to the success_url. Model forms views + form = formview You don’t even need to provide a success_url for CreateView or UpdateView - they will use get_absolute_url() on the model object if available. Models and request.user 额外添加数据AJAX exampleUsing mixins with class-based viewsFor this reason, Django also provides a number of mixins that provide more discrete functionality. Template rendering, for instance, is encapsulated in the TemplateResponseMixin. The Django reference documentation contains full documentation of all the mixins. Using SingleObjectMixin with View Using SingleObjectMixin with ListViewUsing FormMixin with DetailViewMore than just HTML","tags":[{"name":"django","slug":"django","permalink":"http://zhourudong.cn/tags/django/"}]},{"title":"django 用户模型翻译","date":"2017-09-08T07:06:35.000Z","path":"2017/09/08/46-django-用户模型翻译/","text":"django用户认证django默认提供用户认证系统，它提供用户账号，组，权限，cookie，用户session等功能，此文档解释了django如何实现这些功能,此外也介绍如何在项目中自定义用户认证系统 extend and customize 概述django处理用户验证和授权.简而言之，身份验证如何证明我是我，授权是用户有什么权限。 认证系统包括： 用户 权限: (yes/no)标志，指定用户是否可通过检查，可以执行某些操作 组: 组和app关联，用户添加到组中，交集判断用户是否有权限 密码加密系统(hashing) Forms view logging user 用户表单,视图，限制返回内容等 可插拔后台系统 django认证系统是通用系统,不提供web认证系统一些特点，已有第三app已实现 Password strength checking 密码强度检查 Throttling of login attempts 登录尝试 Authentication against third-parties (OAuth, for example) 第三方认证系统 安装启用用户权限功能需要在以下安装组件提供相对应的功能django.contrib.auth，默认以安装django-admin startproject启动的时候，已将这些功能安装在INSTALLED_APPS设定中 &#39;django.contrib.auth&#39; 包含核心认证框架，以及默认的model &#39;django.contrib.contenttypes&#39; 创建权限和user model关联中间件设定MIDDLEWARE : SessionMiddleware manages sessions across requests. AuthenticationMiddleware associates users with requests using sessions. Usagedjango默认已经实现 Working with User objects Permissions and authorization Authentication in web requests Managing users in the admin API reference for the default implementation Customizing Users and authentication Password management in Django Using the Django authentication system¶本文档适用于配置了django默认的认证系统,适用于很多常见的用户验证项目，权限和密码权限等需求。亦可进行自行扩展 extension and customization认证系统. django提供了认证和授权,一般称为认证系统,功能有些耦合 User objects¶User用户对象时身份验证系统的核心。 用户有自身的基本属性(个人详情信息)，通过这些属性信息集合django认证的框架，以达到管理和普通用户不同类的对象 主要有以下属性: username password email first_name last_name See the full API documentation for full reference, the documentation that follows is more task oriented. Creating users¶The most direct way to create users is to use the included create_user() helper function 直接创建用户的函数: &gt;&gt;&gt; from django.contrib.auth.models import User&gt;&gt;&gt; user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')# At this point, user is a User object that has already been saved# to the database. You can continue to change its attributes# if you want to change other fields. 修改字段需要手动提交保存&gt;&gt;&gt; user.last_name = 'Lennon'&gt;&gt;&gt; user.save() 另一种创建用户的方法。If you have the Django admin installed, you can also create users interactively. Creating superusers¶创建管理员命令 createsuperuser : $ python manage.py createsuperuser --username=joe --email=joe@example.com 输入以上命令后 --username or --email 会有输入密码的请求. Changing passwords¶Django不是以明文存储密码 (clear text)在user model中, 而是hash (see documentation of how passwords are managed因此，不要试图直接操纵用户的密码属性。这就是创建用户时使用辅助函数的原因. 要更改用户的密码，您有几个选项: manage.py changepassword *username* 提供一种从命令行更改用户密码的方法。它提示您更改给定用户的密码，您必须输入两次密码。如果两者都匹配，则新密码将立即更改。如果不提供用户，则命令将尝试更改用户名与当前登录的系统用户相匹配的密码（当前登录到此系统的用户） 另一种修改密码的方式 set_password(): &gt;&gt;&gt; from django.contrib.auth.models import User&gt;&gt;&gt; u = User.objects.get(username='john')&gt;&gt;&gt; u.set_password('new password')&gt;&gt;&gt; u.save() 如果启用了admin后台也可以修改所有用户的密码authentication system’s admin pages. Django也提供 views and forms 修改用户的密码 修改用户密码后期session信息会失效. 详情查看 Session invalidation on password change . Authenticating users¶ authenticate(request=None, *\\credentials*)[source]¶ 使用authenticate() 作为验证凭证. 将, username 和password 以关键字传入函数进行验证, 后台会进行检查 authentication backend, 返回一个 User 对象如果通过检查. 如果验证不通过则抛出异常 PermissionDenied, 返回值为 None. For example: from django.contrib.auth import authenticateuser = authenticate(username='john', password='secret')if user is not None: # A backend authenticated the credentialselse: # No backend authenticated the credentials request是一个HttpRequest 生成的对象, 这是通过 authenticate() 后端方法认证 Changed in Django 1.11: The optional request argument was added. Permissions and Authorization¶Django有一个简单的权限系统。它提供了一种将权限分配给特定用户和用户组的方法。 它是由Django管理后台站点中使用，你也可以用于自己的代码中。 Django管理后台站点使用权限如下： 总的来说有三个权限add, change,delete Access to view the “add” form and add an object is limited to users with the “add” permission for that type of object. Access to view the change list, view the “change” form and change an object is limited to users with the “change” permission for that type of object. Access to delete an object is limited to users with the “delete” permission for that type of object. 权限不仅可以设置每个对象类型，而且可以设置每个特定对象实例。通过使用has_add_permission(), has_change_permission() and has_delete_permission() 所提供的方法 ModelAdmin 类, 可以为同一类型的不同对象实例定制权限。 User 对象有两个多对多字段: groups 和user_permissions. User 对象可以以与其他方法相同的方式访问它们的相关对象 Django model: myuser.groups.set([group_list])myuser.groups.add(group, group, ...)myuser.groups.remove(group, group, ...)myuser.groups.clear()myuser.user_permissions.set([permission_list])myuser.user_permissions.add(permission, permission, ...)myuser.user_permissions.remove(permission, permission, ...)myuser.user_permissions.clear() Default permissions¶当django.contrib.auth设定于 INSTALLED_APPS setting中, 它将会三个默认权限 – add, change and delete– 是在你安装的应用程序定义的每个Django模型默认创建. 这些权限将在运行时创建 manage.py migrate; 第一次运行 migrate 在加入django.contrib.auth 到INSTALLED_APPS, 将为所有以前安装的模型创建默认权限,以及当时安装的任何新model. 然后, 每次运行时，它将为新模型创建默认权限 manage.py migrate (创建权限的函数连接到post_migrate 信号). 假设您有一个带有 app_label foo 和model名为 Bar, 要测试基本权限，您应该使用: add: user.has_perm(&#39;foo.add_bar&#39;) change: user.has_perm(&#39;foo.change_bar&#39;) delete: user.has_perm(&#39;foo.delete_bar&#39;) The Permission 很少直接访问模型 Groups¶django.contrib.auth.models.Group models是对用户进行分类的通用方法，因此您可以应用权限, 或其他标签,哪些用户. 一个用户可以属于一个或多个组. 组中的用户自动拥有授予该组的权限. For example, 如果组 Site editors 有权限 can_edit_home_page, 该组中的任何用户都将获得该权限. Beyond permissions, 组是一种方便的方法来分类用户给他们一些标签, 或扩展功能. For example, 你可以创建一个组 &#39;Special users&#39;, and you could write code that could, say, give them access to a members-only portion of your site, or send them members-only email messages （组内成员操作）. Programmatically creating permissions¶当custom permissions 可以在模型中定义 Meta 类, 您还可以直接创建权限. For example, you can create the can_publish permission for a BlogPost model in myapp: from myapp.models import BlogPostfrom django.contrib.auth.models import Permissionfrom django.contrib.contenttypes.models import ContentTypecontent_type = ContentType.objects.get_for_model(BlogPost)permission = Permission.objects.create( codename='can_publish', name='Can Publish Posts', content_type=content_type,) 然后可以将权限分配给 User 通过其 user_permissions 属性或 Group 通过其 permissions属性. Permission caching¶The ModelBackend 在第一次为权限检查获取用户对象时，对其进行缓存. 对于请求响应周期来说，这通常是很好的，因为在添加权限后，通常不会立即检查权限（例如，在admin后台中）。如果您正在添加权限并立即检查它们, 例如，在测试或视图中, 最简单的解决方案是从数据库中重新获取用户. For example: from django.contrib.auth.models import Permission, Userfrom django.contrib.contenttypes.models import ContentTypefrom django.shortcuts import get_object_or_404from myapp.models import BlogPostdef user_gains_perms(request, user_id): user = get_object_or_404(User, pk=user_id) # any permission check will cache the current set of permissions user.has_perm('myapp.change_blogpost') content_type = ContentType.objects.get_for_model(BlogPost) permission = Permission.objects.get( codename='change_blogpost', content_type=content_type, ) user.user_permissions.add(permission) # Checking the cached permission set user.has_perm('myapp.change_blogpost') # False # Request new instance of User # Be aware that user.refresh_from_db() won't clear the cache. user = get_object_or_404(User, pk=user_id) # Permission cache is repopulated from the database user.has_perm('myapp.change_blogpost') # True ... Authentication in Web requests¶Django 使用sessions 中间件将认证系统接入 request objects. 这提供一个 request.user表示当前用户的每个请求的属性.如果当前用户没有登录，则该属性将被设置为AnonymousUser, otherwise it will be an instance of User. 你可以把它们区分开来 is_authenticated, 像这样: if request.user.is_authenticated: # Do something for authenticated users. ...else: # Do something for anonymous users. ... How to log a user in¶如果您有一个经过身份验证的用户要附加到当前会话-这是用 login() 函数. login(request, user, backend=None)[source]¶ 从视图中记录一个用户已登录, 使用 login(). 它需要一个 HttpRequest 对象和一个 User 对象. login() 将用户ID保存在会话中, using Django’s session framework.注意，匿名会话中的任何数据集都保留在用户登录后的会话中.这个示例演示了如何使用这两种方法authenticate() 和login(): from django.contrib.auth import authenticate, logindef my_view(request): username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) # Redirect to a success page. ... else: # Return an 'invalid login' error message. ... Changed in Django 1.10: 在旧版本中，当您手动记录用户时，您必须*成功地验证用户authenticate()在调用前 login(). 现在您可以使用新的后端设置 backend 参数. Selecting the authentication backend¶当用户登录时，用户ID和用于身份验证的后端保存在用户会话中。这允许相同的authentication backend 在将来的请求中获取用户的详细信息. 在会话中保存的身份验证后端选择如下: 使用可选项 backend 参数, 如果已设定. Use the value of the user.backend attribute, 这是目前. 这允许配对authenticate() 和login():authenticate() 集the user.backend attribute on the user object it returns. Use the backend in AUTHENTICATION_BACKENDS, if there is only one. Otherwise, raise an exception. In cases 1 and 2, the value of the backend argument or the user.backend attribute should be a dotted import path string (like that found in AUTHENTICATION_BACKENDS), not the actual backend class. How to log a user out¶ logout(request)[source]¶ 注销已登录用户 django.contrib.auth.login(), 使用django.contrib.auth.logout() within your view. 它需要一个 HttpRequest object and has no return value. Example: from django.contrib.auth import logoutdef logout_view(request): logout(request) # Redirect to a success page. Note that logout() 如果用户没有登录不会抛出任何的异常. 当你调用 logout(), 当前请求的会话数据已完全清除。所有现有数据都已删除. 这是为了防止另一个人使用同一个Web浏览器登录并访问以前用户的会话数据. 如果您希望在登录后立即向用户可用的会话中放入任何内容, do that after calling django.contrib.auth.logout(). Limiting access to logged-in users¶The raw way¶限制页面访问的简单、原始方法是检查 request.user.is_authenticated 或者重定向到登录页面: from django.conf import settingsfrom django.shortcuts import redirectdef my_view(request): if not request.user.is_authenticated: return redirect('%s?next=%s' % (settings.LOGIN_URL, request.path)) # ... …or display an error message:from django.shortcuts import renderdef my_view(request): if not request.user.is_authenticated: return render(request, 'myapp/login_error.html') # ...","tags":[{"name":"django","slug":"django","permalink":"http://zhourudong.cn/tags/django/"}]},{"title":"gitlab维护","date":"2017-08-24T09:46:30.000Z","path":"2017/08/24/45-gitlab维护/","text":"缺省安装后的一些重要信息 程序目录在：/opt/gitlab 文件数据在：/var/opt/gitlab git repo目录在：/var/opt/gitlab/git-data 上传图片目录在：/var/opt/gitlab/uploads 大文件、二进制文件目录在: /var/opt/gitlab/gitlab-rails/shared/lfs-objects 备份文件目录在: /var/opt/gitlab/backups 使用的本地模式运行的postgresql数据，会随gitlab启动时候自动运行,socket模式没有监听端口 默认生成的配置文件位置: /var/opt/gitlab/gitlab-rails/etc 使用本地运行的redis服务，会随gitlab启动时候自动运行socket 缺省利用本地邮件，自动投递给其他服务器，如果是非互联网ip，可以修改为本地smtp方式 修改ssh服务的git账号入口，git账号的登录shell处理为gitlab-shell 自带nginx，缺省会在所有ip地址的80端口监听请求，请求会转发给ruby进程 管理# 所有组件状态sudo gitlab-ctl status# 启动所有 gitlab 组件：sudo gitlab-ctl start# 停止所有 gitlab 组件：sudo gitlab-ctl stop# 重启所有 gitlab 组件：sudo gitlab-ctl restart# 更新配置并重启sudo gitlab-ctl reconfigure# 看日志sudo gitlab-ctl tail 查看版本信息gitlab-rake gitlab:env:info RAILS_ENV=productionSystem informationSystem: CentOS 6.5Current User: gitUsing RVM: noRuby Version: 2.3.3p222Gem Version: 2.6.6Bundler Version:1.13.7Rake Version: 10.5.0Redis Version: 3.2.5Git Version: 2.13.4Sidekiq Version:5.0.0Go Version: unknownGitLab informationVersion: 9.4.5Revision: 140292eDirectory: /opt/gitlab/embedded/service/gitlab-railsDB Adapter: postgresqlURL: http://gitlab.sh.45.comHTTP Clone URL: http://gitlab.sh.45.com/some-group/some-project.gitSSH Clone URL: git@gitlab.sh.45.com:some-group/some-project.gitUsing LDAP: noUsing Omniauth: noGitLab ShellVersion: 5.3.1Repository storage paths:- default: /var/opt/gitlab/git-data/repositoriesHooks: /opt/gitlab/embedded/service/gitlab-shell/hooksGit: /opt/gitlab/embedded/bin/git 数据库同步所有历史信息gitlab-rake db:migrate:status RAILS_ENV=production database: gitlabhq_production Status Migration ID Migration Name-------------------------------------------------- up 20121220064453 Init schema ... ... ... up 20170724214302 Add lower path index to redirect routes up 20170725145659 Add binary to merge request diff files 汉化确认GitLab版本cat /opt/gitlab/embedded/service/gitlab-rails/VERSION 克隆代码mkdir -p /opt/gitlab-zh cd /opt/gitlab-zhyum -y install git# 整个仓库300多M# git clone https://gitlab.com/xhang/gitlab.gitcd /opt/gitlab-zhscp zhourudong@192.168.1.51:/tmp/gitpkg/gitlab_hanhua.tar.gz .tar xf gitlab_hanhua.tar.gz &amp;&amp; rm -f gitlab_hanhua.tar.gz &amp;&amp; cd gitlabgit pull 比较汉化分支和原分支导出文件git diff origin/9-4-stable 9-4-stable-zh &gt; /opt/gitlab-zh/9.4.diff 补丁cd /opt/gitlab-zhyum -y install patch#停止gitlabgitlab-ctl stoppatch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; /opt/gitlab-zh/9.4.diff#启动gitlabgitlab-ctl restart 备份恢复https://docs.gitlab.com/ce/raketasks/backup_restore.html 备份# 定时备份0 1 * * * /usr/bin/gitlab-rake gitlab:backup:create /etc/gitlab/gitlab.rbgitlab_rails[&apos;backup_keep_time&apos;] = 604800 # 一周, 默认为0 恢复首先进入备份 gitlab 的目录,这个目录是配置文件中的gitlab_rails[‘backup_path’]，默认为/var/opt/gitlab/backups.然后停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。sudo gitlab-ctl stop unicorn# ok: down: unicorn: 0s, normally upsudo gitlab-ctl stop sidekiq# ok: down: sidekiq: 0s, normally up 查看备份文件时间戳, 1502957534_2017_08_17_9.4.5为备份文件的时间戳# 恢复ls /var/opt/gitlab/backups# 1503395474_2017_08_22_9.4.5_gitlab_backup.targitlab-rake gitlab:backup:restore BACKUP=1502957534_2017_08_17_9.4.5 数据迁移首先需要暂停服务，避免用户在迁移期间读写数据：gitlab-ctl stoprsync -av /var/opt/gitlab/git-data/repositories /path/to/git-data/sudo gitlab-ctl startsudo gitlab-ctl reconfigure pgsql修改# 极少情况下需要修改(修改最大权限示例)vim /var/opt/gitlab/postgresql/data/postgresql.conflisten_addresses = '*' # 默认只开放本地socket方式连接# 极少情况下需要修改(修改最大权限示例)vim /var/opt/gitlab/postgresql/data/pg_hba.conf host all all 192.168.1.203/32 trust 清缓存# 清空redis缓存gitlab-rake cache:clear RAILS_ENV=productiongitlab-rake cache:clear 大型文件、二进制文件对象相关https://docs.gitlab.com/ce/workflow/lfs/manage_large_binaries_with_git_lfs.html https://docs.gitlab.com/ce/workflow/lfs/lfs_administration.html Gitaly RPC调用配置存储服务等配置 默认情况下开启https://docs.gitlab.com/ce/administration/gitaly/index.html/etc/default/gitlab 添加 gitaly_enabled=false，重载配置生效 监控白名单/etc/gitlab/gitlab.rb谁能访问gitlab_rails[&apos;monitoring_whitelist&apos;] = [&apos;127.0.0.0/8&apos;, &apos;192.168.0.1&apos;] Admin area ➔ Monitoring ➔ Health check (admin/health_check) https://gitlab.example.com/-/readiness?token=ACCESS_TOKEN Prometheus 监控默认开启监听地址为localhost /etc/gitlab/gitlab.rb 修改配置文件禁用此服务 prometheus_monitoring['enable'] = falseprometheus['listen_address'] = 'localhost:9090'# gitlab-ctl reconfigure https://docs.gitlab.com/ce/administration/monitoring/prometheus/index.html 设置redis session过期rcli() &#123; # This example works for Omnibus installations of GitLab 7.3 or newer. For an # installation from source you will have to change the socket path and the # path to redis-cli. sudo /opt/gitlab/embedded/bin/redis-cli -s /var/opt/gitlab/redis/redis.socket &quot;$@&quot;&#125;# test the new shell function; the response should be PONGrcli ping # Tell Redis to expire each matched key after 600 seconds.rcli keys &apos;*&apos; | grep &apos;^[a-f0-9]\\&#123;32\\&#125;$&apos; | awk &apos;&#123; print &quot;expire&quot;, $0, 600 &#125;&apos; | rcli# This will print &apos;(integer) 1&apos; for each key that gets expired. CHECK当前配置是否有问题sudo gitlab-rake gitlab:check 检查git仓库 # dangling commit 检查是否有悬空的提交gitlab-rake gitlab:repo:check# 检查用户是否有问题，相对于某个仓库,默认所有gitlab-rake gitlab:user:check_repos[root] https://docs.gitlab.com/ce/administration/raketasks/ldap.html#check https://docs.gitlab.com/ce/administration/repository_checks.html、 Performance Housekeeping: Keep your Git repository tidy and fast. Operations: Keeping GitLab up and running. Polling: Configure how often the GitLab UI polls for updates. Request Profiling: Get a detailed profile on slow requests. Performance Bar: Get performance information for the current page 存储路径配置https://docs.gitlab.com/ce/administration/repository_storage_paths.html 升级参考地址http://interprism.hatenablog.com/entry/gitlab6to8 http://theterminallife.com/migrating-gitlab-to-gitlab-omnibus/ http://docs.gitlab.com/omnibus/update/README.html https://gitlab.com/gitlab-org/omnibus-gitlab/issues/2109","tags":[{"name":"gitlab","slug":"gitlab","permalink":"http://zhourudong.cn/tags/gitlab/"}]},{"title":"GitLab7.9.2升级到9.4.5最新版本","date":"2017-08-24T09:17:02.000Z","path":"2017/08/24/44-GitLab7-9-2升级到9-4-5最新版本/","text":"概要公司使用GitLab7.9.2, 现需要9.4.5, 由PG转到MySQL 升级前准备 HOSTS vim /etc/hosts192.168.1.45 dev-office-dev-192.168.1.45.centos65.sh.com 192.168.1.45 gitlab.sh.com 在1.45创建数据库 CREATE DATABASE `gitlab`GRANT ALL ON gitlab.* TO gitlab@&apos;%&apos; IDENTIFIED BY &apos;2GhYCJAFbXPWfXjC&apos;;FLUSH PRIVILEGES ;# 改连接vim /home/git/gitlab/config/database.yml host: &apos;192.168.1.45&apos; 同步 # 同步数据sudo - git /home/gitrsync -avzP . git@192.168.1.45:/home/git 清空旧备份 cd /home/git/gitlab/tmp/backups &amp;&amp; rm -f * 清缓存 su - git git$ bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production 备份# git 用户完成bundle exec rake gitlab:backup:create RAILS_ENV=production 转换成pgsql# git 用户完成cd /home/git/gitlab mkdir -p tmp/backups/postgresqlmv tmp/backups/TIMESTAMP_gitlab_backup.tar tmp/backups/postgresql/ # 注意文件名 时间戳cd tmp/backups/postgresql# 导出数据mysqldump --compatible=postgresql --default-character-set=utf8 -r gitlabhq_production.mysql -u root gitlab└─&gt; ls1502864668_gitlab_backup.tar gitlabhq_production.mysql# 转换脚本git clone https://github.com/gitlabhq/mysql-postgresql-converter.git -b gitlab└─&gt; pwd/home/git/gitlab/tmp/backups/postgresqlmkdir db/home/git/.pyenv/versions/2.7.13/bin/python mysql-postgresql-converter/db_converter.py gitlabhq_production.mysql db/database.sqled -s db/database.sql &lt; mysql-postgresql-converter/move_drop_indexes.ed#### gzip db/database.sql# 重新封装备份tar rf TIMESTAMP_gitlab_backup.tar db/database.sql # 注意文件名 为时间戳┌─( git ) - ( dev-office-dev-192.168.1.45.centos65.sanhao.com )- ( /home/git/gitlab/tmp/backups/postgresql )└─&gt; tree.├── 1502864668_gitlab_backup.tar # 一键安装包使用此备份文件├── db│ └── database.sql.gz├── gitlabhq_production.mysql└── mysql-postgresql-converter ├── db_converter.py ├── LICENSE ├── move_drop_indexes.ed └── README.md 一键安装包下载地址 https://downloads-packages.s3.amazonaws.com/centos-6.6/gitlab-7.9.2_omnibus-1.el6.x86_64.rpm清华大学镜像https://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/官方地址https://packages.gitlab.com/gitlab/ scp zhourudong@192.168.1.51:/tmp/gitpkg/gitlab-7.9.2_omnibus-1.el6.x86_64.rpm .# yum install gitlab-7.9.2_omnibus-1.el6.x86_64.rpm -y vim /etc/gitlab/gitlab.rb# 第四行external_url &apos;http:// gitlab.sh.45.com&apos;# 找到数据库连接修改gitlab_rails[&apos;db_encoding&apos;] = &quot;utf8&quot;# 必须退出git用户 否则无法初始化gitlab-ctl reconfigure 访问URL进行测试 http://gitlab.sh.com/users/sign_in 还原# cd /var/opt/gitlab/backups/ &amp;&amp; cp /home/git/gitlab/tmp/backups/postgresql/1502864668_gitlab_backup.tar . # 注意文件名的时间戳cd /var/opt/gitlab/backups/ &amp;&amp; cp $(find /home/git/gitlab/tmp/backups/postgresql/ -name &apos;15*&apos;) .ls /var/opt/gitlab/backups 1503455703_gitlab_backup.targitlab-rake gitlab:backup:restore BACKUP=1503455703This will rebuild an authorized_keys file.You will lose any data stored in authorized_keys file.Do you want to continue (yes/no)? yes # 直接替换key 备份pg版本的备份 cd /var/opt/gitlab/backups &amp;&amp; rm -f 15*gitlab-rake gitlab:backup:create 升级gitlab-ce-7.14.3scp zhourudong@192.168.1.51:/tmp/gitpkg/gitlab-ce-7.14.3-ce.1.el6.x86_64.rpm ./opt/gitlab/bin/gitlab-rake cache:clear# install yum install gitlab-ce-7.14.3-ce.1.el6.x86_64.rpm -y cd /etc/gitlab &amp;&amp; rm -f gitlab-secrets.json &amp;&amp; gitlab-ctl upgrade cd /etc/gitlab &amp;&amp; rm -f gitlab-secrets.json &amp;&amp; gitlab-ctl reconfigure 升级 gitlab-ce-9.4.5scp zhourudong@192.168.1.51:/tmp/gitpkg/gitlab-ce-9.4.5-ce.0.el6.x86_64.rpm ./opt/gitlab/bin/gitlab-rake cache:clearyum install gitlab-ce-9.4.5-ce.0.el6.x86_64.rpm -y cd /etc/gitlab &amp;&amp; rm -f gitlab-secrets.json &amp;&amp; gitlab-ctl upgrade cd /etc/gitlab &amp;&amp; rm -f gitlab-secrets.json &amp;&amp; gitlab-ctl reconfigure 升级后配置 停止监控prometheus go开发分布式监控系统vim /etc/gitlab/gitlab.rbprometheus_monitoring[&apos;enable&apos;] = false 修改配置后都需要重载cd /etc/gitlab &amp;&amp; rm -f gitlab-secrets.json &amp;&amp; gitlab-ctl reconfigure 检查是否有致命错误 gitlab-rake gitlab:check 数据存储目录不能使用软链接 配置ldap 邮箱vim /etc/gitlab/gitlab.rb","tags":[{"name":"gitlab","slug":"gitlab","permalink":"http://zhourudong.cn/tags/gitlab/"}]},{"title":"django orm","date":"2017-05-31T09:32:22.000Z","path":"2017/05/31/38-django-orm/","text":"模型from django.db import modelsclass UserType(models.Model): # 用户类型 caption = models.CharField(max_length=16)class UserInfo(models.Model): # 用户信息 username = models.CharField(max_length=32) pwd = models.CharField(max_length=32) user_type = models.ForeignKey(&apos;UserType&apos;) 数据sqlite&gt; SELECT * FROM app01_userinfo;1|张珊|12344|12|李四|123456|3 查询 基本查询 In [10]: UserInfo.objects.all()Out[10]: &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt; values In [12]: UserInfo.objects.all().values(&quot;username&quot;)Out[12]: &lt;QuerySet [&#123;&apos;username&apos;: &apos;张珊&apos;&#125;, &#123;&apos;username&apos;: &apos;李四&apos;&#125;]&gt; values_list In [14]: UserInfo.objects.all().values_list(&quot;username&quot;, &quot;pwd&quot;)Out[14]: &lt;QuerySet [(&apos;张珊&apos;, &apos;12344&apos;), (&apos;李四&apos;, &apos;123456&apos;)]&gt; 一对多模型定义class UserType(models.Model): # 用户类型 CEO 经理 主管 组长 员工 ... caption = models.CharField(max_length=16) class UserInfo(models.Model): # 用户信息 username = models.CharField(max_length=32) pwd = models.CharField(max_length=32) user_type = models.ForeignKey('UserType') # user_type_id(生成表中字段名) 创建 第1种方法In [3]: UserInfo.objects.create(username='老王',pwd='123',user_type=UserType.objects.get(id=2)) Out[3]: &lt;UserInfo: UserInfo object&gt; 多一次数据库查询 第2种方法In [4]: UserInfo.objects.create(username='王五',pwd='123',user_type_id=2)Out[4]: &lt;UserInfo: UserInfo object&gt; 第三种方法data = &#123;'pwd': '123', 'user_type_id': 2, 'username': '张无忌'&#125;In [13]: u = UserInfo(**data)In [14]: u.save() 第四种方法In [15]: u = UserInfo()In [16]: u.username = \"周芷若\"In [17]: u.pwd = \"123\"In [18]: u.user_type = 1 # 报错In [19]: u.user_type_id = 1In [20]: u.save() 查询 方法1In [30]: u_type_id = UserType.objects.get(caption=\"CE0\").idIn [31]: UserInfo.objects.filter(user_type_id=u_type_id)Out[31]: &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;先查找出 外键id 主表过滤外键id集合 方法2In [32]: UserInfo.objects.filter(user_type__caption='CE0')Out[32]: &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;# 通过models模型定义的字段名(不是生成数据库的字段) user_type__caption 字段名__外键关联表的字段（两个下划线）# 能操作方法和单表一致In [38]: UserInfo.objects.filter(user_type__id__gte=1)Out[38]: &lt;QuerySet [&lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;, &lt;UserInfo: UserInfo object&gt;]&gt;In [39]: UserInfo.objects.filter(user_type__caption='CE0').values(\"username\", 'pwd')Out[39]: &lt;QuerySet [&#123;'pwd': '12344', 'username': '张珊'&#125;, &#123;'pwd': '123456', 'username': '李四'&#125;, &#123;'pwd': '123', 'username': '周芷若'&#125;]&gt; 方法3只要是有关键关联 可以使用多次两下划线 __2、三张表跨表操作 class Somthing(models.Model): name = models.CharField(max_length=32) class UserType(models.Model): catption = models.CharField(max_length=32) s = models.ForignKey('Somthing') # ceo，经理 ， 组长，... class UserInfo(models.Model): user = models.CharField(max_length=32) pwd = models.CharField(max_length=32) user_type = models.ForignKey('UserType') UserInfo.objects.filter(user_type__s__name='xx') 多对多class Book(models.Model): name = models.CharField(max_length=64, verbose_name=\"书名\")class Tag(models.Model): # 文学 技术 地理 文科 理科 西方文学... tag_name = models.CharField(max_length=32, verbose_name=\"标签\") b = models.ManyToManyField(\"Book\", verbose_name=\"关联书名\")会生成三张表 应用名_book 应用名_tag 应用名_tag_b (多对多中间表\"b\"是模型中的的字段来命名) 此表保存书名的id和标签id 隐式创建 数据sqlite&gt; SELECT * FROM app01_book;1|莎士比亚2|悲惨世界3|性能之巅4|高性能MySQLsqlite&gt; SELECT * FROM app01_tag;1|IT2|西方文学3|文科4|理科5|技术sqlite&gt; SELECT * FROM app01_tag_b;sqlite&gt; 增add In [11]: tag = Tag.objects.get(id=2)In [12]: tag.tag_nameOut[12]: '西方文学'In [13]: Book.objects.get(id=1).nameOut[13]: '莎士比亚'In [14]: Book.objects.get(id=2).nameOut[14]: '悲惨世界'In [15]: tag.b.add(1) # 将 tag_id=2, book_id=1插入 第三张关联表中In [16]: tag.b.add(2) # 将 tag_id=2, book_id=1插入 第三张关联表中批量插入In [17]: tag.b.add(1,2,3,4) # 将 tag_id=2, book_id=1插入 第三张关联表中 # 将 tag_id=2, book_id=2插入 第三张关联表中 # 将 tag_id=2, book_id=3插入 第三张关联表中 # 将 tag_id=2, book_id=4插入 第三张关联表中In [18]: tag.b.add(*[1,2,3,4]) # 效果同上相当于参数解包 删 tag = Tag.objects.get(id=2)In [19]: tag.b.remove(1) # 将 tag_id=2, book_id=1 删除此记录 In [20]: tag.b.remove(2,4) # 将 tag_id=2, book_id=2 tag_id=2, book_id=4 删除此记录 In [21]: tag.b.remove(*[1,2,3,4]) # 原理同上clear In [22]: tag.b.clear() # 相当于 DELECT FROM app01_tag_b WHERE tag_id=2; 改 In [1]: from app01.models import *In [2]: tag = Tag.objects.get(id=2)In [4]: tag.b.set([2,3]) # 1、隐含操作 DELECT FROM appo1_tag_b WHER tag_id = 2 # 2、 将 tag_id=2, book_id=2 tag_id=2, book_id=3 插入 查 In [2]: tag = Tag.objects.get(id=2)In [12]: tag.b.all()Out[12]: &lt;QuerySet [&lt;Book: Book object&gt;, &lt;Book: Book object&gt;]&gt;通过标签的外键查书名In [34]: tag = Tag.objects.prefetch_related('b').filter(id=2).first()In [37]: for i in tag.b.all(): # 因为使用prefetch_related 此循环没有再次执行sql查找 ...: print (i.name) ...: 莎士比亚悲惨世界性能之巅高性能mysql使用 prefetch_related 可以优化减少查询的次数mysql&gt; SELECT `app01_tag`.`id`, `app01_tag`.`tag_name` FROM `app01_tag` WHERE `app01_tag`.`id` = 2 ORDER BY `app01_tag`.`id` ASC LIMIT 1;+----+--------------+| id | tag_name |+----+--------------+| 2 | 西方文学 |+----+--------------+1 row in set (0.00 sec)mysql&gt; SELECT `app01_tag_b`.`tag_id` AS `_prefetch_related_val_tag_id`, `app01_book`.`id`, `app01_book`.`name`FROM `app01_book` INNER JOIN `app01_tag_b` ON `app01_book`.`id` = `app01_tag_b`.`book_id`WHERE `app01_tag_b`.`tag_id` IN (2) ;+------------------------------+----+----------------+| _prefetch_related_val_tag_id | id | name |+------------------------------+----+----------------+| 2 | 1 | 莎士比亚 || 2 | 2 | 悲惨世界 || 2 | 3 | 性能之巅 || 2 | 4 | 高性能mysql |+------------------------------+----+----------------+4 rows in set (0.00 sec)","tags":[{"name":"django orm","slug":"django-orm","permalink":"http://zhourudong.cn/tags/django-orm/"}]},{"title":"python 字典","date":"2017-04-20T01:50:33.000Z","path":"2017/04/20/37-python-字典/","text":"按字典值大小进行排序# How to sort a Python dict by value# (== get a representation sorted by value)&gt;&gt;&gt; xs = &#123;'a': 4, 'b': 3, 'c': 2, 'd': 1&#125;&gt;&gt;&gt; sorted(xs.items(), key=lambda x: x[1])[('d', 1), ('c', 2), ('b', 3), ('a', 4)]# Or:&gt;&gt;&gt; import operator&gt;&gt;&gt; sorted(xs.items(), key=operator.itemgetter(1))[('d', 1), ('c', 2), ('b', 3), ('a', 4)]","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"ActiveMQ_zookeeper高可用配置","date":"2017-04-14T08:33:28.000Z","path":"2017/04/14/36-ActiveMQ-zookeeper高可用配置/","text":"ActiveMQ levelDBzookeeper主机: 主机名 ip 客户端端口 zookeeper集群端口 选leader端口 node1 10.76.249.173 2181 2881 3881 node2 10.76.249.174 2181 2881 3881 node3 10.76.249.175 2181 2881 3881 软件:zookeeper-3.4.10.tar.gz apache-activemq-5.9.1-bin.tar.gz 目录:解压软链接 ln -sv zookeeper-3.4.10 /opt/module/node1_zookeeper ln -sv zookeeper-3.4.10 /opt/module/node2_zookeeper ln -sv zookeeper-3.4.10 /opt/module/node3_zookeeper 数据、日志mkdir -pv /home/datadir/{data,log} 配置文件cp zoo_sample.cfg zoo.cfg cat zoo.cfg tickTime=2000initLimit=10syncLimit=5dataDir=/home/datadir/datadataLogDir=/home/datadir/logclientPort=2181server.1=node1:2881:3881server.2=node2:2881:3881server.3=node3:2881:3881 echo 1 &gt;/home/datadir/data/myidecho 2 &gt;/home/datadir/data/myidecho 3 &gt;/home/datadir/data/myid /opt/module/zookeeper-3.4.10/bin/zkServer.sh start 端口作用: 2181 : 客户端连接 2881: zookeeper集群消息通信端口 3881:选leader专用端口 activemq 主机 集群端口 stomp 端口 管理端口 10.76.249.173 62621 61613 8161 10.76.249.174 62621 61613 8161 10.76.249.175 62621 61613 8161 配置文件： &lt;!-- START SNIPPET: example --&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\"&gt; &lt;!-- Allows us to use system properties as variables in this configuration file --&gt; &lt;bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt; &lt;property name=\"locations\"&gt; &lt;value&gt;file:$&#123;activemq.conf&#125;/credentials.properties&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- The &lt;broker&gt; element is used to configure the ActiveMQ broker. --&gt; &lt;broker xmlns=\"http://activemq.apache.org/schema/core\" brokerName=\"ShMQTest\" dataDirectory=\"$&#123;activemq.data&#125;\"&gt; &lt;destinationPolicy&gt; &lt;policyMap&gt; &lt;policyEntries&gt; &lt;policyEntry topic=\"&gt;\" &gt; &lt;!-- The constantPendingMessageLimitStrategy is used to prevent slow topic consumers to block producers and affect other consumers by limiting the number of messages that are retained For more information, see: http://activemq.apache.org/slow-consumer-handling.html --&gt; &lt;pendingMessageLimitStrategy&gt; &lt;constantPendingMessageLimitStrategy limit=\"1000\"/&gt; &lt;/pendingMessageLimitStrategy&gt; &lt;/policyEntry&gt; &lt;/policyEntries&gt; &lt;/policyMap&gt; &lt;/destinationPolicy&gt; &lt;!-- The managementContext is used to configure how ActiveMQ is exposed in JMX. By default, ActiveMQ uses the MBean server that is started by the JVM. For more information, see: http://activemq.apache.org/jmx.html --&gt; &lt;managementContext&gt; &lt;managementContext createConnector=\"false\"/&gt; &lt;/managementContext&gt; &lt;!-- Configure message persistence for the broker. The default persistence mechanism is the KahaDB store (identified by the kahaDB tag). For more information, see: http://activemq.apache.org/persistence.html --&gt; &lt;persistenceAdapter&gt; &lt;!-- 注释持久化默认适配器 Start --&gt; &lt;!-- Start &lt;kahaDB directory=\"$&#123;activemq.data&#125;/kahadb\"/&gt; End --&gt; &lt;!-- 注释持久化默认适配器 End --&gt; &lt;!-- 自定义高可用集群服务 Start --&gt; &lt;!-- hostname需要改成不同的节点 Start --&gt; &lt;replicatedLevelDB directory=\"$&#123;activemq.data&#125;/leveldb\" replicas=\"3\" bind=\"tcp://0.0.0.0:62621\" zkAddress=\"10.76.249.173:2181,10.76.249.174:2181,10.76.249.175:2181\" zkPassword=\"\" weight=\"1\" hostname=\"node1\" zkPath=\"/activemq/leveldb-stores\" securityToken=\"\" /&gt; &lt;!-- 自定义集群服务 End--&gt; &lt;/persistenceAdapter&gt; &lt;!-- The systemUsage controls the maximum amount of space the broker will use before disabling caching and/or slowing down producers. For more information, see: http://activemq.apache.org/producer-flow-control.html --&gt; &lt;systemUsage&gt; &lt;systemUsage&gt; &lt;memoryUsage&gt; &lt;memoryUsage percentOfJvmHeap=\"70\" /&gt; &lt;/memoryUsage&gt; &lt;storeUsage&gt; &lt;storeUsage limit=\"10 gb\"/&gt; &lt;/storeUsage&gt; &lt;tempUsage&gt; &lt;tempUsage limit=\"5 gb\"/&gt; &lt;/tempUsage&gt; &lt;/systemUsage&gt; &lt;/systemUsage&gt; &lt;!-- The transport connectors expose ActiveMQ over a given protocol to clients and other brokers. For more information, see: http://activemq.apache.org/configuring-transports.html --&gt; &lt;transportConnectors&gt; &lt;!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --&gt; &lt;transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600\"/&gt; &lt;transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600\"/&gt; &lt;transportConnector name=\"stomp\" uri=\"stomp://0.0.0.0:61613?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600\"/&gt; &lt;transportConnector name=\"mqtt\" uri=\"mqtt://0.0.0.0:1883?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600\"/&gt; &lt;transportConnector name=\"ws\" uri=\"ws://0.0.0.0:61614?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600\"/&gt; &lt;/transportConnectors&gt; &lt;!-- destroy the spring context on shutdown to stop jetty --&gt; &lt;shutdownHooks&gt; &lt;bean xmlns=\"http://www.springframework.org/schema/beans\" class=\"org.apache.activemq.hooks.SpringContextHook\" /&gt; &lt;/shutdownHooks&gt; &lt;/broker&gt; &lt;!-- Enable web consoles, REST and Ajax APIs and demos The web consoles requires by default login, you can disable this in the jetty.xml file Take a look at $&#123;ACTIVEMQ_HOME&#125;/conf/jetty.xml for more details --&gt; &lt;import resource=\"jetty.xml\"/&gt;&lt;/beans&gt;&lt;!-- END SNIPPET: example --&gt;","tags":[{"name":"activemq","slug":"activemq","permalink":"http://zhourudong.cn/tags/activemq/"}]},{"title":"linux vsftpd","date":"2017-03-30T07:40:57.000Z","path":"2017/03/30/35-linux-vsftpd/","text":"OS : CentOS Linux release 7.2.1511 (Core) 要求: 路径 权限 备注 /home/ftp 公司所有人员包括来宾均可以访问 只读 /tmp 仅允许web, zrd三个人访问 web只允许下载，zrd可以上传 均使用虚拟账户 1、安装:yum install -y -q vsftpd 2、创建用户a、系统映射用户useradd -d /home/ftp -s /sbin/nologin vftpuser 所有虚拟用户有增改权限最终都会映射成vftpuser属主组, 所以vftpuser必须要有目录的权限虚拟用户才能跳转到这个目录进行操作(增删改) b、虚拟用户奇数为用户名,偶数行为密码cat &gt;/tmp/ftpuser.txt&lt;&lt;EOFweb123456admin123456zrd123456EOF c、虚拟用户文件转换成加密文件db_load -T -t hash -f /tmp/ftpuser.txt /etc/vsftpd/vftpuser.db 3、修改/etc/vsftpd/vsftpd.conf配置// # 在最后添加# 匿名用户根目录位置anon_root=/home/ftpvirtual_use_local_privs=YESguest_enable=YES# 映射到系统的用户guest_username=vftpuserchroot_local_user=YESallow_writeable_chroot=YES# 虚拟用户配置目录user_config_dir=/etc/vsftpd/user_conf 4、虚拟用户权限配置虚拟用户对应的系统用户要有这个目录的权限否则无法操作mkdir /etc/vsftpd/user_conf/ a、有读写删权限的用户cat &gt;/etc/vsftpd/user_conf/zrd&lt;&lt;EOF# 用户登录时默认的家目录(vftpuser映射的系统用户需要拥有这个目录的权限) local_root=/home/ftpanon_world_readable_only=NO# 对应的权限为755anon_umask=022 # 新建目录权限anon_mkdir_write_enable=YES# 上传权限 anon_upload_enable=YES# 删除/重命名的权限anon_other_write_enable=YESEOF b、只有读下载权限的用户cat &gt;/etc/vsftpd/user_conf/web&lt;&lt;EOFlocal_root=/home/ftpanon_world_readable_only=NO write_enable=NOEOF 5、配置pam文件vim /etc/pam.d/vsftpd#%PAM-1.0session optional pam_keyinit.so force revoke# 注释掉以下4行#auth required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed#auth required pam_shells.so#auth include password-auth#account include password-authsession required pam_loginuid.sosession include password-auth# /etc/vsftpd/vftpuser为生成 /etc/vsftpd/vftpuser.db文件.db不要填写否则报错# 添加下面两行auth required pam_userdb.so db=/etc/vsftpd/vftpuseraccount required pam_userdb.so db=/etc/vsftpd/vftpuser 6、启动服务","tags":[{"name":"linux","slug":"linux","permalink":"http://zhourudong.cn/tags/linux/"}]},{"title":"python 面向对象总结","date":"2017-03-29T08:07:46.000Z","path":"2017/03/29/34-python-面向对象总结/","text":"类的定义构造函数def __ini__(self, ....): pass 析构函数def __del__(self, ...): pass ''' 当被python回收机制进行回收会自动调用这个函数 ''' 类属性定义类的属性1、直接定义class Programer: sex = 'male' 2、构造函数时定义'''在构造对象时需要传值'''class Programer: def __init__(self, name, age): self.name = name self.age = age 访问控制严格来说python没有访问控制class Programer: def __init__(self, name, age, weight): self.name = name # 可以进行公开的访问 self._age = age # 单下划线表示这个类的私有属性 self.__weight = weight # 实现了部分私有属性 类里边能访问,实例化对象后不能访问 例子class Programer: hobby = 'play computer' ''' 类属性 ''' def __init__(self, name, age, weight): self.name = name self._age = age self.__weight = weight def get_weight(self): ''' 方法 获取weight''' return self.__weightif __name__ == '__main__': programer = Programer('Tom', 23 , 80) print(dir(programer)) print(programer.__dict__) ''' &#123;'name': 'Tom', '_age': 23, '_Programer__weight': 80&#125; 可以看到键值的情况 ''' print(programer.get_weight()) ''' 80 ''' print(programer._Programer__weight) ''' 80 变向的访问类的私有属性,所以说python没有私有属性 ''' 定义类方法函数和方法 函数直接调用函数名即可调用 而方法一般都是和对象一起使用(从属于某个类)class Test: def test(self): passa = Test()print(a.test)'''&lt;bound method Test.test of &lt;__main__.Test object at 0x0000000002818518&gt;&gt;'''a.test = '112233'print(a.test)'''112233''''''一切皆对象''' 常用方法定义class Example: def add(self): ''' 公用方法 ''' pass def _minus(self): ''' 私有方法 ''' pass def __multiply(self): pass 类装饰器@classmethod调用的时候用类名,而不是某个对象(不是生成对象再调用方法)@property像访问属性一样调用方法@staticmethod 类方法例子class Programer: hobby = 'play game' def __init__(self, name, age, weight): self.name = name self._age = age self.__weight = weight ''' 类方法 ''' @classmethod def get_hobby(cls): return cls.hobby ''' 直接对象名+方法名,获得属性不需要加()''' @property def get_weight(self): return self.__weight # 正常的类方法 def self_introduction(self): print('My Name is %s \\nI am %s years old\\n' % (self.name, self._age))if __name__ == '__main__': programer = Programer('Tomcat', 23, 90) '''实例化 得到对象''' print(dir(programer)) # 以类名调用类方法(不需要进行实例化) print(Programer.get_hobby()) ''' play game 调用类方法 @classmethod 直接使用的是类名加方法 ''' # 以属性方式调用类方法 print(programer.get_weight) ''' 90 @property 装饰后访问此方法,和访问属性一样,不需要加括号 ''' programer.self_introduction() ''' My Name is Tomcat I am 23 years old 正常的调用类方法的方式 ''' 类的继承语法:class B(A): &lt;语句块&gt; . . super()调用父类方法class A: def method(self, arg): passclass B(A): def method(self, arg): super(B, self).method(arg) ''' 调用父类的方法 第一个参数 自己的类名 第二个参数是 self . 连接是调用父类的方法名 最后是传入的参数 ''' 子类的类型判断 isinstance issubclass 多继承_例子_class Programer: hobby = 'play game' def __init__(self, name, age, weight): self.name = name self._age = age self.__weight = weight ''' 类方法 ''' @classmethod def get_hobby(cls): return cls.hobby ''' 直接对象名+方法名,获得属性不需要加()''' @property def get_weight(self): return self.__weight # 正常的类方法 def self_introduction(self): print('My Name is %s \\nI am %s years old\\n' % (self.name, self._age))class BackendProgramer(Programer): def __init__(self, name, age, weight, language): super(BackendProgramer, self).__init__(name, age, weight) self.language = language ''' 调用父类以后 多出的属性进行赋值'''if __name__ == '__main__': programer = BackendProgramer('Tomcat', 23, 90, 'Python') '''实例化 得到对象''' print(dir(programer)) print(programer.__dict__) ''' &#123;'name': 'Tomcat', '_age': 23, '_Programer__weight': 90, 'language': 'Python'&#125; 三个属性是从父类继承 ''' print(type(programer)) ''' &lt;class '__main__.BackendProgramer'&gt; ''' print(isinstance(programer, Programer)) ''' True 判断这个类的父类是否是Programer ''' 类的多态 继承 方法重写class Programer: hobby = 'play game' def __init__(self, name, age, weight): self.name = name self._age = age self.__weight = weight ''' 类方法 ''' @classmethod def get_hobby(cls): return cls.hobby ''' 直接对象名+方法名,获得属性不需要加()''' @property def get_weight(self): return self.__weight # 正常的类方法 def self_introduction(self): print('My Name is %s \\nI am %s years old\\n' % (self.name, self._age))class BackendProgramer(Programer): def __init__(self, name, age, weight, language): super(BackendProgramer, self).__init__(name, age, weight) self.language = language ''' 调用父类以后 多出的属性进行赋值''' ''' 方法重写 ''' def self_introduction(self): print('My Name is %s \\nMy favourite language is %s .\\n' % (self.name, self.language))def introduce(programer): if isinstance(programer, Programer): programer.self_introduction() if __name__ == '__main__': programer = Programer('Tomcat', 23, 90, ) '''实例化 得到对象''' backend_programer = BackendProgramer('nginx', 20, 85, 'Python') introduce(programer) ''' My Name is Tomcat I am 23 years old ''' introduce(backend_programer) ''' My Name is nginx My favourite language is Python . ''' # 特点 ''' 添加功能的时候非常的简单,只要判断是不是属于父类， 不管传进来的是哪个子类，都可以调用期方法 ''' 类的魔术方法方法名的前后有两个下划线def init(self): pass ['_Programer__weight', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__','__ge__', '__getattribute__', '__gt__', '__hash__', '__init__','__init_subclass__', '__le__', '__lt__', '__module__','__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__','_age', 'get_hobby', 'get_weight', 'hobby', 'name', 'self_introduction'] 类的实例化过程 创建类的对象 类的初始化 init 之前会调用new来返回一个类的初始对象如果有需求可以重写new 方法def __new__(cls): ---&gt;&gt; def __init__(slef): 例子class Programer(object): def __new__(cls, *args, **kwargs): print('call __new__ method') print(args) return super(Programer, cls).__new__(cls, *args, **kwargs) def __init__(self, name, age): print('call __init__ method') self.name = name self.age = ageif __name__ == \"__main__\": programer = Programer('Nginx', 2007) print(programer.__dict__) ''' call __new__ method ('Nginx', 2007) call __init__ method &#123;'age': 2007, 'name': 'Nginx'&#125; 印证了 __new__ 构造方法__init__时先调用new在返回对象交给init放进行初始化 ''' 销毁对象del()垃圾回收时会自动进行调用(少用) 类与运算符s = 'test'print(s == s) # Trueprint(dir(s))'''['__add__', '__eq__','__ge__', '__gt__','__ne__','__le__', '__lt__', ...]# 从此例子说明如果类需要某些魔术方法则需要自己加入魔术方法''' 运算符分类 比较运算符 __cmp__(self, other): 包含了以下的情况 &gt;,&lt; ,&gt;=, &lt;=__eq__(self, other):__lt__(self, other):__gt__(self, other): 数字运算符 def __add__(self, other): +def __sub__(self, other): -def __mul__(self, other): *def __divmod__(self, other): / 逻辑运算符 def __or__(self, other):def __and__(self, other): 例子class Programer: hobby = 'play game' def __init__(self, name, age, weight): self.__weight = weight self.name = name if isinstance(age, int): self.age = age else: raise Exception('age must be int') def __eq__(self, other): if isinstance(other, Programer): if self.age == other.age: return True else: return False else: raise Exception('The type of object must be Programer') def __add__(self, other): if isinstance(other, Programer): return self.age + other.age else: raise Exception('The type of object must be Programer') ''' 类方法 '''if __name__ == '__main__': p1 = Programer('Tomcat', 23, 90, ) p2 = Programer('nginx', 21, 90, ) print(p1==p2) print(p1+p2) ''' False 44 ''' 类的展现有时候类实例化以后可以使用print打印出来 转换为字符串str 把对象转换为较适合人看的字符串repr 把对象转换为适合机器看的字符串unicode eval() 可以把python一段字符串当做代码来运行(repr可以可转换, 而str不行) 展现对象的属性dir()dir() 魔术方法来控制dir展示的结果 例子class Programer: hobby = 'play game' def __init__(self, name, age): self.name = name if isinstance(age, int): self.age = age else: raise Exception('age must be int') ''' 注释一下代码''' def __str__(self): return '%s is %s years old' % (self.name, self.age) def __dir__(self): # 只返回属性的键 return self.__dict__.keys()if __name__ == '__main__': p = Programer('Tomcat', 23) print(p) print(dir(p)) ''' 注释前: &lt;__main__.Programer object at 0x00000000021F8550&gt; ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'hobby', 'name'] ''' ''' 注释后: Tomcat is 23 years old ['age', 'name'] ''' 类的属性访问控制设置对象属性 setattr class A: # 方法1 def __setattr__(self, key, value): setattr(self, key, value) ''' 如果在给一个对象设置属性的时候, 他实际上会调用到这个魔术方法, 默认情况下不需要进行定义(父类继承) ''' # 这种方法不要使用 容易引起无限递归调用 setattr调用内建的__seatter__ # 方法2 建议这种方法 def __setattr__(self, key, value): self.__dict__[key] = value 查询对象的属性class A: def __getattr__(self, item): pass def __getattribute__(self, item): pass ''' 第一个方法: 访问这个属性,在默认情况下，没有被查询到的情况下调用它 第二个方法: 访问属性方法，每次都会调用到（使用这种方法不容易引起无限递归调用） ''' 删除对象属性del时会调用class A: def __delattr__(self, item): 例子 class Programer: hobby = 'play game' def __init__(self, name, age): self.name = name self.age = age def __getattribute__(self, item): # return getattr(self, item) # 错误写法 ''' RecursionError: maximum recursion depth exceeded ''' # return self.__dict__[name] # 错误的写法 ''' [Previous line repeated 326 more times] RecursionError: maximum recursion depth exceeded ''' return super(Programer, self).__getattribute__(item) def __setattr__(self, key, value): # setattr(self, key, value) # 错误的写法 ''' RecursionError: maximum recursion depth exceeded 返回递归深度限制错误 ''' self.__dict__[key] = valueif __name__ == '__main__': p = Programer('Tomcat', 23) print(p.name)","tags":[{"name":"python 面向对象","slug":"python-面向对象","permalink":"http://zhourudong.cn/tags/python-面向对象/"}]},{"title":"基础算法","date":"2017-03-28T07:59:24.000Z","path":"2017/03/28/33-基础算法/","text":"斐波那契数列# coding:utf8''' v1 '''def fib(n): if n &lt;= 1: return 1 return fib(n - 1) + fib(n - 2)print fib(10)''' v2 '''def fib1(n, cache=None): if cache is None: cache = &#123;&#125; if n in cache: return cache[n] if n &lt;= 1: return 1 cache[n] = fib1(n - 1, cache) + fib1(n - 2, cache) return cache[n]print fib1(999)''' v3 '''# coding:utf8def memo(func): cache = &#123;&#125; def wrapp(*args, **kwargs): if args not in cache: cache[args] = func(*args) return cache[args] return wrapp# 语法糖实现 等价于fib=memo(fib)@memodef fib(n): if n &lt;= 1: return 1 return fib(n - 1) + fib(n - 2)# fib=memo(fib)print fib(10) 动态规划1#coding:utf8def memo(func): cache = &#123;&#125; def wrapp(*args, **kwargs): if args not in cache: cache[args] = func(*args) return cache[args] return wrapp# 语法糖实现 等价于climb = memo(climb)@memodef climb(n, steps=None): count = 0 if n == 0: count = 1 elif n &gt;0: for step in steps: count += climb(n - step, steps) return countprint climb(195,(1,2,3))","tags":[{"name":"python 算法","slug":"python-算法","permalink":"http://zhourudong.cn/tags/python-算法/"}]},{"title":"python装饰器","date":"2017-03-28T06:40:13.000Z","path":"2017/03/28/32-python装饰器/","text":"简单装饰器实现斐波那契数列 # coding:utf8def memo(func): cache = &#123;&#125; def wrapp(*args, **kwargs): if args not in cache: cache[args] = func(*args) return cache[args] return wrapp# 语法糖实现 等价于fib=memo(fib)@memodef fib(n): if n &lt;= 1: return 1 return fib(n - 1) + fib(n - 2)# fib=memo(fib)print fib(10) 保留原函数属性# coding:utf8'''&gt;&gt;&gt;def f (a=1,b=[1,2,3]): ''' doc for f func''' g = 100 return lambda k : g +2 &gt;&gt;&gt;f.func_ f.func_closure # 函数闭包 g = f() ; g.__closure__ 访问闭包 f.func_dict f.func_name f.func_code f.func_doc f.func_defaults #默认参数 (1, [1, 2, 3]) f.func_globals'''# ------------------------# 保留原来函数的属性# ------------------------#coding:utf8def w(func): def wapper(*args, **kwargs): ''' wapper function ''' print('In wapper') func(*args, **kwargs) return wapper@wdef example(): ''' example function''' print(\"in example\")print(example.__doc__) print(example.__name__) '''返回值: wapper function wapper函数的属性经过装饰器后属性被修改'''# ----------------------# 简单修改# ----------------------#coding:utf8def w(func): def wapper(*args, **kwargs): ''' wapper function ''' print('In wapper') func(*args, **kwargs) # 保留原来函数的属性 wapper.__name__ = func.__name__ return wapper@wdef example(): ''' example function''' print(\"in example\")print(example.__doc__)print(example.__name__)'''返回值: wapper function example已经修改, 此方法过于繁杂'''# ----------------------# 使用functools# ----------------------# update_wrapper#coding:utf8from functools import wraps, update_wrapper, WRAPPER_ASSIGNMENTS, WRAPPER_UPDATES'''其中wraps是调用update_wrapperWRAPPER_ASSIGNMENTS, WRAPPER_UPDATES 分别对应的是update_wrapper中的第三个参数和第四个参数'''def w(func): def wapper(*args, **kwargs): ''' wapper function ''' print('In wapper') func(*args, **kwargs) # 保留原来函数的属性 # update_wrapper(wapper, func, ('__name__', '__doc__'), ('__dict__',)) update_wrapper(wapper, func) ''' 第一个参数是包裹函数 wapper 第二个参数为原函数 example(既是func) 第三个参数为元组 使用原函数的属性替换包裹函数的属性 第四个参数为元组 用于合并(合并原函数和包裹函数的属性而不是替换) ''' return wapper@wdef example(): ''' example function''' print(\"in example\")print(example.__doc__)print(example.__name__)print WRAPPER_ASSIGNMENTS # 返回 ('__module__', '__name__', '__doc__') 从此返回值中 第三个参数可以不填写使用默认print WRAPPER_UPDATES # 返回 ('__dict__',) 从此返回值中 第四个参数可以不填写使用默认''' ''''''返回值: wapper function example已经修改, 此方法过于繁杂'''# ----------------------# 使用functools# ----------------------# wraps#coding:utf8from functools import wraps, update_wrapper, WRAPPER_ASSIGNMENTS, WRAPPER_UPDATES'''其中wraps是调用update_wrapperWRAPPER_ASSIGNMENTS, WRAPPER_UPDATES 分别对应的是update_wrapper中的第三个参数和第四个参数'''def w(func): ''' 1、传入被装饰的函数(必须给定) 2、第二个参数为元组 WRAPPER_ASSIGNMENTS 不传入则使用默认('__module__', '__name__', '__doc__') 3、第三个为参数为元组 WRAPPER_UPDATES 不传入则使用默认('__dict__',) ''' @wraps(func) def wapper(*args, **kwargs): ''' wapper function ''' print('In wapper') func(*args, **kwargs) # 保留原来函数的属性 # update_wrapper(wapper, func, ('__name__', '__doc__'), ('__dict__',)) # update_wrapper(wapper, func) ''' 第一个参数是包裹函数 wapper 第二个参数为原函数 example(既是func) 第三个参数为元组 使用原函数的属性替换包裹函数的属性 第四个参数为元组 用于合并(合并原函数和包裹函数的属性而不是替换) ''' return wapper@wdef example(): ''' example function''' print(\"in example\")print(example.__doc__)print(example.__name__)print WRAPPER_ASSIGNMENTS # 返回 ('__module__', '__name__', '__doc__') 从此返回值中 第三个参数可以不填写使用默认print WRAPPER_UPDATES # 返回 ('__dict__',) 从此返回值中 第四个参数可以不填写使用默认''' ''''''返回值: wapper function example已经修改, 此方法过于繁杂''' 带参数的装饰器# ----------------------# signature模块# ----------------------#coding:utf8# 检查函数参数的类型from inspect import signature# 3python 以后才有此模块def typeassert(*ty_args, **ty_kwargs): def decorator(func): # func --》 a.b 获取函数参数类型映射关系 # d = &#123;'a': int , 'b': str ...&#125; def wapper(*args, **kwargs): # 迭代 args中的参数 判断其是否在字典中 # 如果在d字典中则对其值类型进行匹配 # arg in d, isinstance(arg, d[args]) return func(*args, **kwargs) return wapper return decoratordef f(a, b, c): passsig = signature(f) # 获取f的签名print(sig.parameters)'''返回参数的字典 OrderedDict([('a', &lt;Parameter \"a\"&gt;), ('b', &lt;Parameter \"b\"&gt;), ('c', &lt;Parameter \"c\"&gt;)])'''a = sig.parameters['a']print(a.name) #参数名print(a.kind) # 参数类型 POSITIONAL_OR_KEYWORDprint(a.default) # &lt;class 'inspect._empty'&gt; 参数a的默认值print(sig.bind) # 可以绑定属性类型''' &lt;bound method Signature.bind of &lt;Signature (a, b, c)&gt;&gt; '''# 绑定属性bargs = sig.bind(str, int, int)print(bargs)print(bargs.arguments)'''&lt;BoundArguments (a=&lt;class 'str'&gt;, b=&lt;class 'int'&gt;, c=&lt;class 'int'&gt;)&gt;OrderedDict([('a', &lt;class 'str'&gt;), ('b', &lt;class 'int'&gt;), ('c', &lt;class 'int'&gt;)])'''print(bargs.arguments['a']) # &lt;class 'str'&gt;print(bargs.arguments['b']) # &lt;class 'int'&gt;print(bargs.arguments['c']) # &lt;class 'int'&gt;bargs.bind_partial() # 某些参数不做类型检查不会报错# coding:utf8# 检查函数参数的类型from inspect import signature# 3python 以后才有此模块def typeassert(*ty_args, **ty_kwargs): def decorator(func): # func --》 a.b 获取函数参数类型映射关系 # d = &#123;'a': int , 'b': str ...&#125; sig = signature(func) btypes = sig.bind_partial(*ty_args, **ty_kwargs).arguments '''绑定的类型 某些参数不做类型检查不会报错 ''' def wapper(*args, **kwargs): # 迭代 args中的参数 判断其是否在字典中 # 如果在d字典中则对其值类型进行匹配 # arg in d, isinstance(arg, d[args]) for name, obj in sig.bind(*args, **kwargs).arguments.items(): ''' 获得到绑定的参数 类型对其进行迭代 ''' if name in btypes: if not isinstance(obj, btypes[name]): raise TypeError(\"&#123;&#125; must be &#123;&#125;\".format(name, btypes[name])) return func(*args, **kwargs) return wapper return decorator@typeassert(int, str, list)def f(a, b, c): print(a, b, c)f(1, '2', []) # 1 2 []f(1,2,3)'''raise TypeError(\"&#123;&#125; must be &#123;&#125;\".format(name, btypes[name]))TypeError: b must be &lt;class 'str'&gt;''' 属性可修改的函数装饰器# coding:utf8#from functools import wrapsimport timeimport loggingfrom random import randint# 统计函数的运行时间 运行时间超时则记录日志def warm(timeout): def decorator(func): def wapper(*args, **kwargs): start = time.time() res = func(*args, **kwargs) ''' 记录返回值 ''' used = time.time() - start if used &gt; timeout: msg = \"&#123;&#125;:&#123;&#125; &gt; &#123;&#125;\".format(func.__name__, used, timeout) # 哪个函数运行了多长时间 当前timeout logging.warning(msg) return res return wapper return decorator@warm(1.5)def test(): print('In test') while randint(0,1): # 百分之50的几率记录睡眠 time.sleep(0.5)for _ in range(30): ''' 日志中是否有超过1.5秒的函数 ''' test()'''In testWARNING:root:test:1.5000858306884766 &gt; 1.5In test'''# ------------------# 动态修改tiemout# -----------------# coding:utf8#import timeimport loggingfrom random import randint# 统计函数的运行时间 运行时间超时则记录日志def warm(timeout): def decorator(func): def wapper(*args, **kwargs): start = time.time() res = func(*args, **kwargs) ''' 记录返回值 ''' used = time.time() - start if used &gt; timeout: msg = \"&#123;&#125;:&#123;&#125; &gt; &#123;&#125;\".format(func.__name__, used, timeout) # 哪个函数运行了多长时间 当前timeout logging.warning(msg) return res def setTimeout(k): nonlocal timeout timeout = k wapper.setTimeout = setTimeout # 给函数设置一个属性设置超时的时间 return wapper return decorator@warm(1.5)def test(): print('In test') while randint(0,1): # 百分之50的几率记录睡眠 time.sleep(0.5)for _ in range(5): ''' 日志中是否有超过1.5秒的函数 ''' test()print(\"$\"*20)test.setTimeout(1)for _ in range(5): test()'''In testIn testIn testIn testIn testWARNING:root:test:2.0001144409179688 &gt; 1.5$$$$$$$$$$$$$$$$$$$$In testIn testIn testWARNING:root:test:1.0000574588775635 &gt; 1In testIn test'''################# python2 中实现################# coding:utf8#import timeimport loggingfrom random import randint# 统计函数的运行时间 运行时间超时则记录日志def warm(timeout): timeout = [timeout] def decorator(func): def wapper(*args, **kwargs): start = time.time() res = func(*args, **kwargs) ''' 记录返回值 ''' used = time.time() - start if used &gt; timeout[0]: msg = \"&#123;&#125;:&#123;&#125; &gt; &#123;&#125;\".format(func.__name__, used, timeout[0]) # 哪个函数运行了多长时间 当前timeout logging.warning(msg) return res def setTimeout(k): # nonlocal timeout timeout[0] = k wapper.setTimeout = setTimeout # 给函数设置一个属性设置超时的时间 return wapper return decorator@warm(1.5)def test(): print('In test') while randint(0,1): # 百分之50的几率记录睡眠 time.sleep(0.5)for _ in range(5): ''' 日志中是否有超过1.5秒的函数 ''' test()print(\"$\"*20)test.setTimeout(1)for _ in range(5): test()'''In testIn testIn testIn testIn testWARNING:root:test:2.0001144409179688 &gt; 1.5$$$$$$$$$$$$$$$$$$$$In testIn testIn testWARNING:root:test:1.0000574588775635 &gt; 1In testIn test'''","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python logger","date":"2017-03-16T07:55:10.000Z","path":"2017/03/16/31-python-logger/","text":"","tags":[{"name":"python模块","slug":"python模块","permalink":"http://zhourudong.cn/tags/python模块/"}]},{"title":"数据库比较","date":"2017-03-03T01:51:50.000Z","path":"2017/03/03/29-数据库比较/","text":"mysql 含义 MySQL elasticsearchm mongodb 库 表 列 行","tags":[{"name":"mysql","slug":"mysql","permalink":"http://zhourudong.cn/tags/mysql/"}]},{"title":"python mysql连接池简略实现","date":"2017-02-28T03:42:22.000Z","path":"2017/02/28/28-python-mysql连接池简略实现/","text":"v1# -*- coding: utf-8 -*-# __author__ = 'zhourudong'# 连接池的实现import pymysqlimport Queuefrom pymysql.cursors import DictCursorclass ConnectionPool: def __init__(self, **kwargs): self.size = kwargs.pop('size', 10) # 允许最大的连接 self.idle = kwargs.pop('idle', 3) # 空闲连接 self.kwargs = kwargs self.length = 0 # 已用连接 self.connections = Queue.Queue(maxsize=self.idle) def _connect(self): # 创建连接的函数 if not self.connections.full(): # 如果当前连接小于预留的连接则创建 conn = pymysql.connect(**self.kwargs) self.connections.put(conn) # 放到池中 self.length += 1 else: raise RuntimeError('lot of connections ') def _close(self, conn): conn.close() # self.length -= 1 # 17分钟 def get(self, timeout=None): if self.connections.empty() and self.length &lt; self.size: # 如果连接池为空 或者已用连接小于设置连接数上限 self._connect() return self.connections.get(timeout=timeout) def return_resource(self, conn): if self.connections.full(): # 如果连接池中剩余的连接大于 设置连接上线)(连接池满则关闭, 否则把连接放到连接池中) self._close(conn) return self.connections.put(conn)if __name__ == '__main__': pool = ConnectionPool(host='127.0.0.1', port=23316, user='root', password='123456', database='zrd', cursorclass=DictCursor) for _ in range(11): conn = pool.get() conn.cursor() # conn = pool.get() # try: # # with conn as cur: # cur.execute(\"\"\" SELECT * FROM `user`\"\"\") # for res in cur.fetchall(): # print res # finally: # pool.return_resource(conn) v2# -*- coding: utf-8 -*-# __author__ = 'zhourudong'# 连接池的实现import pymysqlimport Queuefrom pymysql.cursors import DictCursorfrom contextlib import contextmanagerclass ConnectionPool: def __init__(self, **kwargs): self.size = kwargs.pop('size', 10) # 允许最大的连接 self.idle = kwargs.pop('idle', 3) # 空闲连接 self.kwargs = kwargs self.length = 0 # 已用连接 self.connections = Queue.Queue(maxsize=self.idle) def _connect(self): # 创建连接的函数 if not self.connections.full(): # 如果当前连接小于预留的连接则创建 conn = pymysql.connect(**self.kwargs) self.connections.put(conn) # 放到池中 self.length += 1 else: raise RuntimeError('lot of connections ') def _close(self, conn): conn.close() # self.length -= 1 # 17分钟 def get(self, timeout=None): if self.connections.empty() and self.length &lt; self.size: # 如果连接池为空 或者已用连接小于设置连接数上限 self._connect() conn = self.connections.get(timeout=timeout) conn.ping(reconnect=True) # 检查可用性 return conn def return_resource(self, conn): if self.connections.full(): # 如果连接池中剩余的连接大于 设置连接上线)(连接池满则关闭, 否则把连接放到连接池中) self._close(conn) return self.connections.put(conn) # 引入上下文管理 @contextmanager def __call__(self, timeout=None): conn = self.get(timeout) try: yield conn.cursor() # 直接返回游标对象 conn.commit() except: conn.rollback() finally: self.return_resource(conn)if __name__ == '__main__': pool = ConnectionPool(host='127.0.0.1', port=23316, user='root', password='123456', database='zrd', cursorclass=DictCursor) # with pool() as conn: with pool() as cur: cur.execute(\"\"\" SELECT * FROM `user`\"\"\") for res in cur.fetchall(): print res #!/usr/bin/env python# -- coding: utf-8 --# Time: 2017/2/28 12:03# Author: zhourudongimport queuefrom pymysql.cursors import DictCursorfrom contextlib import contextmanagerimport pymysqlclass ConnectionPool: def __init__(self, **kwargs): self.size = kwargs.pop('size', 10) # 允许最大的连接 self.idle = kwargs.pop('idle', 3) # 空闲连接 self.kwargs = kwargs self.length = 0 # 已用连接 self.connctions = queue.Queue(maxsize=self.idle) def _connect(self): if not self.connctions.full(): # 如果当前连接小于预留的连接则创建 conn = pymysql.connect(**self.kwargs) self.connctions.put(conn) # 放到连接池中 self.length += 1 else: raise RuntimeError('lot of connections') def _close(self, conn): conn.close() self.length -= 1 def get(self, timeout=None): if self.connctions.empty() and self.length &lt; self.size: # 如果连接池为空 或者已用连接小于设置连接数上限 self._connect() # 则创建连接 conn = self.connctions.get(timeout=timeout) conn.ping(reconnect=True) return conn def return_resource(self, conn): if self.connctions.full(): # 如果连接池中剩余的连接大于 设置连接上线)(连接池满则关闭, 否则把连接放到连接池中) self._close(conn) return self.connctions.put(conn) @contextmanager def __call__(self, timeout=None): conn = self.get(timeout) try: yield conn.cursor() conn.commit() except: conn.rollback() finally: self.return_resource(conn)if __name__ == '__main__': pool = ConnectionPool(host='127.0.0.1', port=23316, user='root', password='123456', database='zrd', cursorclass=DictCursor) # with pool() as conn: with pool() as cur: cur.execute(\"\"\" SELECT * FROM `user`\"\"\") re_dict = cur.fetchall() print(re_dict) # for res in re_dict: # print(res)","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python面向对象","date":"2017-02-20T02:48:22.000Z","path":"2017/02/20/27-python面向对象/","text":"类创建 class D: def __init__(self): print(slef) 实例化(创建对象) class B: def __init__(self, a, b, c, d): print(a) print(b) print(c) print(d) b = B(1,2,3,4) 创建对象使用 类名(init 函数除第一个参数外的参数列表) 创建对象的时候 实际执行了 init函数 首先创建对象 对象作为self参数传递给__init__函数 返回self class Door: def __init__(self, number, status): self.number = number self.status = status def open(self): # 方法 self.status = 'openning' def close(self): self.status = 'closed'door = Door(8, 'closed')# 当使用对象来调用的时候, 第一个参数会自动传入door.open() print(door.status) 作用域 class E: NAME = 'E' # 类的直接下级作用域,(类变量) def __init__(self,name): self.name = name # 关联到实例的变量(实例变量)e = E('e')print(e.NAME) # 返回 --&gt; Eprint(E.NAME) # 返回 --&gt; Ee2 = E('e2')print(e2.NAME)# 返回 --&gt; EE.NAME = 'new NAME'print(e.NAME)e.status = 0print(e.status) 类变量对类和实例都可见 所有实例共享类变量 Python 可动态的给对象增减属性 当给实例的类变量赋值时，相当于动态的给这个实例增加了一个属性，覆盖了类变量 类装饰器def set_name(cls, name): cls.NAME = name return clsclass F: passF1 = set_name(F, 'F')f1 = F1()print(F1.NAME) # 返回'F'print(f1.NAME) # 返回'F'def set_name(name): def warp(cls): cls.NAME = name return cls return warp@set_name('G')class G: passprint(G.NAME) def print_name(cls): def get_name(self): return cls.__name__ cls.__get_name__ = get_name return cls@print_nameclass H: passh = H()print(h.__get_name__()) 类装饰器通常用于给类增加属性 方法都是类级类方法、静态方法方法的定义都是类级的，但是有的方法使用实例调用，有的方法使用类来调用 ##### selfclass I: def print(self): print('instance method') @classmethod # 当一个方法,被classmethod装饰的时候,第一个参数变成类本身，这样的方法叫类方法 def class_print(cls): print(id(cls)) print('class method') @staticmethod # 当一个方法被stasticmethod装饰的时候,不会自动传递第一个参数,这样的方法叫做静态方法 def static_method(): print('static method') def xxx_print(): print('this is a function')i =I()print(i.print()) # 实例调用实例方法时会自动传入self参数, self为实例本身 I.print(i)print(I.print()) # TypeError 实例方法只能由实例调用 当一个方法,被classmethod装饰的时候,第一个参数变成类本身，这样的方法叫类方法 当一个方法被stasticmethod装饰的时候,不会自动传递第一个参数,这样的方法叫做静态方法 实例调用实例方法时会自动传入self参数, self为实例本身 I.print(i) 实例方法只能由实例调用类方法 class I: def print(self): print('instance method') @classmethod # 当一个方法,被classmethod装饰的时候,第一个参数变成类本身，这样的方法叫类方法 def class_print(cls): print(id(cls)) print('class method') @staticmethod # 当一个方法被stasticmethod装饰的时候,不会自动传递第一个参数,这样的方法叫做静态方法 def static_method(): print('static method') def xxx_print(): print('this is a function') I.class_print()# 返回6010184class methodprint(id(I))# 返回6993224i =I()i.class_print() # 类方法可以被实例使用，并且被实例使用时，传入的第一个参数还是类返回6993224class methodI.static_method() # 返回 -&gt; static methodprint(i.static_method()) # 返回 -&gt; static methodprint(I.xxx_print()) # 返回 -&gt;this is a functionprint(i.xxx_print()) # TypeError 报错 访问控制(私有属性 方法)class Door: def __init__(self, number, status): self.number = number self.__status = status # 双下划线开始， 非双下划綫结尾的都是私有的， 在类外部无法访问 def open(self): # 方法 self.__status = 'opening' def close(self): self.__status = 'closed' def status(self): return self.__status def __set_number(self, number): # 双下滑先开始， 非双下划线结尾的方法也是私有方法 self.number = numberdoor =Door(8, 'closed')# 报错door.__status # AttributeError: 'Door' object has no attribute '__status'print(door.__status) # a new status cloesdprint(door.status()) # closedprint(door.open()) # None 所有双下划线开始，非双下划线结尾的成员，都是私有成员 #coding:utf8class Door: def __init__(self, number, status): self.number = number self.__status = status # 双下划线开始， 非双下划綫结尾的都是私有的， 在类外部无法访问 def open(self): # 方法 self.__status = 'opening' def close(self): self.__status = 'closed' def status(self): return self.__status def __set_number(self, number): # 双下滑先开始， 非双下划线结尾的方法也是私有方法 self.number = numberdoor =Door(8, 'closed')print(door._Door__status) # closeddoor._Door__status = 'opennning'print(door.status()) # opennning _类名 + 带双下划线的属性 Python的私有成员是通过改名实现的 严格的说， Python里没有真正私有成员除非真的有必要，并且清除明白的知道会有什么后果，否则不要用这个黑魔法90%的程序员有生之年用不到 私有方法定义是一种惯用法， 标记此成员为私有， 但是解释器不不做任何处理 class Door: def __init__(self, number, status): self.xxx = 3 self.__number = number self.__status = status # 双下划线开始， 非双下划綫结尾的都是私有的， 在类外部无法访问 def open(self): # 方法 self.__status = 'opening' def close(self): self.__status = 'closed' @property # property 装饰器会把一个仅有self参数的函数，变成一个属性， 属性的值，为方法的返回值 def status(self): return self.__status def __set_number(self, number): # 双下滑先开始， 非双下划线结尾的方法也是私有方法 self.__number = number # @property# def number(self):# return self.__number # @number.setter # property setter 装饰器， 可以把一个方法转化为对此赋值，但此方法有一定要求： # # 1.同名 2.必须接收两个参数 self 和 value， value为所赋的值# def number(self, number):# if isinstance(number, int) and number &gt; 0 and number &lt; 10000:# self.__number = number # @number.deleter# def number(self):# print('cant remove number property') number = property(lambda self: self.__number, lambda self, value: self.__number = value, lambda self: print('cant remove number property')) 类的继承class Base: def base_print(self): print('base')class A(Base): # 在类名后加括号 括号中是继承列表， 称之为父类或者基类或者超类 def a_print(self): print('a')a = A()print(a.a_print()) # aprint(a.base_print()) # base# 继承一个明显的好处就是可以获取父类的属性和方法 class Base: PUBLIC_CALSS_VAR = 'PUBLIC_CLASS_VAR' __PRIVATE_CLASS_VAR = 'PRIVATE_CLASS_VAR' def __init__(self): self.public_instance_var = 'public_instance_var' self.__private_instance_var = 'private__instance_var' @classmethod def public_class_name(cls): return 'public_class_method' @classmethod def __private_classmethod(cls): return 'private_classmethod' @staticmethod def public_static_method(): return 'public static method' @staticmethod def __private_static_method(): return 'private static method' def public_instance_method(self): return 'public_instance_method' def __private_instance_method(self): return 'private_instance_method'class Sub(Base): def print(self): print(self.PUBLIC_CALSS_VAR)sub = Sub()print(sub.print()) # PUBLIC_CLASS_VAR# -----------------------------------------------class Sub2(Base): def print(self): print(self.__PRIVATE_CLASS_VAR)sub2 = Sub2()print(sub2.print()) # AttributeError: 'Sub2' object has no attribute '_Sub2__PRIVATE_CLASS_VAR'# -----------------------------------------------class Sub3(Base): def print(self): print(self.public_instance_var)sub3 =Sub3()print(sub3.print()) # public_instance_var 凡是公有的都能继承 凡是私有的都不能继承 原来是什么，继承过来还是什么 方法重写class Base: def __init__(self): self.__a = 4 def print(self): print('Base.print') @classmethod def cls_print(cls): print('Base.cls_print')class Sub(Base): def print(self): ## 当子类和父类有同名成员的时候， 子类的成员会覆盖父类的同名成员 print('Sub.print')sub = Sub()print(sub.print()) # Sub.print 当子类和父类有同名成员的时候， 子类的成员会覆盖父类的同名成员 class Base: NAME = 'BASE' class Sub(Base): NAME = 'SUB' def print(self): print(self.NAME) print(super(Sub, Sub).NAME) # 获取父类的类变量 print(Base.NAME) Sub().print()# 返回SUBBASE super 对象只能获取类的属性 多继承class Base: passclass Sub(Base): passclass Base2: passclass Sub2(Base, Base2): # 多继承 在继承列表里存在多个类的时候表示多继承 pass 应该尽量避免多继承 多继承会对程序的心智负担造成非常大的压力 Python是解释执行的，一段代码只有执行到的时候，才知道有没有错 多继承是一剂毒药 类装饰器 设置一些类变量 可以给类增加一些方法 Mixin","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python文件操作","date":"2017-02-18T04:25:16.000Z","path":"2017/02/18/26-python文件操作/","text":"文件操作 目录操作创建目录import osmkdir(path, mode=511, *, dir_fd=None)# os.mkdir 不能递归的创建目录os.mkdir('/tmp/test2/test3') # os.makedirs 可以递归的创建目录 (类似linux mkdir -p)os.makedirs('/tmp/test2/test3') # mkdir -p /tmp/test2/test3# 当目录已经存在时， mkdir 和makedirs都会抛出异常# 只能删除空目录，不能删除非空目录os.rmdir('/tmp/test') # rmdir /tmp/test# 递归的删除空目录os.removedirs('/tmp/test2/test3/') # rm -rf /tmp/test 递归删除目录import shutilshutil.rmtree('/tmp/test')# 移动shutil.move('/tmp/test2', '/tmp/test') # 和mv命令的表现完全一致# 复制shutil.copytree('/tmp/a', '/tmp/d', symlinks=True) # cp -rpP 遍历目录import os# 目录列表os.listdir() # ls -a 路径相关的操作basenamedirnamejoinsplitabspathgetcwdos.path.join('/', 'tmp', 'd', 'a')'/tmp/d/a'# -&gt; (dirname, basename)os.path.split('/tmp/d/a/file') 序列化、反序列化 序列化 对象 -&gt; str/bytes 反序列化 str/bytes -&gt; 对象 import pickle# 序列化pickle.dumps(1) pickle.dumps(&#123;'a': 1&#125;)b'\\x80\\x03&#125;q\\x00X\\x01\\x00\\x00\\x00aq\\x01K\\x01s.'# pickle.dump -&gt; fileobjecpickle.dumps -&gt; bytespickle 的序列化与反序列化，能针对大多数的Python对象包括方法pickle是Python特有的， 只能在Python之间传递数据使用import json# json 仅仅可以序列化 int float, bool, None, str, list dict","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python 奇淫巧技","date":"2017-02-17T02:13:05.000Z","path":"2017/02/17/25-python-奇淫巧技/","text":"tail -f 的粗略方法while 1: where = file.tell() # 指针位置 line = file.readline() # 一次读取一行 if not line: # 如果为空 time.sleep(1) # 休眠一秒 file.seek(where) else: print line, # already has newline","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python正则re","date":"2017-02-16T11:19:00.000Z","path":"2017/02/16/24-python正则re/","text":"''' 字符匹配:'''1）单个字符:. 任意的一个字符a|b 字符a或字符b[afg] a或者f或者g的一个字符 [0-4] 0-4范围内的一个字符[a-f] a-f范围内的一个字符[^m] 不是m的一个字符\\s 一个空格\\S 一个非空格\\d [0-9] \\d&#123;4&#125; 4位数\\D [^0-9] 取反\\w [0-9a-zA-Z]\\W [^0-9a-zA-Z]'''次数匹配'''紧跟在单个字符之后，表示多个这样类似的字符* 重复 &gt;=0 次+ 重复 &gt;=1 次? 重复 0或者1 次&#123;m&#125; 重复m次。比如说 a&#123;4&#125;相当于aaaa，再比如说[1-3]&#123;2&#125;相当于[1-3][1-3]&#123;m, n&#125; 重复m到n次。比如说a&#123;2, 5&#125;表示a重复2到5次。小于m次的重复，或者大于n次的重复都不符合条件。'''位置匹配'''^ 字符串的起始位置$ 字符串的结尾位置'''分组'''import rem = re.search(\"(?P&lt;str&gt;\\w+)_(?P&lt;year&gt;\\d&#123;4&#125;)\", \"output_1986.txt\") #(?P&lt;name&gt;...) 为group命名print(m.group(\"year\",\"str\"))('1986', 'output') compile 函数 match 函数 search 函数 findall 函数 finditer 函数 split 函数 sub 函数 subn 函数 使用方式 生成模式import repattern = re.compile(r'\\d+')dir(pattern)...,'findall', 'finditer', 'flags', 'fullmatch', 'groupindex', 'groups', 'match', 'pattern', 'scanner', 'search', 'split', 'sub', 'subn' match方法match 方法用于查找字符串的头部（也可以指定起始位置），它只一次匹配,只要匹配成功,不再继续查找match(string[, pos[, endpos]]) #coding:utf8&gt;&gt;&gt; import re&gt;&gt;&gt; pattern = re.compile(r'\\d+') # 匹配数字&gt;&gt;&gt; m = pattern.match('one12twothree34four')&gt;&gt;&gt; print mNone&gt;&gt;&gt; m = pattern.match('one12twothree34four', 2, 10) # 从e开始配&gt;&gt;&gt; print mNone&gt;&gt;&gt; m = pattern.match('one12twothree34four', 3, 10) # 从1开始匹配&gt;&gt;&gt; print m&lt;_sre.SRE_Match object at 0x7f9321cea440&gt;&gt;&gt;&gt; m.group(0) # 匹配到字符串 0 0可以忽略'12'&gt;&gt;&gt; m.start(0) # 匹配到第一个字符的位置(索引)3&gt;&gt;&gt; m.end(0)5&gt;&gt;&gt; m.span(0) # 匹配到的区间(3, 5)# -----------------------------------# 匹配英文字母# ----------------------------------&gt;&gt;&gt; import re&gt;&gt;&gt; pattern = re.compile(r'([a-z]+) ([a-z]+)', re.I) # re.I 表示忽略大小写&gt;&gt;&gt; m = pattern.match('Hello World Wide Web')&gt;&gt;&gt; m.group(0) # 返回匹配成功的整个子串'Hello World'&gt;&gt;&gt; m.span(0) # 返回匹配成功的整个子串的索引(0, 11)&gt;&gt;&gt; m.group(1) # 返回第一个分组匹配成功的子串'Hello'&gt;&gt;&gt; m.span(1) # 返回第一个分组匹配成功的子串的索引(0, 5)&gt;&gt;&gt; m.group(2) # 返回第二个分组匹配成功的子串'World'&gt;&gt;&gt; m.span(2) # 返回第二个分组匹配成功的子串(6, 11)&gt;&gt;&gt; m.groups() # 等价于 (m.group(1), m.group(2), ...)('Hello', 'World')&gt;&gt;&gt; m.group(3) # 不存在第三个分组Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;IndexError: no such group search 方法search 方法用于查找字符串的任何位置，它也是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果，它的一般使用形式如下：search(string[, pos[, endpos]]) &gt;&gt;&gt; import re&gt;&gt;&gt; pattern = re.compile('\\d+')&gt;&gt;&gt; m = pattern.search('one12twothree34four') # 这里如果使用 match 方法则不匹配&gt;&gt;&gt; m&lt;_sre.SRE_Match object at 0x7f9321cea440&gt;&gt;&gt;&gt; m = pattern.search('one12twothree34four', 10, 30) # 指定字符串区间&gt;&gt;&gt; m&lt;_sre.SRE_Match object at 0x7f9321cea510&gt;&gt;&gt;&gt; m.group()'34'&gt;&gt;&gt; m.span()(13, 15) 例子 # -*- coding: utf-8 -*-import re# 将正则表达式编译成 pattern对象pattern = re.compile(r'\\d+')# 使用 search() 查找匹配的子串，不存在匹配的子串时将返回 None# 这里使用 match() 无法成功匹配m = pattern.search('hello 123456 789')if m: # 使用 Match 获得分组信息 print 'matching string:', m.group() print 'position:', m.span()# 返回结果:matching string: 123456position: (6, 12) findall方法上面的 match 和 search 方法都是一次匹配，只要找到了一个匹配的结果就返回。然而，在大多数时候，我们需要搜索整个字符串，获得所有匹配的结果。 findall 方法的使用形式如下： findall(string[, pos[, endpos]]) 例子: import repattern = re.compile(r'\\d+') # 查找数字result1 = pattern.findall('hello 123456 789')result2 = pattern.findall('one1two2three3four4', 0, 10)print result1print result2# 返回['123456', '789']['1', '2'] finditer 方法finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。# -*- coding: utf-8 -*-import repattern = re.compile(r'\\d+')result_iter1 = pattern.finditer('hello 123456 789')result_iter2 = pattern.finditer('one1two2three3four4', 0, 10)print type(result_iter1)print type(result_iter2)print 'result1...'for m1 in result_iter1: # m1 是 Match 对象 print 'matching string: &#123;&#125;, position: &#123;&#125;'.format(m1.group(), m1.span())print 'result2...'for m2 in result_iter2: print 'matching string: &#123;&#125;, position: &#123;&#125;'.format(m2.group(), m2.span())# 返回结果type 'callable-iterator'&gt;&lt;type 'callable-iterator'&gt;result1...matching string: 123456, position: (6, 12)matching string: 789, position: (13, 16)result2...matching string: 1, position: (3, 4)matching string: 2, position: (7, 8) split 方法split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：split(string[, maxsplit]) import rep = re.compile(r'[\\s\\,\\;]+')print p.split('a,b;; c d')# 执行结果：['a', 'b', 'c', 'd'] sub方法sub 方法用于替换。它的使用形式如下：sub(repl, string[, count]) 其中，repl 可以是字符串也可以是一个函数： 如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 \\id 的形式来引用分组，但不能使用编号 0； 如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。 import rep = re.compile(r'(\\w+) (\\w+)')s = 'hello 123, hello 456'def func(m): return 'hi' + ' ' + m.group(2)print p.sub(r'hello world', s) # 使用 'hello world' 替换 'hello 123' 和 'hello 456'print p.sub(r'\\2 \\1', s) # 引用分组print p.sub(func, s)print p.sub(func, s, 1) # 最多替换一次# 执行结果：hello world, hello world123 hello, 456 hellohi 123, hi 456hi 123, hello 456 subn 方法subn 方法跟 sub 方法的行为类似，也用于替换。它的使用形式如下： subn(repl, string[, count]) 它返回一个元组： (sub(repl, string[, count]), 替换次数) 看看例子： import rep = re.compile(r'(\\w+) (\\w+)')s = 'hello 123, hello 456'def func(m): return 'hi' + ' ' + m.group(2)print p.subn(r'hello world', s)print p.subn(r'\\2 \\1', s)print p.subn(func, s)print p.subn(func, s, 1) 执行结果： ('hello world, hello world', 2)('123 hello, 456 hello', 2)('hi 123, hi 456', 2)('hi 123, hello 456', 1) 其他函数事实上，使用 compile 函数生成的 Pattern 对象的一系列方法跟 re 模块的多数函数是对应的，但在使用上有细微差别。 match 函数match 函数的使用形式如下： re.match(pattern, string[, flags]): 其中，pattern 是正则表达式的字符串形式，比如 \\d+, [a-z]+。 而 Pattern 对象的 match 方法使用形式是： match(string[, pos[, endpos]]) 可以看到，match 函数不能指定字符串的区间，它只能搜索头部，看看例子： import rem1 = re.match(r'\\d+', 'One12twothree34four')if m1: print 'matching string:',m1.group()else: print 'm1 is:',m1m2 = re.match(r'\\d+', '12twothree34four')if m2: print 'matching string:', m2.group()else: print 'm2 is:',m2 执行结果： m1 is: Nonematching string: 12 search 函数search 函数的使用形式如下： re.search(pattern, string[, flags]) search 函数不能指定字符串的搜索区间，用法跟 Pattern 对象的 search 方法类似。 findall 函数findall 函数的使用形式如下： re.findall(pattern, string[, flags]) findall 函数不能指定字符串的搜索区间，用法跟 Pattern 对象的 findall 方法类似。 看看例子： import reprint re.findall(r'\\d+', 'hello 12345 789')# 输出['12345', '789'] finditer 函数finditer 函数的使用方法跟 Pattern 的 finditer 方法类似，形式如下： re.finditer(pattern, string[, flags]) split 函数split 函数的使用形式如下： re.split(pattern, string[, maxsplit]) sub 函数sub 函数的使用形式如下： re.sub(pattern, repl, string[, count]) subn 函数subn 函数的使用形式如下： re.subn(pattern, repl, string[, count]) 到底用哪种方式从上文可以看到，使用 re 模块有两种方式： 使用 re.compile 函数生成一个 Pattern 对象，然后使用 Pattern 对象的一系列方法对文本进行匹配查找； 直接使用 re.match, re.search 和 re.findall 等函数直接对文本匹配查找； 下面，我们用一个例子展示这两种方法。 先看第 1 种用法： import re# 将正则表达式先编译成 Pattern 对象pattern = re.compile(r'\\d+')print pattern.match('123, 123')print pattern.search('234, 234')print pattern.findall('345, 345') 再看第 2 种用法： import reprint re.match(r'\\d+', '123, 123')print re.search(r'\\d+', '234, 234')print re.findall(r'\\d+', '345, 345') 如果一个正则表达式需要用到多次（比如上面的 \\d+），在多种场合经常需要被用到，出于效率的考虑，我们应该预先编译该正则表达式，生成一个 Pattern 对象，再使用该对象的一系列方法对需要匹配的文件进行匹配；而如果直接使用 re.match, re.search 等函数，每次传入一个正则表达式，它都会被编译一次，效率就会大打折扣。 因此，我们推荐使用第 1 种用法。 匹配中文在某些情况下，我们想匹配文本中的汉字，有一点需要注意的是，中文的 unicode 编码范围 主要在 [\\u4e00-\\u9fa5]，这里说主要是因为这个范围并不完整，比如没有包括全角（中文）标点，不过，在大部分情况下，应该是够用的。 假设现在想把字符串 title = u&#39;你好，hello，世界&#39; 中的中文提取出来，可以这么做： # -*- coding: utf-8 -*-import retitle = u'你好，hello，世界'pattern = re.compile(ur'[\\u4e00-\\u9fa5]+')result = pattern.findall(title)print result 注意到，我们在正则表达式前面加上了两个前缀 ur，其中 r 表示使用原始字符串，u 表示是 unicode 字符串。 执行结果: [u&apos;\\u4f60\\u597d&apos;, u&apos;\\u4e16\\u754c&apos;] 贪婪匹配在 Python 中，正则匹配默认是贪婪匹配（在少数语言中可能是非贪婪），也就是匹配尽可能多的字符。 比如，我们想找出字符串中的所有 div 块： import recontent = 'aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc'pattern = re.compile(r'&lt;div&gt;.*&lt;/div&gt;')result = pattern.findall(content)print result 执行结果： [&apos;&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;&apos;] 由于正则匹配是贪婪匹配，也就是尽可能多的匹配，因此，在成功匹配到第一个 时，它还会向右尝试匹配，查看是否还有更长的可以成功匹配的子串。 如果我们想非贪婪匹配，可以加一个 ?，如下： import recontent = 'aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc'pattern = re.compile(r'&lt;div&gt;.*?&lt;/div&gt;') # 加上 ?result = pattern.findall(content)print result 结果： [&apos;&lt;div&gt;test1&lt;/div&gt;&apos;, &apos;&lt;div&gt;test2&lt;/div&gt;&apos;] 小结 re 模块的一般使用步骤如下： 使用 compile 函数将正则表达式的字符串形式编译为一个 Pattern 对象； 通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果（一个 Match 对象）； 最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作； Python 的正则匹配默认是贪婪匹配。 参考资料 Python正则表达式指南 正则表达式 - 廖雪峰的官方网站 ethan","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python装饰器","date":"2017-02-16T09:26:05.000Z","path":"2017/02/16/23-python装饰器/","text":"# coding:utf8'''''''''------------------ 基本装饰器 ------------------ Start'''''' 一般写法''''''$$$$$$$$$$$$$$$$$$$$$ Start $$$$$$$$$$$$$$$$$$$$$'''def hello(): return 'hello world!'def makeitalic(func): def wrapped(): return '&lt;i&gt;' + func() + '&lt;/i&gt;' return wrappedhello = makeitalic(hello) # 此步骤返回 wrapped 变量(wrapped函数,尚未执行)，print hello() # 调用方法后wrapped函数是执行hello()函数,print hello.__name__ # 而 hello.__name__ 隐性变成wrapped&lt;!-- more --&gt;'''解析: 1、将hello函数当做参数传给makeitalic函数 2、makeitalic中wrapped函数给func()函数结果加上 &lt;i&gt; &lt;/i&gt;标签, 返回 3、makeitalic 最终返回的是 return '&lt;i&gt;' + func() + '&lt;/i&gt;' 4、makeitalic(func) 被称为装饰器,对hello进行装饰,返回一个变量(函数),赋值给hello''''''$$$$$$$$$$$$$$$$$$$$$ End $$$$$$$$$$$$$$$$$$$$$'''''' 等价于(语法糖简略写法) '''def makeitalic(func): def wrapped(): return '&lt;i&gt;' + func() + '&lt;/i&gt;' return wrapped@makeitalicdef hello(): return 'hello world'print hello()''' --------------------- 一般使用形式 --------------------- Start'''@decoratordef func(): pass# 等价于下面的形式：def func(): passfunc = decorator(func)# 装饰器可以定义多个，离函数定义最近的装饰器先被调用@decorator_one@decorator_twodef func(): pass# 等价于def func(): passfunc = decorator_one(decorator_two(func))''' --------------------- 一般使用形式 --------------------- End''''''------------------ 基本装饰器 ------------------ End''''''------------------ 对带参数的函数进行装饰 ------------------ Start'''def makeitalic(func): def wrapped(*args, **kwargs): ret = func(*args, **kwargs) return '&lt;i&gt;' + ret + '&lt;/i&gt;' return wrapped@makeitalicdef hello(name): return \"hello %s\" % name@makeitalicdef hello_2(name1, name2): return 'hello %s, %s.' %(name1, name2)print hello('java')print hello_2('c++','python')# 返回值'''&lt;i&gt;hello java&lt;/i&gt;&lt;i&gt;hello c++, python.&lt;/i&gt;''''''------------------ 装饰器的副作用 ------------------ Start'''def makeitalic(func): def wrapped(): return \"&lt;i&gt;\" + func() + \"&lt;/i&gt;\" return wrapped@makeitalicdef hello(): return 'hello world'print hello.__name__'''函数 hello 被 makeitalic 装饰后，它的函数名称已经改变了：返回:wrapped'''# 修改from functools import wrapsdef makeitalic(func): @wraps(func) # 加上 wraps 装饰器 def wrapped(): return \"&lt;i&gt;\" + func() + \"&lt;/i&gt;\" return wrapped@makeitalicdef hello(): return 'hello world'print hello.__name__''''hello'''''''------------------ 装饰器的副作用 ------------------ End'''","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python环境","date":"2017-02-15T08:44:51.000Z","path":"2017/02/15/22-python环境/","text":"what python m ENV 参考网址:http://seisman.info/python-pyenv.htmlhttp://www.cnblogs.com/npumenglei/p/3719412.html virtualenvwrapper","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python时间格式处理","date":"2017-02-15T03:54:13.000Z","path":"2017/02/15/21-python时间格式处理/","text":"## 得到unix时间import time,datetime# 获取10位unix时间戳(精确到秒)In [21]: int(time.mktime(datetime.datetime.now().timetuple()))Out[21]: 1487127939uninx_time = int(time.mktime(datetime.datetime.now().timetuple()))## unix时间改为strIn [34]: time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(uninx_time))Out[34]: '2017-02-15 11:22:18' 时间差## 获取十天前的时间In [2]: import datetimeIn [3]: datetime.datetime.now()+datetime.timedelta(days=-10) Out[3]: datetime.datetime(2017, 2, 12, 17, 23, 23, 15818)","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"错误汇总","date":"2017-02-11T06:20:37.000Z","path":"2017/02/11/20-错误汇总/","text":"字典取元素for h_id, p_id in rt_list_: print assets_[h_id] if assets_[h_id] not in assets_projects: assets_projects[assets_[h_id]] = &#123;project_name_id[p_id]: p_id&#125; elif assets_[h_id] in assets_projects: assets_projects[assets_[h_id]].update(&#123;project_name_id[p_id]: p_id&#125;)# 没有考虑到key不存在时会报KeyError# 改版dict.get()assets_projects = &#123;&#125;for h_id, p_id in rt_list_: if not assets_projects.get(assets_[h_id]): assets_projects[assets_[h_id]] = &#123;project_name_id[p_id]: p_id&#125; elif assets_projects.get(assets_[h_id]): assets_projects[assets_[h_id]].update(&#123;project_name_id[p_id]: p_id&#125;)print assets_projects 数据库授权1.先 GRANT ALL ON 2.再 GRANT SELECT 以上方法失误必须REVOKE 收回权限再次授权,否则无法生效","tags":[{"name":"杂项","slug":"杂项","permalink":"http://zhourudong.cn/tags/杂项/"}]},{"title":"python列表","date":"2017-02-04T08:36:17.000Z","path":"2017/02/04/19-python列表/","text":"列表所有方法 列表所有方法","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"vim基本设置","date":"2017-01-21T03:39:57.000Z","path":"2017/01/21/17-vim基本设置/","text":"mkdir ~/.vim/vim ~/.vim/setting.vimsetl expandtabsetl tabstop=4setl shiftwidth=4setl softtabstop=4","tags":[{"name":"vim tool","slug":"vim-tool","permalink":"http://zhourudong.cn/tags/vim-tool/"}]},{"title":"python集合","date":"2017-01-11T08:22:33.000Z","path":"2017/01/11/16-python集合/","text":"# 交集#方法一:a=[2,3,4,5]b=[2,5,8]tmp = [val for val in a if val in b]print tmp#[2, 5]#方法二print list(set(a).intersection(set(b)))# 差集a = [1, 2, 3]b = [3, 4, 5]print list(set(b).difference(set(a))) # b中有而a中没有的# 并集print list(set(a).union(set(b)))","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python 递归","date":"2016-11-29T11:25:22.000Z","path":"2016/11/29/14-python-递归/","text":"[TOC] 求阶乘def jiecheng(n): if n ==1: return 1 return n * jiecheng( n - 1)In [15]: jiecheng(2)Out[15]: 2","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"python modules","date":"2016-11-29T08:36:08.000Z","path":"2016/11/29/13-python-modules/","text":"md5加密解密#encoding: utf-8import hashlibdef md5_str(string, salt=''): md5 = hashlib.md5() if salt != '': string = '%s$$%s' % (salt, string) md5.update(str(string)) return md5.hexdigest()def md5_file(path): fhandler = open(path, 'rb') md5 = hashlib.md5() for line in fhandler: md5.update(str(line)) fhandler.close() return md5.hexdigest()if __name__ == '__main__': for i in range(10): print md5_str('abc', i)","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"flask","date":"2016-11-29T02:33:06.000Z","path":"2016/11/29/12-flask/","text":"flask flask基本一个示例： #conding:utf8from flask import Flaskapp = Flask('todo-list')app.debug = True@app.route('/')def hello(): return 'hello, world!'if __name__ == \"__main__\": app.run(host='0.0.0.0',port=8011) 模板渲染#conding:utf8from flask import Flask, render_templateapp = Flask('todo-list')app.debug = True@app.route('/')def hello(): return render_template('hello.html')if __name__ == \"__main__\": app.run(host='0.0.0.0',port=8011) &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;H1&gt;Welcome,Jim&lt;/H1&gt; &lt;p&gt;this is my first page&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 变量URL参数from flask import Flaskapp = Flask(__name__)@app.route('/user/&lt;name&gt;')def user(name): return '&lt;h1&gt;Hello, &#123;0&#125;!&lt;/h1&gt;'.format(name)if __name__ == '__main__': app.run(debug=True) 模板渲染from flask import Flask, render_templateapp = Flask(__name__)@app.route('/')def index(): return render_template('index.html') 模板渲染列表├── templates│ └── index.html└── weather.py# 模板中元素的渲染列表from flask import Flask, render_templateapp = Flask(__name__)@app.route('/')def index(): months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] return render_template('index.html', city='Portland, OR', months=months) &lt;h1&gt;Weather Averages&lt;/h1&gt;&lt;h2&gt;&#123;&#123; city &#125;&#125;&lt;/h2&gt;&lt;hr&gt;&lt;table&gt; &lt;tr&gt; &lt;th&gt;Month&lt;/th&gt; &lt;th&gt;Min&lt;/th&gt; &lt;th&gt;Max&lt;/th&gt; &lt;th&gt;Rainfall&lt;/th&gt; &lt;/tr&gt; &#123;% for month in months %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; month &#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125;&lt;/table&gt; 渲染数据结构 for#coding:utf-8from flask import Flask, render_templateapp = Flask(__name__)@app.route('/')def index(): city = u'北京' months = ['1', '2', '3', '4','5', '6', '7', '8', '9', '10', '11', '12'] weather = &#123; '1': &#123;'min': 38, 'max': 47, 'rain': 6.14&#125;, '2': &#123;'min': 38, 'max': 51, 'rain': 4.79&#125;, '3': &#123;'min': 41, 'max': 56, 'rain': 4.5&#125;, '4': &#123;'min': 44, 'max': 61, 'rain': 3.4&#125;, '5': &#123;'min': 49, 'max': 67, 'rain': 2.55&#125;, '6': &#123;'min': 53, 'max': 73, 'rain': 1.69&#125;, '7': &#123;'min': 57, 'max': 80, 'rain': 0.59&#125;, '8': &#123;'min': 58, 'max': 80, 'rain': 0.71&#125;, '9': &#123;'min': 54, 'max': 75, 'rain': 1.54&#125;, '10': &#123;'min': 48, 'max': 63, 'rain': 3.42&#125;, '11': &#123;'min': 41, 'max': 52, 'rain': 6.74&#125;, '12': &#123;'min': 36, 'max': 45, 'rain': 6.94&#125; &#125; return render_template('index.html', city=city, months=months,weather=weather)if __name__ == '__main__': app.run(debug=True) &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;sddsddd&lt;/title&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;天气平均值&lt;/h1&gt; &lt;h2&gt;&#123;&#123;city&#125;&#125;&lt;/h2&gt; &lt;table border=\"1px\"&gt; &lt;tr&gt; &lt;th&gt;月份&lt;/th&gt; &lt;th&gt;最大&lt;/th&gt; &lt;th&gt;最小&lt;/th&gt; &lt;th&gt;平均值&lt;/th&gt; &lt;/tr&gt; &#123;% for month in months %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; month &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;weather[month]['max']&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;weather[month]['min']&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;weather[month]['rain']&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor%&#125; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 模板中使用条件判断 if#coding:utf-8from flask import Flask, render_templateapp = Flask(__name__)@app.route('/')def index(): city = u'北京' months = ['1', '2', '3', '4','5', '6', '7', '8', '9', '10', '11', '12'] weather = &#123; '1': &#123;'min': 38, 'max': 47, 'rain': 6.14&#125;, '2': &#123;'min': 38, 'max': 51, 'rain': 4.79&#125;, '3': &#123;'min': 41, 'max': 56, 'rain': 4.5&#125;, '4': &#123;'min': 44, 'max': 61, 'rain': 3.4&#125;, '5': &#123;'min': 49, 'max': 67, 'rain': 2.55&#125;, '6': &#123;'min': 53, 'max': 73, 'rain': 1.69&#125;, '7': &#123;'min': 57, 'max': 80, 'rain': 0.59&#125;, '8': &#123;'min': 58, 'max': 80, 'rain': 0.71&#125;, '9': &#123;'min': 54, 'max': 75, 'rain': 1.54&#125;, '10': &#123;'min': 48, 'max': 63, 'rain': 3.42&#125;, '11': &#123;'min': 41, 'max': 52, 'rain': 6.74&#125;, '12': &#123;'min': 36, 'max': 45, 'rain': 6.94&#125; &#125; highlight = &#123;'min': 40, 'max': 80, 'rain': 5&#125; return render_template('index.html', city=city, months=months,weather=weather, highlight=highlight)if __name__ == '__main__': app.run(debug=True) &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;sddsddd&lt;/title&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;天气平均值&lt;/h1&gt; &lt;h2&gt;&#123;&#123;city&#125;&#125;&lt;/h2&gt; &lt;table border=\"1px\"&gt; &lt;tr&gt; &lt;th&gt;月份&lt;/th&gt; &lt;th&gt;最大&lt;/th&gt; &lt;th&gt;最小&lt;/th&gt; &lt;th&gt;平均值&lt;/th&gt; &lt;/tr&gt; &#123;% for month in months %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; month &#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;!-- 如果 每个月的值满足表达式 小于等于 则对其加粗显示 --&gt; &#123;% set hl = weather[month]['min'] &lt;= highlight['min'] %&#125; &#123;% if hl %&#125;&lt;b&gt;&#123;% endif %&#125; &#123;&#123; weather[month]['min'] &#125;&#125; &#123;% if hl %&#125;&lt;/b&gt;&#123;% endif %&#125; &lt;/td&gt; &lt;td&gt; &#123;% set hl = weather[month]['max'] &gt;= highlight['max'] %&#125; &#123;% if hl %&#125;&lt;b&gt;&#123;% endif %&#125; &#123;&#123; weather[month]['max'] &#125;&#125; &#123;% if hl %&#125;&lt;/b&gt;&#123;% endif %&#125; &lt;/td&gt; &lt;td&gt; &#123;% set hl = weather[month]['rain'] &gt;= highlight['rain'] %&#125; &#123;% if hl %&#125;&lt;b&gt;&#123;% endif %&#125; &#123;&#123; weather[month]['rain'] &#125;&#125; &#123;% if hl %&#125;&lt;/b&gt;&#123;% endif %&#125; &lt;/td&gt; &lt;/tr&gt; &#123;% endfor%&#125; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 使用模板宏相当于py中的函数，函数再调用函数减少代码冗余量 #coding:utf-8from flask import Flask, render_templateapp = Flask(__name__)@app.route('/')def index(): city = u'北京' months = ['1', '2', '3', '4','5', '6', '7', '8', '9', '10', '11', '12'] weather = &#123; '1': &#123;'min': 38, 'max': 47, 'rain': 6.14&#125;, '2': &#123;'min': 38, 'max': 51, 'rain': 4.79&#125;, '3': &#123;'min': 41, 'max': 56, 'rain': 4.5&#125;, '4': &#123;'min': 44, 'max': 61, 'rain': 3.4&#125;, '5': &#123;'min': 49, 'max': 67, 'rain': 2.55&#125;, '6': &#123;'min': 53, 'max': 73, 'rain': 1.69&#125;, '7': &#123;'min': 57, 'max': 80, 'rain': 0.59&#125;, '8': &#123;'min': 58, 'max': 80, 'rain': 0.71&#125;, '9': &#123;'min': 54, 'max': 75, 'rain': 1.54&#125;, '10': &#123;'min': 48, 'max': 63, 'rain': 3.42&#125;, '11': &#123;'min': 41, 'max': 52, 'rain': 6.74&#125;, '12': &#123;'min': 36, 'max': 45, 'rain': 6.94&#125; &#125; highlight = &#123;'min': 40, 'max': 80, 'rain': 5&#125; return render_template('index.html', city=city, months=months, weather=weather,highlight=highlight)if __name__ == '__main__': app.run(debug=True) index.html&#123;% import 'macros.html' as macros %&#125;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;sddsddd&lt;/title&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;天气平均值&lt;/h1&gt; &lt;h2&gt;&#123;&#123;city&#125;&#125;&lt;/h2&gt; &lt;table border=\"1px\"&gt; &lt;tr&gt; &lt;th&gt;月份&lt;/th&gt; &lt;th&gt;最小&lt;/th&gt; &lt;th&gt;最大&lt;/th&gt; &lt;th&gt;降雨量&lt;/th&gt; &lt;/tr&gt; &#123;% for month in months %&#125; &#123;&#123; macros.weather_row(month, weather[month]['min'], weather[month]['max'], weather[month]['rain'], highlight['min'], highlight['max'], highlight['rain'] ) &#125;&#125; &#123;% endfor%&#125; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; macros.html&lt;!-- 定义函数 值与变量 当h1满足条件时加粗字体 --&gt;&#123;% macro weather_cell(value, hl) %&#125; &lt;td&gt; &#123;% if hl %&#125;&lt;b&gt;&#123;% endif %&#125; &#123;&#123; value &#125;&#125; &#123;% if hl %&#125;&lt;/b&gt;&#123;% endif %&#125; &lt;/td&gt;&#123;% endmacro %&#125;&#123;% macro weather_row(month, min, max, rain, hl_min, hl_max, hl_rain) %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; month &#125;&#125;&lt;/td&gt; &#123;&#123; weather_cell(min, min &lt;= hl_min) &#125;&#125; &#123;&#123; weather_cell(max, max &gt;= hl_max) &#125;&#125; &#123;&#123; weather_cell(rain, rain &gt;= hl_rain) &#125;&#125; &lt;/tr&gt;&#123;% endmacro %&#125;&lt;!-- 函数调用函数 当min 低于预定值时会加粗显示--&gt; 引用bootstrap到模板pip install flask-bootstrapapp.py#coding:utf-8from flask import Flask, render_templatefrom flask_bootstrap import Bootstrapapp = Flask(__name__)bootstrap = Bootstrap(app)@app.route('/')def index(): city = u'北京' months = ['1', '2', '3', '4','5', '6', '7', '8', '9', '10', '11', '12'] weather = &#123; '1': &#123;'min': 38, 'max': 47, 'rain': 6.14&#125;, '2': &#123;'min': 38, 'max': 51, 'rain': 4.79&#125;, '3': &#123;'min': 41, 'max': 56, 'rain': 4.5&#125;, '4': &#123;'min': 44, 'max': 61, 'rain': 3.4&#125;, '5': &#123;'min': 49, 'max': 67, 'rain': 2.55&#125;, '6': &#123;'min': 53, 'max': 73, 'rain': 1.69&#125;, '7': &#123;'min': 57, 'max': 80, 'rain': 0.59&#125;, '8': &#123;'min': 58, 'max': 80, 'rain': 0.71&#125;, '9': &#123;'min': 54, 'max': 75, 'rain': 1.54&#125;, '10': &#123;'min': 48, 'max': 63, 'rain': 3.42&#125;, '11': &#123;'min': 41, 'max': 52, 'rain': 6.74&#125;, '12': &#123;'min': 36, 'max': 45, 'rain': 6.94&#125; &#125; highlight = &#123;'min': 40, 'max': 80, 'rain': 5&#125; return render_template('index.html', city=city, months=months, weather=weather,highlight=highlight)if __name__ == '__main__': app.run(port=1012, debug=True) &#123;% extends 'bootstrap/base.html' %&#125;&#123;% import 'macros.html' as macros %&#125;&#123;% block title %&#125;Weather Averages for &#123;&#123; city &#125;&#125;&#123;% endblock %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Weather&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &lt;h1&gt;Weather Averages&lt;/h1&gt; &lt;h2&gt;&#123;&#123; city &#125;&#125;&lt;/h2&gt; &lt;table class=\"table table-hover\"&gt; &lt;tr&gt; &lt;th&gt;Month&lt;/th&gt; &lt;th&gt;Min&lt;/th&gt; &lt;th&gt;Max&lt;/th&gt; &lt;th&gt;Rainfall&lt;/th&gt; &lt;/tr&gt; &#123;% for month in months %&#125; &#123;&#123; macros.weather_row(month, weather[month]['min'], weather[month]['max'], weather[month]['rain'], highlight['min'], highlight['max'], highlight['rain']) &#125;&#125; &#123;% endfor %&#125; &lt;/table&gt; &lt;/div&gt; &#123;% endblock %&#125; macros.html&lt;!-- 定义函数 值与变量 当h1满足条件时加粗字体 --&gt;&#123;% macro weather_cell(value, hl) %&#125; &lt;td&#123;% if hl %&#125; class=\"warning\"&#123;% endif %&#125;&gt;&#123;&#123; value &#125;&#125;&lt;/td&gt;&#123;% endmacro %&#125;&#123;% macro weather_row(month, min, max, rain, hl_min, hl_max, hl_rain) %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; month &#125;&#125;&lt;/td&gt; &#123;&#123; weather_cell(min, min &lt;= hl_min) &#125;&#125; &#123;&#123; weather_cell(max, max &gt;= hl_max) &#125;&#125; &#123;&#123; weather_cell(rain, rain &gt;= hl_rain) &#125;&#125; &lt;/tr&gt;&#123;% endmacro %&#125;&lt;!-- 函数调用函数 当min 低于预定值时会加粗显示--&gt;&#123;% macro weather_cell(value, hl) %&#125; &lt;td&#123;% if hl %&#125; class=\"warning\"&#123;% endif %&#125;&gt;&#123;&#123; value &#125;&#125;&lt;/td&gt;&#123;% endmacro %&#125; 自定义404页面#coding:utf-8from flask import Flask, render_templatefrom flask_bootstrap import Bootstrapapp = Flask(__name__)bootstrap = Bootstrap(app)@app.route('/')def index(): city = u'北京' months = ['1', '2', '3', '4','5', '6', '7', '8', '9', '10', '11', '12'] weather = &#123; '1': &#123;'min': 38, 'max': 47, 'rain': 6.14&#125;, '2': &#123;'min': 38, 'max': 51, 'rain': 4.79&#125;, '3': &#123;'min': 41, 'max': 56, 'rain': 4.5&#125;, '4': &#123;'min': 44, 'max': 61, 'rain': 3.4&#125;, '5': &#123;'min': 49, 'max': 67, 'rain': 2.55&#125;, '6': &#123;'min': 53, 'max': 73, 'rain': 1.69&#125;, '7': &#123;'min': 57, 'max': 80, 'rain': 0.59&#125;, '8': &#123;'min': 58, 'max': 80, 'rain': 0.71&#125;, '9': &#123;'min': 54, 'max': 75, 'rain': 1.54&#125;, '10': &#123;'min': 48, 'max': 63, 'rain': 3.42&#125;, '11': &#123;'min': 41, 'max': 52, 'rain': 6.74&#125;, '12': &#123;'min': 36, 'max': 45, 'rain': 6.94&#125; &#125; highlight = &#123;'min': 40, 'max': 80, 'rain': 5&#125; return render_template('index.html', city=city, months=months, weather=weather,highlight=highlight)'''404页面'''@app.errorhandler(404)def not_found(e): return render_template('404.html')if __name__ == '__main__': app.run(port=1012, debug=True) base.html&#123;% extends 'bootstrap/base.html' %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Weather&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;%- block metas %&#125;&lt;meta charset=\"utf-8\"&gt;&#123;%- endblock metas %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &#123;% block page_content %&#125;&#123;% endblock %&#125; &lt;/div&gt;&#123;% endblock %&#125; macros.html&#123;% macro weather_cell(value, hl) %&#125; &lt;td&#123;% if hl %&#125; class=\"warning\"&#123;% endif %&#125;&gt;&#123;&#123; value &#125;&#125;&lt;/td&gt;&#123;% endmacro %&#125;&#123;% macro weather_row(month, min, max, rain, hl_min, hl_max, hl_rain) %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; month &#125;&#125;&lt;/td&gt; &#123;&#123; weather_cell(min, min &lt;= hl_min) &#125;&#125; &#123;&#123; weather_cell(max, max &gt;= hl_max) &#125;&#125; &#123;&#123; weather_cell(rain, rain &gt;= hl_rain) &#125;&#125; &lt;/tr&gt;&#123;% endmacro %&#125; index.html&#123;% extends 'base.html' %&#125;&#123;% import 'macros.html' as macros %&#125;&#123;% block title %&#125;Weather Averages for &#123;&#123; city &#125;&#125;&#123;% endblock %&#125;&#123;% block page_content %&#125; &lt;h1&gt;Weather Averages&lt;/h1&gt; &lt;h2&gt;&#123;&#123; city &#125;&#125;&lt;/h2&gt; &lt;table class=\"table table-hover\"&gt; &lt;tr&gt; &lt;th&gt;Month&lt;/th&gt; &lt;th&gt;Min&lt;/th&gt; &lt;th&gt;Max&lt;/th&gt; &lt;th&gt;Rainfall&lt;/th&gt; &lt;/tr&gt; &#123;% for month in months %&#125; &#123;&#123; macros.weather_row(month, weather[month]['min'], weather[month]['max'], weather[month]['rain'], highlight['min'], highlight['max'], highlight['rain']) &#125;&#125; &#123;% endfor %&#125; &lt;/table&gt;&#123;% endblock %&#125; 404.html&#123;% extends 'base.html' %&#125;&#123;% block title %&#125;Not Found&#123;% endblock %&#125;&#123;% block page_content %&#125; &lt;h1&gt;404 页面未找到&lt;/h1&gt;&#123;% endblock %&#125; url_for() 函数直接跳转到控制层某函数app.py#coding:utf-8from flask import Flask, render_templatefrom flask_bootstrap import Bootstrapapp = Flask(__name__)bootstrap = Bootstrap(app)@app.route('/')def index(): city = u'北京' months = ['1', '2', '3', '4','5', '6', '7', '8', '9', '10', '11', '12'] weather = &#123; '1': &#123;'min': 38, 'max': 47, 'rain': 6.14&#125;, '2': &#123;'min': 38, 'max': 51, 'rain': 4.79&#125;, '3': &#123;'min': 41, 'max': 56, 'rain': 4.5&#125;, '4': &#123;'min': 44, 'max': 61, 'rain': 3.4&#125;, '5': &#123;'min': 49, 'max': 67, 'rain': 2.55&#125;, '6': &#123;'min': 53, 'max': 73, 'rain': 1.69&#125;, '7': &#123;'min': 57, 'max': 80, 'rain': 0.59&#125;, '8': &#123;'min': 58, 'max': 80, 'rain': 0.71&#125;, '9': &#123;'min': 54, 'max': 75, 'rain': 1.54&#125;, '10': &#123;'min': 48, 'max': 63, 'rain': 3.42&#125;, '11': &#123;'min': 41, 'max': 52, 'rain': 6.74&#125;, '12': &#123;'min': 36, 'max': 45, 'rain': 6.94&#125; &#125; highlight = &#123;'min': 40, 'max': 80, 'rain': 5&#125; return render_template('index.html', city=city, months=months, weather=weather,highlight=highlight)'''404页面'''@app.errorhandler(404)def not_found(e): return render_template('404.html')if __name__ == '__main__': app.run(port=1012, debug=True) index.html&#123;% extends 'bootstrap/base.html' %&#125;&#123;% import 'macros.html' as macros %&#125;&#123;% block title %&#125;Weather Averages for &#123;&#123; city &#125;&#125;&#123;% endblock %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Weather&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &lt;h1&gt;Weather Averages&lt;/h1&gt; &lt;h2&gt;&#123;&#123; city &#125;&#125;&lt;/h2&gt; &lt;table class=\"table table-hover\"&gt; &lt;tr&gt; &lt;th&gt;Month&lt;/th&gt; &lt;th&gt;Min&lt;/th&gt; &lt;th&gt;Max&lt;/th&gt; &lt;th&gt;Rainfall&lt;/th&gt; &lt;/tr&gt; &#123;% for month in months %&#125; &#123;&#123; macros.weather_row(month, weather[month]['min'], weather[month]['max'], weather[month]['rain'], highlight['min'], highlight['max'], highlight['rain']) &#125;&#125; &#123;% endfor %&#125; &lt;/table&gt; &lt;/div&gt; &#123;% endblock %&#125; macros.html&lt;!-- 定义函数 值与变量 当h1满足条件时加粗字体 --&gt;&#123;% macro weather_cell(value, hl) %&#125; &lt;td&#123;% if hl %&#125; class=\"warning\"&#123;% endif %&#125;&gt;&#123;&#123; value &#125;&#125;&lt;/td&gt;&#123;% endmacro %&#125;&#123;% macro weather_row(month, min, max, rain, hl_min, hl_max, hl_rain) %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; month &#125;&#125;&lt;/td&gt; &#123;&#123; weather_cell(min, min &lt;= hl_min) &#125;&#125; &#123;&#123; weather_cell(max, max &gt;= hl_max) &#125;&#125; &#123;&#123; weather_cell(rain, rain &gt;= hl_rain) &#125;&#125; &lt;/tr&gt;&#123;% endmacro %&#125;&lt;!-- 函数调用函数 当min 低于预定值时会加粗显示--&gt;&#123;% macro weather_cell(value, hl) %&#125; &lt;td&#123;% if hl %&#125; class=\"warning\"&#123;% endif %&#125;&gt;&#123;&#123; value &#125;&#125;&lt;/td&gt;&#123;% endmacro %&#125; 404.html&#123;% extends 'base.html' %&#125;&#123;% block title %&#125;Not Found&#123;% endblock %&#125;&#123;% block page_content %&#125; &lt;h1&gt;404 页面未找到&lt;/h1&gt; &lt;p&gt;&lt;a href=\"&#123;&#123; url_for('index') &#125;&#125;\"&gt;Return to home page&lt;/a&gt;&lt;/p&gt;&#123;% endblock %&#125; base.html&#123;% extends 'bootstrap/base.html' %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"&#123;&#123; url_for('index') &#125;&#125;\"&gt;Weather&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;%- block metas %&#125;&lt;meta charset=\"utf-8\"&gt;&#123;%- endblock metas %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &#123;% block page_content %&#125;&#123;% endblock %&#125; &lt;/div&gt;&#123;% endblock %&#125; request 函数from flask import Flask, render_template, requestfrom flask_bootstrap import Bootstrapapp = Flask(__name__)bootstrap = Bootstrap(app)@app.route('/', methods=['GET', 'POST'])def index(): name = None print request.form if request.method == 'POST' and 'name' in request.form: name = request.form['name'] return render_template('index.html', name=name)if __name__ == '__main__': app.run(debug=True) index.html&#123;% extends \"bootstrap/base.html\" %&#125;&#123;% block title %&#125;Form Example&#123;% endblock %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"&#123;&#123; url_for('index') &#125;&#125;\"&gt;Hello&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &lt;form method=\"POST\" action=\"\"&gt; What is your name? &lt;input type=\"text\" name=\"name\"&gt; &lt;input type=\"submit\" name=\"submit\" value=\"Submit\"&gt; &lt;/form&gt; &#123;% if name %&#125; &lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt; &#123;% endif %&#125; &lt;/div&gt;&#123;% endblock %&#125; 限定上传长度hello.pyfrom flask import Flask, render_templatefrom flask_bootstrap import Bootstrapfrom flask_wtf import Formfrom wtforms import StringField, SubmitFieldfrom wtforms.validators import Required, Lengthapp = Flask(__name__)app.config['SECRET_KEY'] = 'top secret!'bootstrap = Bootstrap(app)class NameForm(Form): name = StringField('What is your name?', validators=[Required(), Length(1, 16)]) submit = SubmitField('Submit')@app.route('/', methods=['GET', 'POST'])def index(): name = None form = NameForm() if form.validate_on_submit(): name = form.name.data form.name.data = '' return render_template('index.html', form=form, name=name)if __name__ == '__main__': app.run(debug=True) index.html&#123;% extends \"bootstrap/base.html\" %&#125;&#123;% block title %&#125;Form Example&#123;% endblock %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"&#123;&#123; url_for('index') &#125;&#125;\"&gt;Hello&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &lt;form method=\"POST\" action=\"\"&gt; &#123;&#123; form.name.label &#125;&#125; &#123;&#123; form.name(size=16) &#125;&#125; &#123;% for error in form.name.errors %&#125; &#123;&#123; error &#125;&#125; &#123;% endfor %&#125; &lt;br&gt; &#123;&#123; form.submit() &#125;&#125; &#123;&#123; form.hidden_tag() &#125;&#125; &lt;/form&gt; &#123;% if name %&#125; &lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt; &#123;% endif %&#125; &lt;/div&gt;&#123;% endblock %&#125; bootstrap美化表单hello.pyfrom flask import Flask, render_templatefrom flask_bootstrap import Bootstrapfrom flask_wtf import Formfrom wtforms import StringField, SubmitFieldfrom wtforms.validators import Required, Lengthapp = Flask(__name__)app.config['SECRET_KEY'] = 'top secret!'bootstrap = Bootstrap(app)class NameForm(Form): name = StringField('What is your name?', validators=[Required(), Length(1, 16)]) submit = SubmitField('Submit')@app.route('/', methods=['GET', 'POST'])def index(): name = None form = NameForm() if form.validate_on_submit(): name = form.name.data form.name.data = '' return render_template('index.html', form=form, name=name)if __name__ == '__main__': app.run(debug=True) index.html&#123;% extends \"bootstrap/base.html\" %&#125;&#123;% import \"bootstrap/wtf.html\" as wtf %&#125;&#123;% block title %&#125;Form Example&#123;% endblock %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"&#123;&#123; url_for('index') &#125;&#125;\"&gt;Hello&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-3\"&gt; &#123;&#123; wtf.quick_form(form) &#125;&#125; &#123;% if name %&#125; &lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125; 文件上传├── static│ └── uploads│ └── README.md 文件会上传到此目录├── templates│ └── index.html└── upload.py 3 directories, 3 files upload.pyimport osimport imghdrfrom flask import Flask, render_templatefrom flask_bootstrap import Bootstrapfrom flask_wtf import Formfrom wtforms import FileField, SubmitField, ValidationErrorapp = Flask(__name__)app.config['SECRET_KEY'] = 'top secret!'bootstrap = Bootstrap(app)class UploadForm(Form): image_file = FileField('Image file') submit = SubmitField('Submit') def validate_image_file(self, field): if field.data.filename[-4:].lower() != '.jpg': raise ValidationError('Invalid file extension') if imghdr.what(field.data) != 'jpeg': raise ValidationError('Invalid image format')@app.route('/', methods=['GET', 'POST'])def index(): image = None form = UploadForm() if form.validate_on_submit(): image = 'uploads/' + form.image_file.data.filename form.image_file.data.save(os.path.join(app.static_folder, image)) return render_template('index.html', form=form, image=image)if __name__ == '__main__': app.run(debug=True) &#123;% extends \"bootstrap/base.html\" %&#125;&#123;% import \"bootstrap/wtf.html\" as wtf %&#125;&#123;% block title %&#125;File Upload Example&#123;% endblock %&#125;&#123;% block navbar %&#125; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"&#123;&#123; url_for('index') &#125;&#125;\"&gt;Upload&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-4\"&gt; &#123;&#123; wtf.quick_form(form, enctype='multipart/form-data') &#125;&#125; &lt;/div&gt; &lt;/div&gt; &#123;% if image %&#125; &lt;img src=\"&#123;&#123; url_for('static', filename=image) &#125;&#125;\"&gt; &#123;% endif %&#125; &lt;/div&gt;&#123;% endblock %&#125; session 信息plus.pyfrom flask import Flask, render_template, sessionapp = Flask(__name__)app.config['SECRET_KEY'] = 'top secret!'@app.route('/')def index(): print session if 'count' not in session: session['count'] = 1 else: session['count'] += 1 return render_template('index.html', count=session['count'])if __name__ == '__main__': app.run(debug=True) index.html&lt;h1&gt;You have seen this page &#123;&#123; count &#125;&#125; times.&lt;/h1&gt;&lt;p&gt;Hit refresh to increase.&lt;/p&gt; 页面访问统计 以及时间plus1.pyfrom datetime import datetimefrom flask import Flask, render_template, session, gapp = Flask(__name__)app.config['SECRET_KEY'] = 'top secret!'@app.before_requestdef before_request(): if not 'count' in session: session['count'] = 1 else: session['count'] += 1 g.when = datetime.now().strftime('%H:%M:%S')@app.route('/')def index(): return render_template('index.html', count=session['count'], when=g.when)@app.route('/other')def other(): return render_template('other.html', count=session['count'], when=g.when)if __name__ == '__main__': app.run(debug=True) index.html&lt;h1&gt;Index Page&lt;/h1&gt;&lt;p&gt;You have a total of &#123;&#123; count &#125;&#125; page views in this site, the last of which was at &#123;&#123; when &#125;&#125;.&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('other') &#125;&#125;\"&gt;Click here&lt;/a&gt; to see the other page.&lt;/p&gt; other.html&lt;h1&gt;Other Page&lt;/h1&gt;&lt;p&gt;You have a total of &#123;&#123; count &#125;&#125; page views in this site, the last of which was at &#123;&#123; when &#125;&#125;.&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('index') &#125;&#125;\"&gt;Click here&lt;/a&gt; to see the index page.&lt;/p&gt; 多种请求 响应方式responses.pyfrom flask import Flask, render_template, make_response, jsonify, redirect, \\ url_forapp = Flask(__name__)@app.route('/')def index(): return render_template('index.html')@app.route('/text')def text(): return render_template('text.txt'), 200, &#123;'Content-Type': 'text/plain'&#125;@app.route('/xml')def xml(): return '&lt;h1&gt;this is shown as &lt;b&gt;XML&lt;/b&gt; in the browser&lt;/h1&gt;', 200, \\ &#123;'Content-Type': 'application/xml'&#125;@app.route('/json')def json(): return jsonify(&#123;'first_name': 'John', 'last_name': 'Smith'&#125;)@app.route('/redirect')def redir(): return redirect(url_for('text'))@app.route('/cookie')def cookie(): resp = redirect(url_for('index')) resp.set_cookie('cookie', 'Hello, I\\'m a cookie') return resp@app.route('/error')def error(): return 'Bad Request', 400@app.route('/response')def response(): resp = make_response(render_template('text.txt')) resp.headers['Content-Type'] = 'text/plain' return respif __name__ == '__main__': app.run(debug=True) text.textThis page contains plain text.Use your back button to go back to the index page. index.html&lt;h1&gt;This page contains HTML&lt;/h1&gt;&lt;p&gt; Cookie: &#123;% if 'cookie' in request.cookies %&#125; &lt;b&gt;&#123;&#123; request.cookies['cookie'] &#125;&#125;&lt;/b&gt; &#123;% else %&#125; not set &#123;% endif %&#125;&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('text') &#125;&#125;\"&gt;Click here&lt;/a&gt; to view a page that contains plain text.&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('xml') &#125;&#125;\"&gt;Click here&lt;/a&gt; to view a page that contains XML data.&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('json') &#125;&#125;\"&gt;Click here&lt;/a&gt; to view a page that contains JSON data.&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('redir') &#125;&#125;\"&gt;Click here&lt;/a&gt; to view a page that redirects to the plain text page.&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('cookie') &#125;&#125;\"&gt;Click here&lt;/a&gt; to view a page that sets a cookie and then redirects back to this page.&lt;/p&gt;&lt;p&gt;&lt;a href=\"&#123;&#123; url_for('response') &#125;&#125;\"&gt;Click here&lt;/a&gt; to view a page that shows plain text through a response object.&lt;/p&gt; from表单取值复选框&lt;div class=\"form-group\"&gt; &lt;label class=\"control-label col-sm-2 col-lg-2 text-navy\" for=\"id_title\"&gt;操作系统&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"checkbox\" name=\"hobby\" value=\"football\"/&gt;足球 &lt;input type=\"checkbox\" name=\"hobby\" value=\"basketball\" checked=\"checked\"/&gt;篮球 &lt;input type=\"checkbox\" name=\"hobby\" value=\"pingpong\" checked=\"checked\" /&gt;乒乓球 &lt;/div&gt;&lt;/div&gt;-----@app.route('/aa', methods=['POST'])def assts_aa(): tmp = request.values.getlist('hobby') print tmp for i in tmp pass get_id = 1 单选框 &lt;div class=\"form-group\"&gt;&lt;label class=\"control-label col-sm-2 col-lg-2 text-navy\" for=\"id_title\"&gt;操作系统&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"radio\" name=\"sex\" value=\"1\" checked=\"checked\" /&gt;男 &lt;input type=\"radio\" name=\"sex\" value=\"0\" /&gt;女 &lt;/div&gt;&lt;/div&gt;@app.route('/aa', methods=['POST'])def assts_aa(): print request.form.get('sex','') flask获取上传表单(列表形式)# html内容&lt;div class=\"form-group\"&gt; &lt;label class=\"col-sm-2 control-label\"&gt;项目组:&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;! -- start--&gt; &#123;% if project_group_list %&#125; &#123;% for foo in project_group_list %&#125; &lt;input id=\"id_title\" type=\"checkbox\" name=\"project_group_name\" value=\"&#123;&#123; foo['id'] &#125;&#125;\"/&gt;&#123;&#123; foo['project_group_name'] &#125;&#125;&amp;nbsp&amp;nbsp &#123;% endfor %&#125; &#123;% endif %&#125; &lt;! -- end--&gt; &lt;/div&gt;&lt;/div&gt;# 上传的表单数据project_group_name:1project_group_name:2project_group_name:3project_group_name:4project_group_name:5# python flask获取列表project_group_name = request.values.getlist('project_group_name')print projects_id# 返回值[u'1', u'2', u'3', u'4', u'5']# 传给models进行处理status, result= models.project_id_project_group_id_correlation(project_group_name_id_list_s, project_name)if not status: return json.dumps(&#123;'code': 400, 'result': result&#125;)return json.dumps(&#123;'code': 200, 'result': result&#125;)# models代码'''项目ID.项目组ID关联关系.保存'''def project_id_project_group_id_correlation(project_group_name_id_list_s, project_name): SQL_GET_PROJECT_NAME_ID = ''' SELECT `id` FROM project WHERE `project_name`=%s ''' sql = SQL_GET_PROJECT_NAME_ID args =(project_name,) rt_cnt , rt_list = dbutils.execute_sql(sql, args, True) # 获取刚添加项目ID project_id = rt_list[0][0] SQL_PROJECT_ID_PROJECT_GROUP_ID_CORRELATION=''' INSERT INTO `project_id_project_group_id` (`project_id`, `project_group_id`) VALUES ''' sql_insert = SQL_PROJECT_ID_PROJECT_GROUP_ID_CORRELATION cnt = 0 for project_group_name_id_list in project_group_name_id_list_s: if cnt == 0: sql_insert = sql_insert + '(&#123;project_id&#125;,&#123;project_group_name_id_list&#125;)'.format(project_id=project_id,project_group_name_id_list=project_group_name_id_list) sql_insert = sql_insert + ' ,(&#123;project_id&#125;,&#123;project_group_name_id_list&#125;)'.format(project_id=project_id,project_group_name_id_list=project_group_name_id_list) cnt = 1 args = () try: rt_cnt, rt_list = dbutils.execute_sql(sql_insert, args, False) except: return (False,u'保存项目id与项目组id关联失败') return (True, u'保存项目id与项目组id关联成功')","tags":[{"name":"flask","slug":"flask","permalink":"http://zhourudong.cn/tags/flask/"}]},{"title":"算法复杂度","date":"2016-11-18T02:40:49.000Z","path":"2016/11/18/11-算法复杂度/","text":"算法复杂 数据结构操作 数据结构 数组排序算法 数组排序算法 图操作 图操作 堆操作 堆操作 大O复杂度图表 大O复杂度图表","tags":[]},{"title":"常用","date":"2016-11-17T10:10:42.000Z","path":"2016/11/17/9-shell-常用/","text":"查找文件大小sudo find / -size +20M ! -path '/proc/*' ! -path '/home/*' -type f -mtime +20 | xargs sudo ls -lh# cp mvsudo find / -size +20M ! -path '/proc/*' ! -path '/home/*' -type f -mtime +90 -size +200M | xargs -I &#123;&#125; sudo mv &#123;&#125; /home/ops_zhourudong 快速创建一个大文件fallocate -l 1G zrd.img shell 子串截取a=ab_cd_ef# 截取最后的子串echo $&#123;a##*_&#125;ef# 截取前边的子串echo $&#123;a#*_&#125;cd_ef# 从右边起截取最后的子串echo $&#123;a%%_*&#125;ab# 从右边起放弃第一个子串后的结果echo $&#123;a%_*&#125;ab_cd 重定向 EOFcat &lt;&lt;EOF | tee /etc/yum.repos.d/influxdb.repo[influxdb]name = InfluxDB Repository - RHEL \\$releaseverbaseurl = https://repos.influxdata.com/rhel/\\$releasever/\\$basearch/stableenabled = 1gpgcheck = 1gpgkey = https://repos.influxdata.com/influxdb.keyEOF PS1PS1=\\e[1m\\e[31m[\\h] \\e[32m($(docker-prompt)) \\e[34m\\u@$(hostname -i)\\e[35m \\w\\e[0m\\n$ pythonpip install pymongo -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.compip instll requests -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.compip instll requests -i http://mirrorscs.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyuncs.com yum本地mount -o loop /dev/sr0 /mnt/cd /etc/yum.repos.d/vi Centos-Media.repo[c7-media]name=centos7-local-isobaseurl=file:///mntgpgcheck=0 sed批量替换 目录下所有文件sed -i \"s/dial_cross.enabled=True/dial_cross.enabled=False/g\" $( grep 'tower.enabled' -rl .) rsync同步文件# 从18.2.9.6主机/var/www/webdir目录(webdir目录) 同步到当前目录rsync -avzP root@18.2.9.6:/var/www/webdir . 每次读取文件一行#!/bin/bashwhile read linedo echo $line #这里可根据实际用途变化done &lt; urfile","tags":[{"name":"linux","slug":"linux","permalink":"http://zhourudong.cn/tags/linux/"}]},{"title":"groovy基本语法","date":"2016-11-14T08:55:54.000Z","path":"2016/11/14/8-groovy基本语法/","text":"groovy基本语法: #!/usr/bin/env groovy // 打印 Hello Worldprintln “Hello world!”// 变量定义 Variables: You can assign values to variables for later usedef x = 1println x x = new java.util.Date()println x x = -3.1499392println x x = falseprintln x x = “Groovy!”println x // 列表 Creating an empty listdef technologies = [] / 添加一个元素到列表中 Adding a elements to the list /// As with Javatechnologies.add(“Grails”) // 添加多个元素到列表中 Add multiple elementstechnologies.addAll([“Gradle”,”Griffon”]) / 删除列表中元素 Removing elements from the list /// As with Javatechnologies.remove(“Griffon”) // Subtraction works alsotechnologies = technologies - ‘Grails’ / Iterating Lists /// Iterate over elements of a listtechnologies.each { println “Technology: $it”}technologies.eachWithIndex { it, i -&gt; println “$i: $it”} / 元素是否存在判断 Checking List contents ///Evaluate if a list contains element(s) (boolean)contained = technologies.contains( ‘Groovy’ ) // Orcontained = ‘Groovy’ in technologies // 计数 Check for multiple contentstechnologies.containsAll([‘Groovy’,’Grails’]) / 排序 Sorting Lists / // 在原列表上重新排序 Sort a list (mutates original list)technologies.sort() // 排序不影响源列表 To sort without mutating original, you can do:sortedTechnologies = technologies.sort( false ) / 字典 Manipulating Lists / // 替换列表中所有元素 Replace all elements in the listCollections.replaceAll(technologies, ‘Gradle’, ‘gradle’) //Shuffle a listCollections.shuffle(technologies, new Random()) //Clear a listtechnologies.clear() // 字典 Creating an empty mapdef devMap = [:] // 添加新元素 Add valuesdevMap = [‘name’:’Roberto’, ‘framework’:’Grails’, ‘language’:’Groovy’]devMap.put(‘lastName’,’Perez’) // 遍历字典 Iterate over elements of a mapdevMap.each { println “$it.key: $it.value” }devMap.eachWithIndex { it, i -&gt; println “$i: $it”} // 判断是否为存在key Evaluate if a map contains a keyassert devMap.containsKey(‘name’) // 判断是否为存在value Evaluate if a map contains a valueassert devMap.containsValue(‘Roberto’) //Get the keys of a mapprintln devMap.keySet() //Get the values of a mapprintln devMap.values() //Groovy supports the usual if - else syntax// if 语句def x1 = 3 if(x1==1) { println “One”} else if(x1==2) { println “two”} else { println “X greater than Two”} //Groovy also supports the ternary operator:def y = 10def x2 = (y &gt; 1) ? “worked” : “failed”assert x2 == “worked” //Instead of using the ternary operator://displayName = user.name ? user.name : ‘Anonymous’//We can write it://displayName = user.name ?: ‘Anonymous’ //For loop//Iterate over a rangedef x3 = 0for (i in 0 .. 30) {x3 += i} //Iterate over a listx4 = 0for( i in [5,3,2,1] ) {x4 += i} //Iterate over an arrayarray = (0..20).toArray()x5 = 0for (i in array) {x5 += i} //Iterate over a mapdef map = [‘name’:’Roberto’, ‘framework’:’Grails’, ‘language’:’Groovy’]x6 = 0for ( e in map ) {x6 += e.value} /ClosuresA Groovy Closure is like a “code block” or a method pointer. It is a piece ofcode that is defined and then executed at a later point.More info at: http://www.groovy-lang.org/closures.html / //Example:def clos = { println “Hello World!” } println “Executing the Closure:”clos() //Passing parameters to a closuredef sum = { a, b -&gt; println a+b }sum(2,4) //Closures may refer to variables not listed in their parameter list.def x7 = 5def multiplyBy = { num -&gt; num * x7 }println multiplyBy(10) // If you have a Closure that takes a single argument, you may omit the// parameter definition of the Closuredef clos2 = { println it }clos2( “hi” ) /Groovy can memoize closure results [1][2][3] /def cl = {a, b -&gt;sleep(3000) // simulate some time consuming processinga + b} mem = cl.memoize() def callClosure(a, b) {def start = System.currentTimeMillis()println mem(a, b)println “Inputs(a = $a, b = $b) - took ${System.currentTimeMillis() - start} msecs.”} callClosure(1, 2)callClosure(1, 2)callClosure(2, 3)callClosure(2, 3)callClosure(3, 4)callClosure(3, 4)callClosure(1, 2)callClosure(2, 3)callClosure(3, 4)","tags":[]},{"title":"Dockerfile","date":"2016-11-14T03:39:28.000Z","path":"2016/11/14/7-Dockerfile/","text":"FROMMAINTAINERRUNCMDLABELCOPYEXPOSEENVADDENTRYPOINTVOLUMEUSERWORKDIRONBUILD ONBUILD 在生成当前docker镜像的时候不生效，在子镜像生效；ONBUILD在产品发布时起着非常重要的作用,A镜像中有ONBUILD指令，在构建A镜像时ONBUILD指令不执行；B镜像FROM A,在构建B镜像时ONBUILD指令开始执行； ENTRYPOINT [“/scripts/start”] ENTRYPOINT在每次启动docker容器时都会被执行，此例，是运行了一个shell脚本”/scripts/start” 在Dockerfile中每执行一条指令（ENV、ADD、RUN等命令），都会生成一个docker image layerdocker镜像的命名规则 registry_url/namespace/image_name:tag 默认tag是latest","tags":[]},{"title":"持续集成","date":"2016-11-09T10:42:14.000Z","path":"2016/11/09/2-持续集成/","text":"Continuous Integration CI 持续集成CD可持续交付系统","tags":[]},{"title":"1-css基础","date":"2016-11-07T17:26:01.000Z","path":"2016/11/08/1-css基础/","text":"css 基础 css3基础html嵌套样式:1.外部 比较推荐的方法 2.内部 3.内联 不建议使用 样式表写法img&#123; background: red; border-radius: 200px; /* 方法叫做内部 */&#125; css优先级1 内联styl 2 id选择器 id是唯一 不能重复 3 class选择器 4 标签 css长度单位1 px 2 em 倍数 css选择器1 常用选择器 2 基本选择器 3 层级选择器 4 伪类选择器 5 属性选择器 常用选择器：1.标签选择器 html span h1 h2 from … 2.id选择器 -&gt; 前面有# 3 类选择器 —&gt;前面有 点 &lt;style&gt; img&#123; background: red; border-radius: 200px; /* 方法叫做内部 */ &#125; #imgid &#123; background:yellow; &#125; .imgclass&#123; background: chocolate; &#125;&lt;/style&gt; &lt;img src=\"1.jpg\" id=\"imgid\" class=\"imgclass\" alt=\"1\"&gt; 4 关联选择器 父类往下找 &lt;style&gt; .div2 .imgclass&#123; background: chocolate; border-right: double; &#125;&lt;/style&gt;&lt;div class=\"div1\"&gt; &lt;img src=\"1.jpg\" id=\"imgid1\" class=\"imgclass\" alt=\"1\"&gt;&lt;/div&gt;&lt;div class=\"div2\"&gt; &lt;img src=\"1.jpg\" id=\"imgid\" class=\"imgclass\" alt=\"1\"&gt;&lt;/div&gt; 5 组合选择器 并列使用同一种样式 &lt;style&gt; .div2 .imgclass, .div3 .imgclass&#123; background: chocolate; border-right: double; &#125;&lt;/style&gt;&lt;div class=\"div1\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt;&lt;/div&gt;&lt;div class=\"div2\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt;&lt;/div&gt;&lt;div class=\"div3\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt;&lt;/div&gt; 基本选择器 :first-child 有四张图片，只有第一个生效， 找到四个元素，但是只有第一个生效 &lt;style&gt; img:first-child&#123; background: chocolate; border-right: double; &#125;&lt;/style&gt;&lt;body&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt;&lt;/body&gt; ? : first-letter `第一个字符` &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt;* &#123; font-family: \"微软雅黑 Light\";&#125;p:first-letter &#123; font-size: 80px; margin-left: 20px; /* 段落标签 第一个字符大小为80x,且缩进20 px */&#125;&lt;/style&gt; &lt;h1&gt;css测试&lt;/h1&gt; &lt;p&gt;系统linux front test linux front testlinux front testlinux front testlinux front test&lt;/p&gt; ?* :first-line `第一行` ```html &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; * &#123; font-family: &quot;微软雅黑 Light&quot;; &#125; p:first-line &#123; font-size: 40px; margin-left: 202px; /* 段落标签 第一个字符大小为80x,且缩进20 px */ &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;css测试&lt;/h1&gt; &lt;p&gt;系统 linux front test linux front testlinux front testlinux front testlinux front test&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; ? :last-child 和first-child 相反只有最后一个元素生效 :nth-child(3) 选择三个生效 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; img:nth-child(3) &#123; background: chocolate; border-right: double; &#125;&lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt; &lt;img src=\"1.jpg\" class=\"imgclass\" alt=\"1\"&gt;&lt;/body&gt;&lt;/html&gt; ? 层级选择器a,ba ba&gt;b &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"微软雅黑 Light\"; &#125; .div1&gt;h1&#123; background: #ccc; /* 查找div1 中的子元素 其他的不包括在内*/ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"div1\"&gt; &lt;h1&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaa1&lt;/h1&gt; &lt;!-- 只有这一行符合 --&gt; &lt;div class=\"div11\"&gt; &lt;div class=\"div111\"&gt; &lt;h1&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaa11&lt;/h1&gt; &lt;h1&gt;dsfsdfasdfaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"div2\"&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; a+b 后面的第一个元素 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"微软雅黑 Light\"; &#125; .div1+h1&#123; background: #ccc; /* 查找div1 中的子元素 其他的不包括在内*/ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"div1\"&gt; &lt;h1&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaa1&lt;/h1&gt; &lt;!-- 只有这一行符合 --&gt; &lt;div class=\"div11\"&gt; &lt;div class=\"div111\"&gt; &lt;h1&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaa11&lt;/h1&gt; &lt;h1&gt;dsfsdfasdfaaaaaaaaaaaaaaaaaaaaaaaaaaaaa111&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 找到 div1 后面的一个元素 所以以下第一行--&gt; &lt;h1&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa a&lt;/h1&gt; &lt;h1&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa b&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 伪类选择器 :hover :focus ::selection :hover &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"微软雅黑 Light\"; &#125; img:hover &#123; background: blueviolet; border-bottom: 2px; /* 当鼠标移到图片的时候 背景颜色变为紫色 且显示为圆形*/ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=\"1.jpg\" alt=\"\"&gt;&lt;/body&gt;&lt;/html&gt; :focus 表单元素获得焦点聚焦 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"微软雅黑 Light\"; &#125; .username:focus &#123; background: #ff0; /* 轮廓的颜色 青色*/ outline-color: chartreuse; &#125; /* 当鼠标移到表单username位置时 输入框的位置会变成黄色， 获得到焦点 */&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"\"&gt; &lt;p&gt;用户名:&lt;/p&gt; &lt;p&gt;&lt;input type=\"text\" class=\"username\"&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=\"submit\" value=\"ok\"&gt;&lt;/p&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; ::selection &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"微软雅黑 Light\"; &#125; /* 注意有两个冒号 */ p::selection &#123; background: darkmagenta; /* 当鼠标选定到字符时 背景会变成紫色 */ &#125;&lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;css测试&lt;/h1&gt; &lt;p&gt;系统 linux front test linux front testlinux front testlinux front testlinux front test&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 属性选择器 [id] ?[id=us] 等于us ?[name*=us] name包含us 既满足条件 ?[name^=en] name以en开头既满足条件 [name$=en] name以en结尾即满足条件 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"微软雅黑 Light\"; &#125; input[name=username] &#123; outline-color: darkred; /* input标签 name=username的标签 边框为棕色,当鼠标点击上去的时候 */ &#125; input[name=username] &#123; outline-color: darkred; /* input标签 name=username的标签 边框为棕色,当鼠标点击上去的时候 可以是其他标签 不一定name */ &#125; input[name=passwd] &#123; outline-color: blue; /* input标签 name=passwd的标签 边框为蓝色,当鼠标点击上去的时候 */ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"\"&gt; &lt;p&gt;用户名:&lt;/p&gt; &lt;p&gt;&lt;input type=\"text\" name=\"username\" class=\"username\"&gt;&lt;/p&gt; &lt;p&gt;密码:&lt;/p&gt; &lt;p&gt;&lt;input type=\"password\" name=\"passwd\" class=\"passwd\"&gt;&lt;/p&gt; &lt;p&gt;邮箱:&lt;/p&gt; &lt;p&gt;&lt;input type=\"email\" name=\"email\" class=\"email\"&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=\"submit\" value=\"ok\"&gt;&lt;/p&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 标签所有拥有的属性也能作为选择的依据 --&gt; 常见的样式属性和值1字体与颜色 2背景属性 3文本属性 4边框属性 5鼠标光标属性 6样式属性 7定位属性 8内外边框 9浮动和清除浮动 10滚动条 11显示和隐藏 1字体与颜色font 1 font-family //字体类型 //字体名称:楷体 宋体 黑体… 2 font-size //字体大小 //30px 3 font-style //字体样式 // normal | itaic 4 font-weight //字体粗细 //bold &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"新宋体\"; /* 1. 字体类型 */ /* 自定义字体 : font-family: \"自定义\"; src: url('自定义.ttf'); */ &#125; h1 &#123; font-size: 100px; /* 2。 字体大小 */ &#125; p &#123; font-style: inherit; /* 3. 斜体 */ font-weight: bold; /* 4. 字体粗细 */ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;字体&lt;/h1&gt; &lt;p&gt;dsffjsafdsfadsfadsfadssssssssssfaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasdddddddddddddddddddddddd&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 2背景属性background1. background-color 2. background-image 3. background-repeat &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"新宋体\"; &#125; div &#123; width: 500px; height: 500px; background-color: #ccc ; /* 设置默认背景颜色为灰色 */ background-image:url(\"1.jpg\"); /* 背景图 */ background-repeat: no-repeat; /* 不重复图片 */ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 4.background-attachment 5. background-psoition ? 1.水平: left center right; 垂直:top center bottom ? 2.50px 50px ? 3.-50px -50px 4. 50% 50% &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"新宋体\"; &#125; body &#123; background-color: #ccc ; /* 设置默认背景颜色为灰色 */ background-image:url(\"1.jpg\"); /* 背景图 */ background-repeat: no-repeat; /* 不重复图片 */ background-attachment: fixed; /* 随着页面滚动 而滚动 适用于body */ background-position: 50% 50%; /* 图片出现在页面宽高50% 的地方 */ background: #ccc url(\"1.jpg\") no-repeat fixed 50% 50%; /* 缩写形式 */ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt; &lt;h1&gt;os linux apache nginx&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 3文本属性word-spacing 词间距 letter-spacing 字间距 text-decoration 值 描述none 默认。定义标准的文本。underline 定义文本下的一条线。overline 定义文本上的一条线。line-through 定义穿过文本下的一条线。blink 定义闪烁的文本。inherit 规定应该从父元素继承 text-decoration 属性的值。 属性 描述 color 设置文本颜色 direction 设置文本方向。 line-height 设置行高。 letter-spacing 设置字符间距。 text-align 对齐元素中的文本。 text-decoration 向文本添加修饰。 text-indent 缩进 元素中文本的首行。 text-shadow 设置文本阴影。CSS2 包含该属性，但是 CSS2.1 没有保留该属性。 text-transform 控制元素中的字母。 unicode-bidi 设置文本方向。 white-space 设置元素中空白的处理方式。 word-spacing 设置字间距。 字体行高&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"新宋体\"; &#125; p&#123; /*letter-spacing: 15px;*/ /*!* 字间距 *!*/ /* word-spacing: 12px;*/ /*!**/ /*词间距*/ /**!*/ /* color: darkmagenta; */ /*!**/ /*颜色*/ /**!*/ /*line-height: 20px;*/ /*!**/ /*行高*/ /**!*/ /*text-decoration: underline;*/ /*!**/ /*下划线 上划线 中划线....*/ /**!*/ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;字体&lt;/h1&gt; &lt;p&gt;linux unix dsffjsafdsfadsfadsfadssssssssssfaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasdddddddddddddddddddddddd&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 对齐&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt;&lt;style&gt; * &#123; font-family: \"新宋体\"; &#125; p&#123; text-align: center; text-align: left; text-align: right; /* 文字对齐 */ &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;字体os&lt;/h1&gt; &lt;p&gt;linux unix forgt apple blue&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 4 边框属性 属性 描述 border 简写属性，用于把针对四个边的属性设置在一个声明。 border-style 用于设置元素所有边框的样式，或者单独地为各边设置边框样式。 border-width 简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。 border-color 简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。 border-bottom 简写属性，用于把下边框的所有属性设置到一个声明中。 border-bottom-color 设置元素的下边框的颜色。 border-bottom-style 设置元素的下边框的样式。 border-bottom-width 设置元素的下边框的宽度。 border-left 简写属性，用于把左边框的所有属性设置到一个声明中。 border-left-color 设置元素的左边框的颜色。 border-left-style 设置元素的左边框的样式。 border-left-width 设置元素的左边框的宽度。 border-right 简写属性，用于把右边框的所有属性设置到一个声明中。 border-right-color 设置元素的右边框的颜色。 border-right-style 设置元素的右边框的样式。 border-right-width 设置元素的右边框的宽度。 border-top 简写属性，用于把上边框的所有属性设置到一个声明中。 border-top-color 设置元素的上边框的颜色。 border-top-style 设置元素的上边框的样式。 border-top-width 设置元素的上边框的宽度。 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; div&#123; width: 1000px; height: 100px; background: #ccc; border:12px solid #f0f; /* 边框线 1像素 solid 实线条 红色 都是缩写*/ /* dotted 点连成的线条 dashed 横线连起来的线条 虚线 双线 凹进去的槽线 凸出来的槽线 grove 凹进去 ridge 凸出来 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;span&gt;html5 + css3 &lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; div&#123; width: 1000px; height: 100px; border-right: 10px ridge #f22; /* 右侧边框 left 左 top 上 bottom下 */ /* 上下左右边框方位 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;span&gt;html5 + css3 &lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 可以控制字体方位的应用 5鼠标光标属性&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; p &#123; width: 100px; height: 10px; border-left: 11px ridge #f22; cursor: crosshair; /* 当鼠标放到文字上变成十字架 */ /* pointer 小手势（较为常用） wait 等待状态(漏斗) text 默认I default 按原来什么都不变 help 获取帮助样式鼠标? */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;html5 + css3 &lt;/p&gt; &lt;p&gt;html5 + css3 &lt;/p&gt; &lt;p&gt;html5 + css3 &lt;/p&gt; &lt;p&gt;html5 + css3 &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 列表样式&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; ul&#123; background: forestgreen; padding: 0px; /* 靠左边 */ list-style-type: none ; /* none 什么都没有 disc 实心圆 默认 circle 空心圆 square 实心方块 decimal 数字 有序列表使用这个 lower-roman 小写罗马数字 upper-roman 大写罗马数字 lower-roman 小写字母 upper-alpha 大写字母 */ &#125; ul a&#123; color: aqua; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"\"&gt;百度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;百1度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;百2度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;百3度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;百4度&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 使用ul制作导航菜单 尺寸weight min-weight 最小宽度 限定文本框textarea样式 resize:none width:200px height:300px 样式继承特点：与文字有关的都会被继承 表格 属性 描述 border-collapse 设置是否把表格边框合并为单一的边框。 border-spacing 设置分隔单元格边框的距离。 caption-side 设置表格标题的位置。 empty-cells 设置是否显示表格中的空单元格。 table-layout 设置显示单元、行和列的算法。 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; table&#123; width: 1000px; border: 3px solid chartreuse; border-collapse: collapse; /* 合并 */ &#125; td,th&#123; text-align: center; /* 文本居中 */ border: 3px solid chartreuse; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;用户名称&lt;/th&gt; &lt;th&gt;密码&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;user1&lt;/td&gt; &lt;td&gt;passssd123432&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;user1&lt;/td&gt; &lt;td&gt;passssd123432&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;user1&lt;/td&gt; &lt;td&gt;passssd123432&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;user1&lt;/td&gt; &lt;td&gt;passssd123432&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;user1&lt;/td&gt; &lt;td&gt;passssd123432&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;user1&lt;/td&gt; &lt;td&gt;passssd123432&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 定位1.position: absolute; 绝对&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; *&#123; margin: 0px; &#125; img &#123; position: absolute; /* 绝对定位 */ left: 20px; top:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;img src=\"5.png\" alt=\"\"&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 2.position:relative; 相对&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; *&#123; margin: 0px; &#125; img &#123; position: relative; /* 相对定位原来所占用的空间不会释放 绝对定位 绝对定位 相同点： 都脱离了文档流 不同点 坐标系不同，绝对的坐标系在浏览器的左上角，相对的坐标系在自己的左上角； 占不占位， 相对占位； */ left: 20px; top:200px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;img src=\"5.png\" alt=\"\"&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt; &lt;h1&gt;sssssssssssssss&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; z-index 定位高度&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; *&#123; margin: 0px; &#125; img &#123; position: absolute; left: 200px; top:200px; &#125; .img1&#123; z-index: 1; /* 本来下下面 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=\"5.png\" class=\"img1\"&gt; &lt;img src=\"5.png\" class=\"img2\"&gt;&lt;/body&gt;&lt;/html&gt; 实现div绝对居中的方法: 1 父div: position: relative; 2.子div：position: absolute; 父定位子绝对，子的坐标是父的左上角 8内外边框 margin 简写属性。在一个声明中设置所有外边距属性。 margin-bottom 设置元素的下外边距。 margin-left 设置元素的左外边距。 margin-right 设置元素的右外边距。 margin-top 设置元素的上外边距。 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; *&#123; font-family: \"Colonna MT\"; margin: 0px; /* 去掉所有边距 */ &#125; .img&#123; background: #ff1; margin-bottom: 10px; /* 下部外边距 */ &#125; .img:last-child&#123; margin-bottom: 0px; /* 去掉最后一图片的外边距 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; margin:20px; 上下左右margin:5px 0px; 上下,左右面margin:0px 5px 5px; 上，左右， 下margin:0px 5px 0px 5px; 上右下左; 9浮动 值 描述 left 元素向左浮动。 right 元素向右浮动。 none 默认值。元素不浮动，并会显示在其在文本中出现的位置。 inherit 规定应该从父元素继承 float 属性的值。 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; *&#123; font-family: \"Colonna MT\"; /* 去掉所有边距 */ &#125; .img&#123; background: #ff1; margin-bottom: 10px; /* 下部外边距 */ &#125; .img&#123; background: #ccc; width: 200px; height: 200px; float: left; margin-left: 100px; &#125; .row&#123; margin-bottom: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"row\"&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div style=\"clear: both\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div class=\"img\"&gt;&lt;img src=\"5.png\"&gt;&lt;/div&gt; &lt;div style=\"clear: both\"&gt;&lt;/div&gt; &lt;!-- 清除浮动 --&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; .div1&#123; width: 100px; height: 100px; background: #ccc; float: left; &#125; .div2 &#123; width: 105px; height:105px; background: red; &#125; .div3 &#123; width: 105px; height:105px; background: darkslategray; clear: left; /* 不给左侧有其他 ， 如果有会自动在新的一行 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"div1\"&gt;&lt;/div&gt; &lt;div class=\"div2\"&gt;&lt;/div&gt; &lt;div class=\"div3\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 清除浮动:1.clear:left#浮动之后左侧不能有人2.clear:right#浮动之后右侧不能有人3.clear:both#浮动之后左右侧都不能有人#可以有效的防止盒子回缩 10滚动条 值 描述 visible 默认值。内容不会被修剪，会呈现在元素框之外。 hidden 内容会被修剪，并且其余内容是不可见的。 scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。 auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 inherit 规定应该从父元素继承 overflow 属性的值。 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; div&#123; width: 1000px; height:200px; border: 2px solid #ccc; overflow: scroll; /* 对溢出的内容固定 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"div1\"&gt;&lt;h1&gt; linux os appcle linux os appclelinux os appclelinux os appclelinux os appclelinux os appclelinux os appclelinux os appcle linux os appclelinux os appclelinux os appcle&lt;/h1&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 11显示和隐藏1.display none 此元素不会被显示。 block 此元素将显示为块级元素，此元素前后会带有换行符。 inline 默认。此元素会被显示为内联元素，元素前后没有换行符。 inline-block 行内块元素。（CSS2.1 新增的值） list-item 此元素会作为列表显示。 run-in 此元素会根据上下文作为块级元素或内联元素显示。 compact CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。 marker CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。 table 此元素会作为块级表格来显示（类似 ），表格前后带有换行符。 inline-table 此元素会作为内联表格来显示（类似 ），表格前后没有换行符。 table-row-group 此元素会作为一个或多个行的分组来显示（类似 ）。 table-header-group 此元素会作为一个或多个行的分组来显示（类似 ）。 table-footer-group 此元素会作为一个或多个行的分组来显示（类似 ）。 table-row 此元素会作为一个表格行显示（类似 ）。 table-column-group 此元素会作为一个或多个列的分组来显示（类似 ）。 table-column 此元素会作为一个单元格列显示（类似 ） table-cell 此元素会作为一个表格单元格显示（类似 和 ） table-caption 此元素会作为一个表格标题显示（类似 ） inherit 规定应该从父元素继承 display 属性的值。 display 显示要注意是行 还是块block 2.visibility 值 描述 visible 默认值。元素是可见的。 hidden 元素是不可见的。 collapse 当在表格元素中使用时，此值可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 “hidden”。 inherit 规定应该从父元素继承 visibility 属性的值。 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; .line1&#123; display: none; /* 不显示，不占位置 */ visibility: hidden; /* 隐藏 占位 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=\"line1\"&gt;1 aaaaaaaaaaaaaaaaa&lt;/h1&gt; &lt;h2 class=\"line2\"&gt;2 aaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbb&lt;/h2&gt; &lt;h2 class=\"line3\"&gt;3 aaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbb&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; css3边框样式 属性 描述 CSS border-image 设置所有 border-image-* 属性的简写属性。 3 border-radius 设置所有四个 border-*-radius 属性的简写属性。 3 box-shadow 向方框添加一个或多个阴影。 3 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;css&lt;/title&gt; &lt;style&gt; div&#123; background: #ccc; width: 200px; height: 200px; border-radius: 5px; border-radius: 5px 20px; /* 对角线 */ border-radius: 5px 20px 20px; /* 中间是对角线 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;img src=\"23.jpg\" alt=\"\"&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; box-shadow 值 描述 测试 h-shadow 必需。水平阴影的位置。允许负值。 测试 v-shadow 必需。垂直阴影的位置。允许负值。 测试 blur 可选。模糊距离。 测试 spread 可选。阴影的尺寸。 测试 color 可选。阴影的颜色。请参阅 CSS 颜色值。 测试 inset 可选。将外部阴影 (outset) 改为内部阴影。 测试","tags":[]},{"title":"0_拾遗_html","date":"2016-11-07T09:47:21.000Z","path":"2016/11/07/0-拾-html/","text":"html基础内容 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 测试注释--&gt;&lt;!-- 浏览器使用 CTRL + u 查看源码 --&gt; &lt;h1&gt;这是注释&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 空格 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 测试注释--&gt;&lt;!-- 浏览器使用 CTRL + u 查看源码 --&gt; &lt;h1&gt;这是&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;注释&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 颜色 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=\"#ff7f50\"&gt;&lt;!-- 测试注释--&gt;&lt;!-- 浏览器使用 CTRL + u 查看源码 --&gt; &lt;h1&gt;这是&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;颜色&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- h1- 6 font标签 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试h标签&lt;/title&gt; &lt;style&gt; span&#123; color: blue; font-size: 30px; font-weight: bold; &#125; &lt;/style&gt;&lt;/head&gt;&lt; bgcolor=\"#ff7f50\"&gt; &lt;h1&gt;ccccccccc&lt;/h1&gt; &lt;h2&gt;ccccccccc&lt;/h2&gt; &lt;h3&gt;ccccccccc&lt;/h3&gt; &lt;h4&gt;ccccccccc&lt;/h4&gt; &lt;h5&gt;ccccccccc&lt;/h5&gt; &lt;h6&gt;ccccccccc&lt;/h6&gt;&lt;!-- font 大小 1-6 淘汰标签--&gt; &lt;font size=\"6\" color=\"#7fff00\"&gt;font标签&lt;/font&gt;&lt;!-- 以上的标签慢慢被淘汰 将使用 span 和stype样式控制--&gt;&lt;br/&gt; &lt;span&gt;这是span标签&lt;/span&gt;&lt;!-- 不换行 --&gt; &lt;nobr/&gt; &lt;span&gt;这是span标签&lt;/span&gt;&lt;!-- span是无意义标签 --&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 列表 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试列表 &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 有序列表 ol--&gt; 请选择: &lt;br/&gt; &lt;ol&gt; &lt;li&gt;a.男性&lt;/li&gt; &lt;li&gt;b.女性&lt;/li&gt; &lt;li&gt;c.保密&lt;/li&gt; &lt;/ol&gt;&lt;!-- 无序列表 ul--&gt; &lt;ul&gt; &lt;li&gt;a.男性&lt;/li&gt; &lt;li&gt;b.女性&lt;/li&gt; &lt;li&gt;c.保密&lt;/li&gt; &lt;/ul&gt;&lt;!-- 自定义列表 dl--&gt; &lt;dl&gt; &lt;dt&gt;请选择&lt;/dt&gt; &lt;dd&gt;a.男性&lt;/dd&gt; &lt;dd&gt;b.女性&lt;/dd&gt; &lt;dd&gt;c.保密&lt;/dd&gt; &lt;/dl&gt;&lt;!-- 可以做自定义菜单--&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;b&gt;b标签&lt;/b&gt;&gt; &lt;u&gt;u标签&lt;/u&gt; &lt;i&gt;i标签&lt;/i&gt; 数字5&lt;sup&gt;3&lt;/sup&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 总结: 能放文字的标签: h p b 加粗 i 斜体 u 下划线 sub 上标 sup 下标 span 无意义行标签 font ----- div 无意义块标签--&gt;&lt;!-- 图片 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=\"https://raw.githubusercontent.com/cucyzrd/file/master/avatar.png\" width=\"200px\" height=\"200px\"&gt; &lt;img src=\"https://raw.githubusercontent.com/cucyzrd/file/master/avatar.png\" width=\"20px\" height=\"20px\"&gt;&lt;img src=\"https://raw.githubusercontent.com/cucyzrd/file/master/avatar.png\" /&gt;&lt;!-- title 鼠标放上去后会显示图片的名称 --&gt;&lt;img src=\"https://raw.githubusercontent.com/cucyzrd/file/master/avatar.png\" title=\"千与千寻\"/&gt;&lt;!-- alt 当图片没有找到时 所显示的信息--&gt;&lt;img src=\"https://raw.githubusercontent.com/cucyzrd/file/master/avatar.fdspng\" title=\"千与千寻\" alt=\"图片没有找到\"/&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 图片属性 src 高度 宽度 title alt map--&gt;&lt;!-- 所有标签上都有的属性 1.title 2.style 3.id 4.class--&gt;&lt;!-- 加载静态资源的标签 1.img 2.link 3.script 4.a--&gt;&lt;!-- 锚点 a标签--&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试a标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 有herf 为超链接--&gt; &lt;a herf=\"http://ww.baidu.com\"&gt;百度&lt;/a&gt;&lt;!-- 有name为锚点--&gt; &lt;a name=\"top\"&gt;&lt;/a&gt;&lt;h1&gt;0&lt;/h1&gt;&lt;h1&gt;1&lt;/h1&gt;&lt;h1&gt;2&lt;/h1&gt;&lt;h1&gt;3&lt;/h1&gt;&lt;h1&gt;4&lt;/h1&gt;&lt;h1&gt;5&lt;/h1&gt;&lt;h1&gt;6&lt;/h1&gt;&lt;h1&gt;7&lt;/h1&gt;&lt;h1&gt;8&lt;/h1&gt;&lt;h1&gt;9&lt;/h1&gt;&lt;h1&gt;10&lt;/h1&gt;&lt;h1&gt;0&lt;/h1&gt;&lt;h1&gt;1&lt;/h1&gt;&lt;h1&gt;2&lt;/h1&gt;&lt;h1&gt;3&lt;/h1&gt;&lt;h1&gt;4&lt;/h1&gt;&lt;h1&gt;5&lt;/h1&gt;&lt;h1&gt;6&lt;/h1&gt;&lt;h1&gt;7&lt;/h1&gt;&lt;h1&gt;8&lt;/h1&gt;&lt;h1&gt;9&lt;/h1&gt;&lt;h1&gt;10&lt;/h1&gt;&lt;p align=\"right\"&gt;&lt;a herf=\"#top\"&gt;&lt;img src=\"https://raw.githubusercontent.com/cucyzrd/file/master/avatar.png\" title=\"top\"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 表格 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试表格&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- cellspacing 边界大小--&gt; &lt;table border=\"2px\" width=\"400px\" align=\"center\" cellspacing=\"10\" &gt; &lt;caption&gt;用户信息表&lt;/caption&gt; &lt;tr&gt; &lt;!--表头信息--&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;/tr&gt; &lt;tr align=\"center\"&gt; &lt;td&gt;小马&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;20&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lucy&lt;/td&gt; &lt;td align=\"center\"&gt;女&lt;/td&gt; &lt;td&gt;21&lt;/td&gt; &lt;/tr&gt; &lt;!-- 两行3列--&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 表单 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试表单&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/\"&gt; &lt;span&gt;用户名:&lt;/span&gt;&lt;input type=\"text\" name=\"username\" /&gt; &lt;span&gt;密码:&lt;/span&gt; &lt;input type=\"password\" name=\"password\"/&gt; &lt;br&gt; &lt;input type=\"submit\" value=\"确定\"/&gt; &lt;input type=\"reset\" value=\"取消\"/&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 单选 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试单选表单&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/\"&gt; &lt;span&gt;请选择年级:&lt;/span&gt; &lt;br&gt; &lt;input type=\"radio\" name=\"g1\" value=\"一年级\"&gt;一年级 &lt;br&gt; &lt;input type=\"radio\" name=\"g1\" checked value=\"二年级\"&gt;二年级 &lt;br&gt; &lt;input type=\"radio\" name=\"g1\" value=\"三年级\"&gt;三年级 &lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 单选组name有且必须相同， 否则被认为是不同的组 默认选择 checked value--&gt;&lt;!-- 多选 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;测试多选表单&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/\"&gt; &lt;span&gt;爱好:&lt;/span&gt; &lt;br&gt; &lt;input type=\"radio\" name=\"g1\" value=\"book\"&gt;book &lt;br&gt; &lt;input type=\"radio\" name=\"g2\" checked value=\"run\"&gt;run &lt;br&gt; &lt;input type=\"radio\" name=\"g3\" value=\"sleep\"&gt;sleep &lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 多选组name有且值必须不相同， 否则被认为是不同的组 默认选择 checked value--&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;readonly and diabled&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/\"&gt; 修改用户信息:&lt;br&gt; 姓名:&lt;input type=\"text\" name=\"name\" value=\"小明\" readonly/&gt;&lt;br&gt; 姓名:&lt;input type=\"text\" name=\"name\" value=\"tomcat\" disabled/&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 区域框 文本框--&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;区域框&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/\"&gt; &lt;h1&gt;用户留言板&lt;/h1&gt; 用户:&lt;input type=\"text\" name=\"name\" value=\"匿名用户\" /&gt;&lt;br&gt; 留言:&lt;textarea name=\"user_content\" cols=\"150\" rows=\"2\"&gt;请填写留言&lt;/textarea&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 下拉 选择菜单 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;区域框&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/\"&gt; &lt;h1&gt;用户留言板&lt;/h1&gt; &lt;select name=\"cityname\" size=\"5\"&gt; &lt;option value=\"\"&gt;请选择城市&lt;/option&gt; &lt;option value=\"北京\"&gt;北京&lt;/option&gt; &lt;option value=\"上海\" selected&gt;上海&lt;/option&gt; &lt;/select&gt; &lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- value 值不能相同 默认 selected 选择--&gt;&lt;!-- 多选 设置成列表形式 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;区域框&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/\"&gt; &lt;h1&gt;用户留言板&lt;/h1&gt; &lt;select name=\"cityname[]\" size=\"5\" multiple&gt; &lt;option value=\"\"&gt;请选择城市&lt;/option&gt; &lt;option value=\"北京\"&gt;北京&lt;/option&gt; &lt;option value=\"上海\" selected&gt;上海&lt;/option&gt; &lt;/select&gt; &lt;br&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"html 基础","slug":"html-基础","permalink":"http://zhourudong.cn/tags/html-基础/"}]},{"title":"10 mysql备份脚本","date":"2016-10-31T07:38:22.000Z","path":"2016/10/31/10-mysql备份脚本/","text":"备份脚本 #!/bin/bashMYSQLBIN=/opt/mysql/bin/mysqlMYSQLDUMP=/opt/mysql/bin/mysqldumpMYSQLUSER=dbbackupMYSQLPASSWORD=ugagCm#l4tf@@@sdf$$xre9xlMYSQLBACKNM=\"192.168.1.8_220\"LOCALPATH=/home/backup/mysql_backupif [ ! -d $LOCALPATH ];then mkdir -p $LOCALPATHfiLOCALTM=$(date +%Y-%m-%d-%Hh-%Mm-%Ss)NOBACKUP=\"information_schema|Database|test|performance_schema\"DATANAME_LIST=$(echo 'show databases'|$MYSQLBIN -u$MYSQLUSER -p$MYSQLPASSWORD 2&gt;/dev/null|grep -v -E $NOBACKUP )cd $LOCALPATHfor dbname in $DATANAME_LISTdo $MYSQLDUMP --master-data=2 --opt $dbname &gt; $&#123;dbname&#125;_$&#123;LOCALTM&#125;.sql donetar jcf $&#123;MYSQLBACKNM&#125;_$&#123;LOCALTM&#125;.tar.bz2 *$&#123;LOCALTM&#125;.sqlrm *$&#123;LOCALTM&#125;.sql# remote server##/home/dbbackup/mysql_bakckup_220# 备份放在两台服务器 218 221服务器serverip=\"192.168.1.9 192.168.1.6\"username=\"dbbackup\"port=\"12381\"backupdir=\"/home/dbbackup/mysql_bakckup_1-59-37-220\"for i in $serveripdo /usr/bin/scp -P 12381 -q $&#123;MYSQLBACKNM&#125;_$&#123;LOCALTM&#125;.tar.bz2 $&#123;username&#125;@$&#123;i&#125;:$backupdirdoneif [[ $? -eq 0 ]]; then echo \"$(date +%Y-%m-%d-%Hh-%Mm-%Ss__Databases-Backup-Ok)\" &gt;&gt; $&#123;LOCALPATH&#125;/mysql_backup.logelse echo \"$(date +%Y-%m-%d-%Hh-%Mm-%Ss__Databases-Backup-Error)\" &gt;&gt; $&#123;LOCALPATH&#125;/mysql_backup.logfi/usr/bin/find $LOCALPATH -type f -name \"*.tar\" -mtime +10 -exec rm &#123;&#125; \\; 定时每天备份 crontab -l# 定时同步时间*/15 * * * * /usr/sbin/ntpdate time.windows.com &amp;&gt;/dev/null# 备份数据库10 2 * * * /opt/mysql/bin/mysql_backup.sh","tags":[]},{"title":"docker_常用命令","date":"2016-10-31T07:10:43.000Z","path":"2016/10/31/40-docker-常用命令/","text":"docker elkdocker run -d -p 19200:9200 -p 19300:9300 --name elasticsearch -v \"$PWD/esdata\":/usr/share/elasticsearch/data elasticsearch docker run --name kibana --link elasticsearch:elasticsearch -p 15611:5601 -d kibana","tags":[]},{"title":"备份日志脚本","date":"2016-10-28T04:34:18.000Z","path":"2016/10/28/30-备份日志脚本/","text":"备份日志脚本#!/bin/bashl=\"/home/weblogs/rtppublisher/logcollection.log* /home/weblogs/rtppublisher2/logcollection.log*\"a=0D=$(pwd)name=$(hostname | grep -o \"media..\")for i in $ldo a=$(expr $a + 1)cd $(dirname $i)sudo tar zcf $&#123;D&#125;/logcollection_$&#123;a&#125;.tar.gz $(basename $i)done cd $&#123;D&#125;tar zcf $&#123;name&#125;_logcollection.tar.gz logcollection_*rm -f logcollection_*# tar_logcollection_log.sh# hexo new '备份日志脚本'# hexo clean all# hexo ge# hexo de# hexo clean","tags":[]},{"title":"mysql基础使用","date":"2016-09-10T08:25:08.000Z","path":"2016/09/10/41-mysql基础使用/","text":"1. 安装2. 基本使用 提示符常用格式: 格式 意义 \\D 完整日期格式 \\d 显示当前数据库 \\h 服务器名 \\u 当前用户名 1.登入时指定mysql –prompt=zrdWelcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 15404Server version: 5.6.31-77.0-log Percona Server (GPL), Release 77.0, Revision 5c1061cCopyright (c) 2009-2016 Percona LLC and/or its affiliatesCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.zrd 2.在线修改格式PROMPT &apos;\\h=\\u=\\D=\\d&apos;PROMPT set to &apos;&apos;\\h=\\u=\\D=\\d&apos;&apos;&apos;localhost=root=Thu Aug 25 23:39:37 2016=(none)&apos; 3.配置文件中指定 一些基本函数 语句 意义 SELECT VERSION (); 版本 SELECT USER (); 当前登入的用户名主机名 SELECT NOW(); 当前时间 DELIMITER // 修改默认分隔符为//，原来是’ ; ‘ mysql&gt;\\T /tmp/mysql_sql_.log Logging to file ‘/tmp/mysql_sql_.log’ 将此会话所执行的语句及结果全部保存到指定的文件中 \\t mysql&gt;\\t Outfile disabled. 取消保存执行语句记录到文件中 注释注释的内容将不被执行 方法1# 注释的内容方法2-- 注释的内容 3.数据库相关操作(DDL数据库定义语言){} 花括号必须要写写上相关的内容| 二选一[] 方括号是可选的 1.数据库创建创建语法CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name [create_specification] [DEFAULT] CHARACTER SET [=] charset_name | [DEFAULT] COLLATE [=] collation_name mysql&gt; CREATE DATABASE zrd_test;Query OK, 1 row affected (0.02 sec)mysql&gt; CREATE DATABASE IF NOT EXISTS zrd_test;Query OK, 1 row affected, 1 warning (0.01 sec)mysql&gt; SHOW WARNINGS ; #查看警告+-------+------+---------------------------------------------------+| Level | Code | Message |+-------+------+---------------------------------------------------+| Note | 1007 | Can&apos;t create database &apos;zrd_test&apos;; database exists |+-------+------+---------------------------------------------------+1 row in set (0.00 sec)指定字符编码mysql&gt; CREATE DATABASE IF NOT EXISTS zrd_test2 DEFAULT CHARACTER SET = &apos;GBK&apos;;mysql&gt; SHOW CREATE SCHEMA zrd_test2;+-----------+-------------------------------------------------------------------+| Database | Create Database |+-----------+-------------------------------------------------------------------+| zrd_test2 | CREATE DATABASE `zrd_test2` /*!40100 DEFAULT CHARACTER SET gbk */ |+-----------+-------------------------------------------------------------------+ 2.查看数据库语法SHOW &#123;DATABASES | SCHEMAS&#125; [like_or_where] mysql&gt; SHOW DATABASES;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test || zabbix || zrd_test |+--------------------+6 rows in set (0.00 sec) 3. 查看指定数据库的定义语法SHOW CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name # 方法1mysql&gt; SHOW CREATE DATABASE zabbix;+----------+-----------------------------------------------------------------+| Database | Create Database |+----------+-----------------------------------------------------------------+| zabbix | CREATE DATABASE `zabbix` /*!40100 DEFAULT CHARACTER SET utf8 */ |+----------+-----------------------------------------------------------------+1 row in set (0.00 sec)# 方法2mysql&gt; SHOW CREATE SCHEMA zrd_test ;+----------+-------------------------------------------------------------------+| Database | Create Database |+----------+-------------------------------------------------------------------+| zrd_test | CREATE DATABASE `zrd_test` /*!40100 DEFAULT CHARACTER SET utf8 */ |+----------+-------------------------------------------------------------------+1 row in set (0.00 sec) 4.修改数据库的编码方式语法ALTER &#123;DATABASE | SCHEMA&#125; [db_name] alter_specification ...ALTER &#123;DATABASE | SCHEMA&#125; db_name UPGRADE DATA DIRECTORY NAMEalter_specification: [DEFAULT] CHARACTER SET [=] charset_name | [DEFAULT] COLLATE [=] collation_name mysql&gt; ALTER DATABASE zrd_test2 DEFAULT CHARACTER SET=utf8;Query OK, 1 row affected (0.02 sec)mysql&gt; SHOW CREATE DATABASE zrd_test2;+-----------+--------------------------------------------------------------------+| Database | Create Database |+-----------+--------------------------------------------------------------------+| zrd_test2 | CREATE DATABASE `zrd_test2` /*!40100 DEFAULT CHARACTER SET utf8 */ |+-----------+--------------------------------------------------------------------+1 row in set (0.00 sec) 5.切换数据库mysql&gt; USE zrd_test2; # 切换数据库Database changedmysql&gt; SELECT DATABASE(); # 显示当前正在使用的数据库+------------+| DATABASE() |+------------+| zrd_test2 |+------------+1 row in set (0.00 sec) 6.删除数据库语法:DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name mysql&gt; DROP DATABASE zrd_test2;Query OK, 0 rows affected (0.03 sec) 3. mysql 数据类型3.1 整数型 3.1.1 TINYINTName: &apos;TINYINT&apos;Description:TINYINT[(M)] [UNSIGNED] [ZEROFILL]A very small integer. The signed range is -128 to 127. The unsigned range is 0 to 255. 3.1.2 SMALLINTName: &apos;SMALLINT&apos;Description:SMALLINT[(M)] [UNSIGNED] [ZEROFILL]A small integer. The signed range is -32768 to 32767. The unsigned range is 0 to 65535. 3.1.3 MEDIUMINTName: &apos;MEDIUMINT&apos;Description:MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]A medium-sized integer. The signed range is -8388608 to 8388607. The unsigned range is 0 to 16777215. 3.1.4 INTName: &apos;INT&apos;Description:INT[(M)] [UNSIGNED] [ZEROFILL]A normal-size integer. The signed range is -2147483648 to 2147483647. The unsigned range is 0 to 4294967295. 3.1.5 BIGINT--&gt;? BIGINTName: &apos;BIGINT&apos;Description:BIGINT[(M)] [UNSIGNED] [ZEROFILL]A large integer. The signed range is -9223372036854775808 to 9223372036854775807. The unsigned range is 0 to 18446744073709551615. 3.1.6 BOOLEAN BOOLName: &apos;BOOLEAN&apos;Description:BOOL, BOOLEANThese types are synonyms for TINYINT(1). A value of zero is considered false. Nonzero values are considered true: 测试整型-- 测试整型CREATE TABLE IF NOT EXISTS `num`(`num1` TINYINT COMMENT &apos;最小的整型&apos;,`num2` SMALLINT,`num3` MEDIUMINT,`num4` INT,`num5` BIGINT) CHARSET=GB2312;percona root@localhost:test&gt; DESC num;+---------+--------------+--------+-------+-----------+---------+| Field | Type | Null | Key | Default | Extra ||---------+--------------+--------+-------+-----------+---------|| num1 | tinyint(4) | YES | | &lt;null&gt; | || num2 | smallint(6) | YES | | &lt;null&gt; | || num3 | mediumint(9) | YES | | &lt;null&gt; | || num4 | int(11) | YES | | &lt;null&gt; | || num5 | bigint(20) | YES | | &lt;null&gt; | |+---------+--------------+--------+-------+-----------+---------+5 rows in setTime: 0.003s# 插入数据INSERT INTO `num` VALUES(-128,-32768,-8388608,-2147483648,-9223372036854775808);Query OK, 1 row affected (0.02 sec)# 查询数据SELECT * FROM `num`;+------+--------+----------+-------------+----------------------+| num1 | num2 | num3 | num4 | num5 |+------+--------+----------+-------------+----------------------+| -128 | -32768 | -8388608 | -2147483648 | -9223372036854775808 |+------+--------+----------+-------------+----------------------+1 row in set (0.00 sec)# 插入错误不符合规范的数据INSERT INTO `num` VALUES(-129,-32768,-8388608,-2147483648,-9223372036854775808);Query OK, 1 row affected, 1 warning (0.02 sec)# 可发现插入不规则的语句后有提示--&gt;SHOW warnings ;+---------+------+-----------------------------------------------+| Level | Code | Message |+---------+------+-----------------------------------------------+| Warning | 1264 | Out of range value for column &apos;num1&apos; at row 1 |+---------+------+-----------------------------------------------+1 row in set (0.01 sec)--&gt;SELECT * FROM num;+------+--------+----------+-------------+----------------------+| num1 | num2 | num3 | num4 | num5 |+------+--------+----------+-------------+----------------------+| -128 | -32768 | -8388608 | -2147483648 | -9223372036854775808 || -128 | -32768 | -8388608 | -2147483648 | -9223372036854775808 |+------+--------+----------+-------------+----------------------+2 rows in set (0.00 sec)# 无符号整型-- 插入无符号整型 UNSIGNEDCREATE TABLE `num2`(num1 TINYINT UNSIGNED COMMENT &apos;UNSIGNED 是无符号的,计数是从0开始&apos;,num2 TINYINT ) CHARSET=GB2312;# 查看表结构，发现多了一个unsigned--&gt;DESC num2;+-------+---------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------------------+------+-----+---------+-------+| num1 | tinyint(3) unsigned | YES | | NULL | || num2 | tinyint(4) | YES | | NULL | |+-------+---------------------+------+-----+---------+-------+2 rows in set (0.00 sec)# 插入一个正常的值--&gt;INSERT INTO num2 VALUES(0,-12);Query OK, 1 row affected (0.02 sec)--&gt;SELECT * FROM num2;+------+------+| num1 | num2 |+------+------+| 0 | -12 |+------+------+1 row in set (0.00 sec)# 插入一个不符合的值--&gt;INSERT INTO num2 VALUES(-10,-12);ERROR 1264 (22003): Out of range value for column &apos;num1&apos; at row 1# 显示正常的长度 ZEROFILL , 它会设置成无符号，0填充CREATE TABLE IF NOT EXISTS `num3` (`num1` TINYINT ZEROFILL COMMENT &apos;最小的整型&apos;,`num2` SMALLINT ZEROFILL,`num3` MEDIUMINT ZEROFILL,`num4` INT ZEROFILL,`num5` BIGINT ZEROFILL) CHARSET=GB2312;--&gt;DESC num3;+-------+--------------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+--------------------------------+------+-----+---------+-------+| num1 | tinyint(3) unsigned zerofill | YES | | NULL | || num2 | smallint(5) unsigned zerofill | YES | | NULL | || num3 | mediumint(8) unsigned zerofill | YES | | NULL | || num4 | int(10) unsigned zerofill | YES | | NULL | || num5 | bigint(20) unsigned zerofill | YES | | NULL | |+-------+--------------------------------+------+-----+---------+-------+5 rows in set (0.00 sec)# 插入数据查看效果--&gt;INSERT INTO `num3` VALUES(1,1,1,1,1);Query OK, 1 row affected (0.02 sec)# 可以发现没有达到长度的会在前边补0(当做最大值来记录) 一般没用，美观--&gt;SELECT * FROM num3;+------+-------+----------+------------+----------------------+| num1 | num2 | num3 | num4 | num5 |+------+-------+----------+------------+----------------------+| 001 | 00001 | 00000001 | 0000000001 | 00000000000000000001 |+------+-------+----------+------------+----------------------+1 row in set (0.00 sec)# 当达到长度后,不会再补0 无符号整型 UNSIGNED零填充ZEROFILL3.2 浮点型 3.2.1 FLOATName: &apos;FLOAT&apos;Description:FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]A small (single-precision) floating-point number. Permissible valuesare -3.402823466E+38 to -1.175494351E-38, 0, and 1.175494351E-38 to3.402823466E+38. These are the theoretical limits, based on the IEEEstandard. The actual range might be slightly smaller depending on yourhardware or operating system.# 占用4个字节，单精度浮点型 3.2.2 DOUBLEName: &apos;DOUBLE&apos;Description:DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]A normal-size (double-precision) floating-point number. Permissiblevalues are -1.7976931348623157E+308 to -2.2250738585072014E-308, 0, and2.2250738585072014E-308 to 1.7976931348623157E+308. These are thetheoretical limits, based on the IEEE standard. The actual range mightbe slightly smaller depending on your hardware or operating system.# 双精度浮点型 3.2.3 DECIMALName: &apos;DECIMAL&apos;Description:DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]A packed &quot;exact&quot; fixed-point number. M is the total number of digits(the precision) and D is the number of digits after the decimal point(the scale). The decimal point and (for negative numbers) the &quot;-&quot; signare not counted in M. If D is 0, values have no decimal point orfractional part. The maximum number of digits (M) for DECIMAL is 65.The maximum number of supported decimals (D) is 30. If D is omitted,the default is 0. If M is omitted, the default is 10.# 占用的长度为字节长度+2 和float一样 测试浮点型-- 测试浮点型CREATE TABLE IF NOT EXISTS `num4` (num1 FLOAT(6,2),num2 DOUBLE(6,2),num3 DECIMAL(6,2) COMMENT &apos;定点数不进行四舍五入,对精度要求比较高&apos;) CHARSET=GB2312;--&gt;DESC num4;+-------+--------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+--------------+------+-----+---------+-------+| num1 | float(6,2) | YES | | NULL | || num2 | double(6,2) | YES | | NULL | || num3 | decimal(6,2) | YES | | NULL | |+-------+--------------+------+-----+---------+-------+3 rows in set (0.00 sec)# 插入值测试INSERT INTO `num4` VALUES(3.141526, 3.141526, 3.141526);Query OK, 1 row affected, 1 warning (0.03 sec)# 警告信息, 查看插入的数据被四舍五入截断--&gt;SHOW WARNINGS ;+-------+------+-------------------------------------------+| Level | Code | Message |+-------+------+-------------------------------------------+| Note | 1265 | Data truncated for column &apos;num3&apos; at row 1 |+-------+------+-------------------------------------------+1 row in set (0.00 sec)--&gt;SELECT * FROM num4;+------+------+------+| num1 | num2 | num3 |+------+------+------+| 3.14 | 3.14 | 3.14 |+------+------+------+1 row in set (0.00 sec)# 验证INSERT INTO `num4` VALUES(2.149526, 2.149526, 2.149526);Query OK, 1 row affected, 1 warning (0.01 sec)root@localhost Sat Aug 27 21:31:02 2016 [test] --&gt;SELECT * FROM num4;+------+------+------+| num1 | num2 | num3 |+------+------+------+| 3.14 | 3.14 | 3.14 || 2.15 | 2.15 | 2.15 |+------+------+------+2 rows in set (0.00 sec) 3.3 字符型 3.3.1 CHAR 定长字符速度快 --&gt;? charName: &apos;CHAR&apos;Description:[NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]A fixed-length string that is always right-padded with spaces to the specified length when stored. M represents the column length in characters. The range of M is 0 to 255. If M is omitted, the length is 1.# M个字节，0&lt;=&lt;=255 3.3.2 VARCHAR 变长字符速度比较慢 Name: &apos;VARCHAR&apos;Description:[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE collation_name ]A variable-length string. M represents the maximum column length in characters. The range of M is 0 to 65,535. The effective maximum length of a VARCHAR is subject to the maximum row size (65,535 bytes, which is shared among all columns) and the character set used. For example, utf8 characters can require up to three bytes per character, so a VARCHAR column that uses the utf8 character set can be declared to be a maximum of 21,844 characters.# L+1字节，其中L&lt;=M且0&lt;=M&lt;=65535 3.3.3 TINYTEXTName: &apos;TINYTEXT&apos;Description:TINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]A TEXT column with a maximum length of 255 (28 - 1) characters. The effective maximum length is less if the value contains multi-byte characters. Each TINYTEXT value is stored using a 1-byte length prefix that indicates the number of bytes in the value.# L+1 个字节， L小于2的8次方 3.3.4 TEXTName: &apos;TEXT&apos;Description:TEXT[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]A TEXT column with a maximum length of 65,535 (216 - 1) characters. Theeffective maximum length is less if the value contains multi-bytecharacters. Each TEXT value is stored using a 2-byte length prefix thatindicates the number of bytes in the value.# L+2 个字节， L小于2的16次方 3.3.5 MEDIUMTEXTName: &apos;MEDIUMTEXT&apos;Description:MEDIUMTEXT [CHARACTER SET charset_name] [COLLATE collation_name]A TEXT column with a maximum length of 16,777,215 (224 - 1) characters.The effective maximum length is less if the value contains multi-bytecharacters. Each MEDIUMTEXT value is stored using a 3-byte lengthprefix that indicates the number of bytes in the value.# L+3 个字节， L小于2的24次方 3.3.6 ENUMName: &apos;ENUM&apos;Description:ENUM(&apos;value1&apos;,&apos;value2&apos;,...) [CHARACTER SET charset_name] [COLLATEcollation_name]An enumeration. A string object that can have only one value, chosenfrom the list of values &apos;value1&apos;, &apos;value2&apos;, ..., NULL or the special &apos;&apos;error value. ENUM values are represented internally as integers.# 枚举类型，列举中的字节 3.3.7 SETName: &apos;SET&apos;Description:Syntax:SET variable_assignment [, variable_assignment] ...# 和枚举类似，但是集合同时可以选择多个值 测试字符-- 测试 CHAR 和 VCHARCREATE TABLE IF NOT EXISTS `cha1`(`str1` CHAR(5),`str2` CHAR(5));Query OK, 0 rows affected (0.06 sec)INSERT INTO cha1 VALUES(&apos;1&apos;,&apos;1&apos;);Query OK, 1 row affected (0.01 sec)# 插入超出存储范围INSERT INTO cha1 VALUES(&apos;123456&apos;,&apos;123456&apos;);--&gt;show WARNINGS ;+---------+------+-------------------------------------------+| Level | Code | Message |+---------+------+-------------------------------------------+| Warning | 1265 | Data truncated for column &apos;str1&apos; at row 1 || Warning | 1265 | Data truncated for column &apos;str2&apos; at row 1 |+---------+------+-------------------------------------------+2 rows in set (0.00 sec)# CHAR 会把多余的空格去掉，而VCHAR会保留# 后边的会被去掉INSERT INTO cha1 VALUES(&apos;1 &apos;,&apos;1 &apos;);# 前边的都会保留INSERT INTO cha1 VALUES(&apos; a&apos;,&apos; a&apos;);# 插入中文--&gt;INSERT INTO cha1 VALUES(&apos;我&apos;,&apos;我&apos;);Query OK, 1 row affected (0.04 sec)--&gt;SELECT * FROM cha1;+------+------+| str1 | str2 |+------+------+| 1 | 1 || 1 | 1 || a | a || 我 | 我 |+------+------+4 rows in set (0.00 sec) 测试枚举类型-- 测试枚举类型CREATE TABLE IF NOT EXISTS `test7` (sex ENUM(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) COMMENT &apos;枚举类型&apos;);INSERT INTO test7 VALUES(&apos;男&apos;);INSERT INTO test7 VALUES(&apos;女&apos;);INSERT INTO test7 VALUES(&apos;保密&apos;);SELECT * FROM test7;+--------+| sex |+--------+| 男 || 女 || 保密 |+--------+3 rows in set (0.00 sec)# 插入不符合情况时报错INSERT INTO test7 VALUES(&apos;保密1&apos;);Query OK, 1 row affected, 1 warning (0.03 sec)--&gt;show warnings ;+---------+------+------------------------------------------+| Level | Code | Message |+---------+------+------------------------------------------+| Warning | 1265 | Data truncated for column &apos;sex&apos; at row 1 |+---------+------+------------------------------------------+1 row in set (0.00 sec)--&gt;SELECT * FROM test7;+--------+| sex |+--------+| 男 || 女 || 保密 || |+--------+# 可选择对应的序列插入 1--&gt;男, 2--&gt;女 ， 3--&gt;保密 从1开始计数， 只能从列表中选择一个对象，可以插入空值NULLINSERT INTO test7 VALUES(&apos;1&apos;);--&gt;SELECT * FROM test7;+--------+| sex |+--------+| 男 || 女 || 保密 || || 男 |+--------+5 rows in set (0.00 sec)# 插入空值INSERT INTO test7 VALUES(&apos;NULL&apos;);--&gt;SELECT * FROM test7;+--------+| sex |+--------+| 男 || 女 || 保密 || 男 || NULL |+--------+5 rows in set (0.00 sec) 测试集合类型# 测试集合类型 和 枚举不同的是 集合可以选择多个值CREATE TABLE IF NOT EXISTS test8(fav set(&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;));# 正常插入 从集合中选择元素INSERT INTO test8 VALUES(&apos;A,B,C&apos;);INSERT INTO test8 VALUES(&apos;D,B,A&apos;);--&gt;SELECT * FROM test8;+-------+| fav |+-------+| A,B,C || A,B,D |+-------+2 rows in set (0.00 sec) 3.4 日期时间型 3.4.1 TIMEName: &apos;TIME&apos;Description:TIME[(fsp)]A time. The range is &apos;-838:59:59.000000&apos; to &apos;838:59:59.000000&apos;. MySQLdisplays TIME values in &apos;HH:MM:SS[.fraction]&apos; format, but permitsassignment of values to TIME columns using either strings or numbers.As of MySQL 5.6.4, an optional fsp value in the range from 0 to 6 maybe given to specify fractional seconds precision. A value of 0signifies that there is no fractional part. If omitted, the defaultprecision is 0.# 3个字符 3.4.2 DATTEName: &apos;DATE&apos;Description:DATEA date. The supported range is &apos;1000-01-01&apos; to &apos;9999-12-31&apos;. MySQLdisplays DATE values in &apos;YYYY-MM-DD&apos; format, but permits assignment ofvalues to DATE columns using either strings or numbers.# 3个字节 3.4.3 DATETIMEName: &apos;DATETIME&apos;Description:DATETIME[(fsp)]A date and time combination. The supported range is &apos;1000-01-0100:00:00.000000&apos; to &apos;9999-12-31 23:59:59.999999&apos;. MySQL displaysDATETIME values in &apos;YYYY-MM-DD HH:MM:SS[.fraction]&apos; format, but permitsassignment of values to DATETIME columns using either strings ornumbers.As of MySQL 5.6.4, an optional fsp value in the range from 0 to 6 maybe given to specify fractional seconds precision. A value of 0signifies that there is no fractional part. If omitted, the defaultprecision is 0.# 8个字节 3.4.4 TIMESTAMPName: &apos;TIMESTAMP&apos;Description:TIMESTAMP[(fsp)]A timestamp. The range is &apos;1970-01-01 00:00:01.000000&apos; UTC to&apos;2038-01-19 03:14:07.999999&apos; UTC. TIMESTAMP values are stored as thenumber of seconds since the epoch (&apos;1970-01-01 00:00:00&apos; UTC). ATIMESTAMP cannot represent the value &apos;1970-01-01 00:00:00&apos; because thatis equivalent to 0 seconds from the epoch and the value 0 is reservedfor representing &apos;0000-00-00 00:00:00&apos;, the &quot;zero&quot; TIMESTAMP value.# 时间戳 4个字节 3.4.5 YEARName: &apos;YEAR&apos;Description:Syntax:YEAR(date)Returns the year for date, in the range 1000 to 9999, or 0 for the&quot;zero&quot; date.# 1 个字节 测试时间类型-- 测试YEAR类型CREATE TABLE IF NOT EXISTS `test9`(`birth` YEAR);INSERT INTO test9 VALUES(1901);SELECT * FROM test9;+-------+| birth |+-------+| 1901 |+-------+1 row in set (0.00 sec)-- 插入一个超出范围的例子INSERT INTO test9 VALUES(2156);--&gt;INSERT INTO test9 VALUES(2156);Query OK, 1 row affected, 1 warning (0.02 sec)--&gt;SHOW WARNINGS ;+---------+------+------------------------------------------------+| Level | Code | Message |+---------+------+------------------------------------------------+| Warning | 1264 | Out of range value for column &apos;birth&apos; at row 1 |+---------+------+------------------------------------------------+# 当插入YEAR的值为0时 ， 它会转为0000INSERT INTO test9 VALUES(0);--&gt;SELECT * FROM test9;+-------+| birth |+-------+| 1901 || 0000 |+-------+2 rows in set (0.01 sec) -- TIME类型CREATE TABLE IF NOT EXISTS test10 (test TIME);-- 插入1 天 12小时12分12秒INSERT INTO test10 VALUES(&apos;1 12:12:12&apos;); SELECT * FROM test10; SELECT * FROM test10; +----------+| test |+----------+| 36:12:12 |+----------+1 row in set (0.00 sec)-- 11:11:00INSERT INTO test10 VALUES(&apos;11:11&apos;);SELECT * FROM test10; SELECT * FROM test10; +----------+| test |+----------+| 36:12:12 || 11:11:00 |+----------+2 rows in set (0.00 sec)-- 12分34秒INSERT INTO test10 VALUES(&apos;1234&apos;);SELECT * FROM test10;SELECT * FROM test10;+----------+| test |+----------+| 36:12:12 || 11:11:00 || 00:12:34 |+----------+3 rows in set (0.00 sec)-- 插入12秒INSERT INTO test10 VALUES(&apos;12&apos;);-- 00:00:00INSERT INTO test10 VALUES(&apos;0&apos;); 3.5 BINARYName: &apos;BINARY&apos;Description:BINARY(M)The BINARY type is similar to the CHAR type, but stores binary bytestrings rather than nonbinary character strings. M represents thecolumn length in bytes. 4. 存储引擎4.1 查看支持的存储引擎SHOW ENGINES\\G***************************[ 1. row ]***************************Engine | PERFORMANCE_SCHEMASupport | YESComment | Performance SchemaTransactions | NOXA | NOSavepoints | NO***************************[ 2. row ]***************************Engine | MRG_MYISAMSupport | YESComment | Collection of identical MyISAM tablesTransactions | NOXA | NOSavepoints | NO***************************[ 3. row ]***************************Engine | CSVSupport | YESComment | CSV storage engineTransactions | NOXA | NOSavepoints | NO***************************[ 4. row ]***************************Engine | BLACKHOLESupport | YESComment | /dev/null storage engine (anything you write to it disappears)Transactions | NOXA | NOSavepoints | NO***************************[ 5. row ]***************************Engine | MEMORYSupport | YESComment | Hash based, stored in memory, useful for temporary tablesTransactions | NOXA | NOSavepoints | NO***************************[ 6. row ]***************************Engine | MyISAMSupport | YESComment | MyISAM storage engineTransactions | NOXA | NOSavepoints | NO***************************[ 7. row ]***************************Engine | ARCHIVESupport | YESComment | Archive storage engineTransactions | NOXA | NOSavepoints | NO***************************[ 8. row ]***************************Engine | InnoDBSupport | DEFAULTComment | Percona-XtraDB, Supports transactions, row-level locking, and foreign keysTransactions | YES # 支持事务XA | YES # 支持分布式处理XA规范Savepoints | YES # 保存点***************************[ 9. row ]***************************Engine | FEDERATEDSupport | NOComment | Federated MySQL storage engineTransactions | NoneXA | NoneSavepoints | None 查看当前使用的存储引擎 SHOW VARIABLES LIKE &apos;STORAGE_ENGINE&apos;;+-----------------+---------+| Variable_name | Value ||-----------------+---------|| storage_engine | InnoDB |+-----------------+---------+1 row in set 4 表的操作4.1 创建表语法CREATE TABLE [IF NOT EXISTS] table_name(`字段名` 字段类型 [ UNSIGNED | ZEROFILL ] [ NULL | NOT NULL ] [DEFAULT &apos;默认值&apos;] [ [PRIMARY] KEY | UNIQUE [KEY]] [AUTO_INCREMENT] )ENGINE=InnoDB CHARSET=UTF8 AUTO_INCREMENT=100; 例子1 CREATE DATABASE IF NOT EXISTS zrd_test DEFAULT CHARACTER SET &apos;UTF8&apos;;USE zrd_test;-- 创建学员表-- 编号id-- 用户名 username-- 年龄 age-- 性别 sex-- 邮箱 email-- 地址 addr-- 生日 birth-- 薪水 salary-- 电话 tel-- 婚否 married-- 注意：当需要输入中文的时候，需要临时转换客户端的编码方式-- SET NAMES GBK; 当前会话有效.-- COMMENT 给字段添加注释CREATE TABLE `user` (`id` SMALLINT(5) UNSIGNED NOT NULL,`username` VARCHAR(20) NOT NULL,`age` TINYINT(200) UNSIGNED NOT NULL,`sex` ENUM(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) NOT NULL,`email` VARCHAR(50) NOT NULL,`addr` VARCHAR(200) NOT NULL,`salary` FLOAT(8,2) NOT NULL,`tel` INT(11) NOT NULL,`married` TINYINT(1) NOT NULL COMMENT &apos;0表示已婚,非0表示未婚&apos;)COMMENT = &apos;创建一张学员表信息&apos;CHARSET = &apos;utf8&apos;ENGINE = InnoDB; 例子2 -- 创建课程表 course-- 编号 cid-- 课程名称 courseName-- 课程描述 courseDescCREATE TABLE IF NOT EXISTS course (cid TINYINT,courseName VARCHAR(50),courseDesc VARCHAR(200)); 小练习小练习1.-- 创建新闻分类表 cms_cate-- 编号、分类名称、分类描述2. -- 创建新闻表 cms_news-- 编号、新闻标题、新闻内容、新闻发布时间、点击量、是否置顶、新闻所属分类、发布人 # 1CREATE TABLE IF NOT EXISTS `use_cate` ( `id` TINYINT, `cateName` VARCHAR(50), `cateDesc` VARCHAR(200) ) ENGINE = MYISAM CHARSET= UTF8;# 2CREATE TABLE IF NOT EXISTS `cms_news` (`id` INT,`title` VARCHAR(50),`content` TEXT,`pubTime` INT,`clickNum` INT,`isTop` TINYINT(1) COMMENT &apos;0 is not top, 1 is top&apos;,`cID` TINYINT,`pubAuth` VARCHAR(50)); 4.2 查看表percona root@localhost:test&gt; SHOW TABLES;+------------------+| Tables_in_test ||------------------|| course || user |+------------------+2 rows in setTime: 0.001s 到数据目录下可以看到两个文件相对于`INNODB来说 # innodb存储引擎 ~sehll#lsuser.frm # 表结构user.ibd # 表数据# myisam存储引擎└─&gt; lsuse_cate.frm # 表结构use_cate.MYD # 表数据 use_cate.MYI # 索引 4.1.1 创建表测试整型 4.2.1 查看表结构# 方法1--&gt;DESC cms_news;+----------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id | int(11) | YES | | NULL | || title | varchar(50) | YES | | NULL | || content | text | YES | | NULL | || pubTime | int(11) | YES | | NULL | || clickNum | int(11) | YES | | NULL | || isTop | tinyint(1) | YES | | NULL | || cID | tinyint(4) | YES | | NULL | || pubAuth | varchar(50) | YES | | NULL | |+----------+-------------+------+-----+---------+-------+8 rows in set (0.00 sec)# 方法2--&gt;DESCRIBE cms_news;+----------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id | int(11) | YES | | NULL | || title | varchar(50) | YES | | NULL | || content | text | YES | | NULL | || pubTime | int(11) | YES | | NULL | || clickNum | int(11) | YES | | NULL | || isTop | tinyint(1) | YES | | NULL | || cID | tinyint(4) | YES | | NULL | || pubAuth | varchar(50) | YES | | NULL | |+----------+-------------+------+-----+---------+-------+8 rows in set (0.00 sec)# 方法3--&gt;SHOW COLUMNS FROM cms_news;+----------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id | int(11) | YES | | NULL | || title | varchar(50) | YES | | NULL | || content | text | YES | | NULL | || pubTime | int(11) | YES | | NULL | || clickNum | int(11) | YES | | NULL | || isTop | tinyint(1) | YES | | NULL | || cID | tinyint(4) | YES | | NULL | || pubAuth | varchar(50) | YES | | NULL | |+----------+-------------+------+-----+---------+-------+8 rows in set (0.00 sec)# 第一段 --&gt; 字段名# 第二段 --&gt; 字段类型# NULL --&gt; 是否为空# key --&gt; 主键唯一# default --&gt; 默认值# extra --&gt; 额外信息 4.3 INSERT语法 Name: &apos;INSERT&apos;Description:Syntax:INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_name,...)] [(col_name,...)] &#123;VALUES | VALUE&#125; (&#123;expr | DEFAULT&#125;,...),(...),... [ ON DUPLICATE KEY UPDATE col_name=expr [, col_name=expr] ... ]Or:INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_name,...)] SET col_name=&#123;expr | DEFAULT&#125;, ... [ ON DUPLICATE KEY UPDATE col_name=expr [, col_name=expr] ... ]Or:INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_name,...)] [(col_name,...)] SELECT ... [ ON DUPLICATE KEY UPDATE col_name=expr [, col_name=expr] ... ] 4.4 表结构修改4.4.1 重命名表# 创建一张用户表CREATE TABLE IF NOT EXISTS user10 (id SMALLINT UNSIGNED KEY AUTO_INCREMENT,username VARCHAR(20) NOT NULL UNIQUE,password CHAR(32) NOT NULL,email varchar(50) NOT NULL DEFAULT &apos;1234@163.com&apos;,age TINYINT UNSIGNED DEFAULT 18,addr VARCHAR(200) NOT NULL DEFAULT &apos;北京&apos;,salary FLOAT(6,2),regTime INT UNSIGNED ,face CHAR(100) NOT NULL DEFAULT &apos;default.jpg&apos;,sex ENUM(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) DEFAULT &apos;保密&apos;) ;DESC user10;+----------+----------------------------+------+-----+--------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+--------------+----------------+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || password | char(32) | NO | | NULL | || email | varchar(50) | NO | | 1234@163.com | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(200) | NO | | 北京 | || salary | float(6,2) | YES | | NULL | || regTime | int(10) unsigned | YES | | NULL | || face | char(100) | NO | | default.jpg | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | YES | | 保密 | |+----------+----------------------------+------+-----+--------------+----------------+10 rows in set (0.00 sec)# 方法1 TO 将user10 重命名为user11ALTER TABLE user10 RENAME TO user11; # 方法2 ASALTER TABLE user11 RENAME AS user10;# 方法3 直接写ALTER TABLE user10 RENAME user11;# 以上 to 或者AS 可以省略# 另一种方法修改 RENAME TABLE table_name_old TO table_name_newRENAME TABLE user11 TO user10;# TO 不能省略 4.4.2 添加字段# 添加card 字段CHAR(18) DESC user8;+----------+----------------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+----------------+| id | int(10) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | | NULL | || password | char(32) | NO | | NULL | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | |+----------+----------------------------+------+-----+---------+----------------+6 rows in set (0.00 sec)ALTER TABLE `user8` ADD card CHAR(18); # 默认添加到末尾Query OK, 0 rows affected (0.18 sec)Records: 0 Duplicates: 0 Warnings: 0DESC user8;+----------+----------------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+----------------+| id | int(10) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | | NULL | || password | char(32) | NO | | NULL | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | || card | char(18) | YES | | NULL | |+----------+----------------------------+------+-----+---------+----------------+7 rows in set (0.00 sec)# 添加完整性约束# 添加到第一行ALTER TABLE `user8` ADD COLUMN `test1` VARCHAR(100) NOT NULL FIRST;# 添加到指定的字段(username之后)ALTER TABLE user8 ADD test3 INT NOT NULL DEFAULT 100 AFTER username;DESC user8;+----------+----------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+-------+| test1 | varchar(100) | NO | | NULL | || username | varchar(20) | NO | | NULL | || test3 | int(11) | NO | | 100 | || password | char(32) | NO | | NULL | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | || card | char(18) | YES | | NULL | |+----------+----------------------------+------+-----+---------+-------+8 rows in set (0.00 sec)# 选中一次表 完成多个操作ALTER TABLE user8ADD test4 INT NOT NULL DEFAULT 123 AFTER password,ADD test5 FLOAT(6,2) FIRST,ADD test6 SET(&apos;A&apos;,&apos;B&apos;,&apos;C&apos;);DESC user8;+----------+----------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+-------+| test5 | float(6,2) | YES | | NULL | || test1 | varchar(100) | NO | | NULL | || username | varchar(20) | NO | | NULL | || test3 | int(11) | NO | | 100 | || password | char(32) | NO | | NULL | || test4 | int(11) | NO | | 123 | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | || card | char(18) | YES | | NULL | || test6 | set(&apos;A&apos;,&apos;B&apos;,&apos;C&apos;) | YES | | NULL | |+----------+----------------------------+------+-----+---------+-------+11 rows in set (0.00 sec) 4.4.3 删除字段# 删除字段test6 ALTER TABLE user8 DROP test6;DESC user8;+----------+----------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+-------+| test5 | float(6,2) | YES | | NULL | || test1 | varchar(100) | NO | | NULL | || username | varchar(20) | NO | | NULL | || test3 | int(11) | NO | | 100 | || password | char(32) | NO | | NULL | || test4 | int(11) | NO | | 123 | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | || card | char(18) | YES | | NULL | |+----------+----------------------------+------+-----+---------+-------+10 rows in set (0.00 sec)# 一次选中表，删除多个字段ALTER TABLE user8DROP test3,DROP test4,DROP test5;Query OK, 0 rows affected (0.11 sec)Records: 0 Duplicates: 0 Warnings: 0DESC user8;+----------+----------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+-------+| test1 | varchar(100) | NO | | NULL | || username | varchar(20) | NO | | NULL | || password | char(32) | NO | | NULL | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | || card | char(18) | YES | | NULL | |+----------+----------------------------+------+-----+---------+-------+7 rows in set (0.00 sec)# 添加test字段 删除card字段ALTER TABLE user8ADD test INT UNSIGNED NOT NULL DEFAULT 10 AFTER sex,DROP card;Query OK, 0 rows affected (0.11 sec)Records: 0 Duplicates: 0 Warnings: 0+----------+----------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+-------+| test1 | varchar(100) | NO | | NULL | || username | varchar(20) | NO | | NULL | || password | char(32) | NO | | NULL | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | || test | int(10) unsigned | NO | | 10 | |+----------+----------------------------+------+-----+---------+-------+7 rows in set (0.00 sec) 4.4.4 修改字段# 修改字段ALTER TABLE tbl_name MODIFY 字段名 字段类型[完整性约束] [FIRST|AFTER]# 将Email 修改成VARCHAR(200)ALTER TABLE user10 MODIFY email VARCHAR(200) NOT NULL DEFAULT &apos;2920@qq.com&apos;;Query OK, 0 rows affected (0.12 sec)Records: 0 Duplicates: 0 Warnings: 0desc user10;+----------+----------------------------+------+-----+-------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+-------------+----------------+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || password | char(32) | NO | | NULL | || email | varchar(200) | NO | | 2920@qq.com | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(200) | NO | | 北京 | || salary | float(6,2) | YES | | NULL | || regTime | int(10) unsigned | YES | | NULL | || face | char(100) | NO | | default.jpg | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | YES | | 保密 | |+----------+----------------------------+------+-----+-------------+----------------+10 rows in set (0.00 sec)# 修改字段的位置 将 addr 移动到sex之后ALTER TABLE user10 MODIFY addr VARCHAR(200) NOT NULL DEFAULT &apos;北京&apos; AFTER sex;Query OK, 0 rows affected (0.08 sec)Records: 0 Duplicates: 0 Warnings: 0DESC user10;+----------+----------------------------+------+-----+-------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+-------------+----------------+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || password | char(32) | NO | | NULL | || email | varchar(200) | NO | | 2920@qq.com | || age | tinyint(3) unsigned | YES | | 18 | || salary | float(6,2) | YES | | NULL | || regTime | int(10) unsigned | YES | | NULL | || face | char(100) | NO | | default.jpg | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | YES | | 保密 | || addr | varchar(200) | NO | | 北京 | |+----------+----------------------------+------+-----+-------------+----------------+10 rows in set (0.00 sec)# 将addr字段修改位CHAR(32) NOT NULL DEFAULT &apos;123&apos; 移动到第一个位置ALTER TABLE user10 MODIFY addr CHAR(30) NOT NULL DEFAULT &apos;123&apos; FIRST;DESC user10;+----------+----------------------------+------+-----+-------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+-------------+----------------+| addr | char(30) | NO | | 123 | || id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || password | char(32) | NO | | NULL | || email | varchar(200) | NO | | 2920@qq.com | || age | tinyint(3) unsigned | YES | | 18 | || salary | float(6,2) | YES | | NULL | || regTime | int(10) unsigned | YES | | NULL | || face | char(100) | NO | | default.jpg | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | YES | | 保密 | |+----------+----------------------------+------+-----+-------------+----------------+10 rows in set (0.00 sec)# 字段名修改ALTER TABLE tbl_name CHANGE 旧字段名称 新字段名称 字段类型 [完整性约束条件] [FIRST|AFTER 字段名称]# 将test字段改为test1ALTER TABLE user10 CHANGE test test1 CHAR(32) NOT NULL DEFAULT &apos;123&apos;;DESC user10;+----------+----------------------------+------+-----+-------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+-------------+----------------+| addr | char(30) | NO | | 123 | || id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || password | char(32) | NO | | NULL | || email | varchar(200) | NO | | 2920@qq.com | || age | tinyint(3) unsigned | YES | | 18 | || salary | float(6,2) | YES | | NULL | || regTime | int(10) unsigned | YES | | NULL | || face | char(100) | NO | | default.jpg | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | YES | | 保密 | || test1 | char(32) | NO | | 123 | |+----------+----------------------------+------+-----+-------------+----------------+11 rows in set (0.00 sec)# 修改字段属性，但是不修改字段名ALTER TABLE user10 CHANGE test1 test1 INT; DESC user10;+----------+----------------------------+------+-----+-------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+-------------+----------------+| addr | char(30) | NO | | 123 | || id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || password | char(32) | NO | | NULL | || email | varchar(200) | NO | | 2920@qq.com | || age | tinyint(3) unsigned | YES | | 18 | || salary | float(6,2) | YES | | NULL | || regTime | int(10) unsigned | YES | | NULL | || face | char(100) | NO | | default.jpg | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | YES | | 保密 | || test1 | int(11) | YES | | NULL | |+----------+----------------------------+------+-----+-------------+----------------+11 rows in set (0.00 sec) 4.4.5 添加删除默认值# 添加默认值ALTER TABLE tbl_name ALTER 字段名称 SET DEFAULT 默认值CREATE TABLE IF NOT EXISTS user11 (id TINYINT UNSIGNED KEY AUTO_INCREMENT,username VARCHAR(20) NOT NULL UNIQUE,age TINYINT UNSIGNED);DESC user11;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || age | tinyint(3) unsigned | YES | | NULL | |+----------+---------------------+------+-----+---------+----------------+3 rows in set (0.00 sec)ALTER TABLE user11 ALTER age SET DEFAULT 18;DESC user11;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || age | tinyint(3) unsigned | YES | | 18 | |+----------+---------------------+------+-----+---------+----------------+3 rows in set (0.01 sec)# 添加email默认值ALTER TABLE user11 ADD email VARCHAR(50) ;ALTER TABLE user11 ALTER email SET DEFAULT &apos;2920@qq.com&apos;;DESC user11;+----------+---------------------+------+-----+-------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+-------------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || age | tinyint(3) unsigned | YES | | 18 | || email | varchar(50) | YES | | 2920@qq.com | |+----------+---------------------+------+-----+-------------+----------------+4 rows in set (0.00 sec)# 删除默认值ALTER TABLE tbl_name ALTER 字段名称 DROP DEFAULT# 删除age默认值ALTER TABLE user11 ALTER age DROP DEFAULT;DESC user11;+----------+---------------------+------+-----+-------------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+-------------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || age | tinyint(3) unsigned | YES | | NULL | || email | varchar(50) | YES | | 2920@qq.com | |+----------+---------------------+------+-----+-------------+----------------+4 rows in set (0.00 sec)# 删除email 默认值ALTER TABLE user11 ALTER email DROP DEFAULT;DESC user11;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || age | tinyint(3) unsigned | YES | | NULL | || email | varchar(50) | YES | | NULL | |+----------+---------------------+------+-----+---------+----------------+4 rows in set (0.00 sec) 4.4.6 添加删除主键# 添加主键CREATE TABLE IF NOT EXISTS test12(id INT);DESC test12;+-------+---------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| id | int(11) | YES | | NULL | |+-------+---------+------+-----+---------+-------+1 row in set (0.00 sec)# 简单写法ALTER TABLE test12 ADD PRIMARY KEY(id);DESC test12;+-------+---------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| id | int(11) | NO | PRI | 0 | |+-------+---------+------+-----+---------+-------+1 row in set (0.00 sec)CREATE TABLE IF NOT EXISTS test13 (id INT,card CHAR(20),username VARCHAR(20) NOT NULL);# 复合主键ALTER TABLE test13 ADD PRIMARY KEY (id,card);# 删除主键ALTER TABLE tbl_name DROP PRIMARY KEY# 删除tes12的主键ALTER TABLE test12 DROP PRIMARY KEY; # 因为一张表中只有一个主键DESC test12;+-------+---------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| id | int(11) | NO | | 0 | |+-------+---------+------+-----+---------+-------+1 row in set (0.00 sec)ALTER TABLE test13 DROP PRIMARY KEY;DESC test13;+----------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id | int(11) | NO | | 0 | || card | char(20) | NO | | | || username | varchar(20) | NO | | NULL | |+----------+-------------+------+-----+---------+-------+3 rows in set (0.00 sec)# 添加主键，完整形式ALTER TABLE test12 ADD CONSTRAINT symbol PRIMARY KEY index_type(id); +-------+---------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| id | int(11) | NO | PRI | 0 | |+-------+---------+------+-----+---------+-------+1 row in set (0.00 sec)# 删除主键CREATE TABLE IF NOT EXISTS test14(id INT UNSIGNED KEY AUTO_INCREMENT);DESC test14;+-------+------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-------+------------------+------+-----+---------+----------------+| id | int(10) unsigned | NO | PRI | NULL | auto_increment |+-------+------------------+------+-----+---------+----------------+1 row in set (0.00 sec)ALTER TABLE test14 DROP PRIMARY KEY;ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key# 一张表中有且一列是自增长列且要被定义成主键# 所以要先去掉自增长ALTER TABLE test14 MODIFY id INT UNSIGNED ;DESC test14;+-------+------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+------------------+------+-----+---------+-------+| id | int(10) unsigned | NO | PRI | 0 | |+-------+------------------+------+-----+---------+-------+1 row in set (0.00 sec)ALTER TABLE test14 DROP PRIMARY KEY;Query OK, 0 rows affected (0.11 sec)ESC test14;+-------+------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+------------------+------+-----+---------+-------+| id | int(10) unsigned | NO | | 0 | |+-------+------------------+------+-----+---------+-------+1 row in set (0.01 sec) 4.4.7 添加删除唯一索引# 测试添加唯一索引ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [索引名称](字段名称,...)CREATE TABLE IF NOT EXISTS user12 (id TINYINT UNSIGNED KEY AUTO_INCREMENT,username VARCHAR(20) NOT NULL,card CHAR(18),test VARCHAR(20) NOT NULL,test1 CHAR(32) NOT NULL);DESC user12;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | | NULL | || card | char(18) | YES | | NULL | || test | varchar(20) | NO | | NULL | || test1 | char(32) | NO | | NULL | |+----------+---------------------+------+-----+---------+----------------+5 rows in set (0.00 sec)# 添加唯一性索引ALTER TABLE user12 ADD UNIQUE(username);DESC user12;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || card | char(18) | YES | | NULL | || test | varchar(20) | NO | | NULL | || test1 | char(32) | NO | | NULL | |+----------+---------------------+------+-----+---------+----------------+5 rows in set (0.00 sec)# 添加唯一性索引(完整写法)ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [索引名称] (字段名称,...)ALTER TABLE user12 ADD CONSTRAINT symbol UNIQUE KEY uni_card(card);desc user12;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || card | char(18) | YES | UNI | NULL | || test | varchar(20) | NO | | NULL | || test1 | char(32) | NO | | NULL | |+----------+---------------------+------+-----+---------+----------------+5 rows in set (0.00 sec)SHOW CREATE TABLE user12;CREATE TABLE `user12` (`id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,`username` varchar(20) NOT NULL,`card` char(18) DEFAULT NULL,`test` varchar(20) NOT NULL,`test1` char(32) NOT NULL,PRIMARY KEY (`id`),UNIQUE KEY `username` (`username`),UNIQUE KEY `uni_card` (`card`)) ENGINE=InnoDB DEFAULT CHARSET=utf8# 添加联合索引ALTER TABLE user12 ADD CONSTRAINT symbol UNIQUE INDEX mulUni_test_test1(test,test1);DESC user12;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || card | char(18) | YES | UNI | NULL | || test | varchar(20) | NO | MUL | NULL | || test1 | char(32) | NO | | NULL | |+----------+---------------------+------+-----+---------+----------------+5 rows in set (0.00 sec) CREATE TABLE `user12` (`id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,`username` varchar(20) NOT NULL,`card` char(18) DEFAULT NULL,`test` varchar(20) NOT NULL,`test1` char(32) NOT NULL,PRIMARY KEY (`id`),UNIQUE KEY `username` (`username`),UNIQUE KEY `mulUni_test_test1` (`test`,`test1`),UNIQUE KEY `uni_card` (`card`)) ENGINE=InnoDB DEFAULT CHARSET=utf8# 删除唯一索引ALTER TABLE user12 DROP INDEX username;DESC user12;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | | NULL | || card | char(18) | YES | UNI | NULL | || test | varchar(20) | NO | MUL | NULL | || test1 | char(32) | NO | | NULL | |+----------+---------------------+------+-----+---------+----------------+5 rows in set (0.00 sec)ALTER TABLE user12 DROP KEY uni_card ;ALTER TABLE user12 DROP KEY mulUni_test_test1;DESC user12;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | | NULL | || card | char(18) | YES | | NULL | || test | varchar(20) | NO | | NULL | || test1 | char(32) | NO | | NULL | |+----------+---------------------+------+-----+---------+----------------+5 rows in set (0.00 sec) 4.4.8 修改表存储引擎# 表存储引擎修改SHOW CREATE TABLE user12\\G*************************** 1. row *************************** Table: user12Create Table: CREATE TABLE `user12` ( `id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(20) NOT NULL, `card` char(18) DEFAULT NULL, `test` varchar(20) NOT NULL, `test1` char(32) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf81 row in set (0.00 sec)# 修改为 myisam 没有事务支持ALTER TABLE user12 ENGINE=MYISAM;SHOW CREATE TABLE user12\\G*************************** 1. row *************************** Table: user12Create Table: CREATE TABLE `user12` ( `id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(20) NOT NULL, `card` char(18) DEFAULT NULL, `test` varchar(20) NOT NULL, `test1` char(32) NOT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8# 修改为InnoDBALTER TABLE user12 ENGINE=InnoDB; 4.4.9 修改自动增长值# 修改自增长值ALTER TABLE user12 AUTO_INCREMENT=100;SHOW CREATE TABLE user12\\G*************************** 1. row *************************** Table: user12Create Table: CREATE TABLE `user12` ( `id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(20) NOT NULL, `card` char(18) DEFAULT NULL, `test` varchar(20) NOT NULL, `test1` char(32) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf81 row in set (0.00 sec) 待整理-完整性约束主键约束 PRIMARY KEY唯一标识符，来找到此记录,一般主键会加到无意义的字段上，例如编号字段 要求:不能出现重复的值，被要求设置成主键的字段自动带有非空约束 mysql中可以设置为单字段，也可以多字段 -- 主键约束测试CREATE TABLE IF NOT EXISTS user1(id INT PRIMARY KEY,name VARCHAR(20));Query OK, 0 rows affected (0.06 sec)DESC user1; # 可以看到KEY 为PRI, 非空约束+-------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id | int(11) | NO | PRI | NULL | || name | varchar(20) | YES | | NULL | |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)-- 查看创建表的定义SHOW CREATE TABLE user1\\G*************************** 1. row *************************** Table: user1Create Table: CREATE TABLE `user1` ( `id` int(11) NOT NULL, `name` varchar(20) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf81 row in set (0.00 sec)INSERT INTO user1 VALUES(1,&apos;zrd&apos;);INSERT INTO user1 VALUES(12,&apos;King&apos;);SELECT * FROM user1;+----+------+| id | name |+----+------+| 1 | zrd || 12 | King |+----+------+2 rows in set (0.00 sec)-- 插入重复的字段进行测试INSERT INTO user1 VALUES(12,&apos;King&apos;);ERROR 1062 (23000): Duplicate entry &apos;12&apos; for key &apos;PRIMARY&apos;-- 多字段主键(复合主键)-- 由两字段来创建字段，一张表中只能有一个主键CREATE TABLE IF NOT EXISTS user2(id INT,username VARCHAR(20),card CHAR(18),PRIMARY KEY(id,card));DESC user2;+----------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id | int(11) | NO | PRI | 0 | || username | varchar(20) | YES | | NULL | || card | char(18) | NO | PRI | | |+----------+-------------+------+-----+---------+-------+INSERT INTO user2 VALUES(1,&apos;zrd&apos;,&apos;111&apos;);--由于 user2 使用id 和card来进行约束，所以满足其一即可INSERT INTO user2 VALUES(1,&apos;zrd rudong&apos;,&apos;112&apos;);SELECT * FROM user2;+----+------------+------+| id | username | card |+----+------------+------+| 1 | zrd | 111 || 1 | zrd rudong | 112 |+----+------------+------+2 rows in set (0.00 sec)-- 插入两个复合主键都一样，则会报错INSERT INTO user2 VALUES(1,&apos;zrd rudong&apos;,&apos;112&apos;);ERROR 1062 (23000): Duplicate entry &apos;1-112&apos; for key &apos;PRIMARY&apos;-- 直接使用 KEY 也表示是使用主键(primary key)CREATE TABLE IF NOT EXISTS user3(id INT KEY,username VARCHAR(20));DESC user3;+----------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id | int(11) | NO | PRI | NULL | || username | varchar(20) | YES | | NULL | |+----------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec) 自增长 AUTO INCREMENT-- 自增长 AUTO INCREMENT默认从1开始，每次自增1要求：一张表中只能有一个字段为自增长字段；被标识成自增长的字段一定是主键CREATE TABLE IF NOT EXISTS user4(id SMALLINT KEY AUTO_INCREMENT,username VARCHAR(20));-- 可以看到在 extra额外信息 发现auto_incrementDESC user4;+----------+-------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+----------------+| id | smallint(6) | NO | PRI | NULL | auto_increment || username | varchar(20) | YES | | NULL | |+----------+-------------+------+-----+---------+----------------+2 rows in set (0.00 sec)-- 插入数据几种方式-- 1 手动指定值INSERT INTO user4 VALUES(1,&apos;tomcat&apos;);-- 让auto_increment自动增长, 默认情况下在ID的最大值下加1INSERT INTO user4(username) VALUES(&apos;zrd&apos;); SELECT * FROM user4;+----+----------+| id | username |+----+----------+| 1 | tomcat || 2 | zrd |+----+----------+2 rows in set (0.00 sec)INSERT INTO user4 VALUES(122,&apos;tomcat2&apos;);INSERT INTO user4(username) VALUES(&apos;zhourudong&apos;); SELECT * FROM user4;+-----+------------+| id | username |+-----+------------+| 1 | tomcat || 2 | zrd || 122 | tomcat2 || 123 | zhourudong |+-----+------------+4 rows in set (0.00 sec)-- 可以看到下次自动增长值为124SHOW CREATE TABLE user4;+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Table | Create Table |+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| user4 | CREATE TABLE `user4` ( `id` smallint(6) NOT NULL AUTO_INCREMENT, `username` varchar(20) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=124 DEFAULT CHARSET=utf8 |+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)-- 使用 NULLINSERT INTO user4 VALUES(NULL,&apos;nginx&apos;);SELECT * FROM user4;+-----+------------+| id | username |+-----+------------+| 1 | tomcat || 2 | zrd || 122 | tomcat2 || 123 | zhourudong || 136 | nginx |+-----+------------+-- 使用DEFAULTINSERT INTO user4 VALUES(NULL,&apos;Apache&apos;);SELECT * FROM user4;+-----+------------+| id | username |+-----+------------+| 1 | tomcat || 2 | zrd || 122 | tomcat2 || 123 | zhourudong || 136 | nginx || 137 | Apache |+-----+------------+6 rows in set (0.00 sec)-- 指定自增长从100 开始CREATE TABLE `user5` (`id` smallint(6) KEY AUTO_INCREMENT,`username` varchar(20) DEFAULT NULL) AUTO_INCREMENT=100;SHOW CREATE TABLE user5\\G*************************** 1. row *************************** Table: user5Create Table: CREATE TABLE `user5` ( `id` smallint(6) NOT NULL AUTO_INCREMENT, `username` varchar(20) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf81 row in set (0.00 sec)-- 修改自增长的值ALTER TABLE user5 AUTO_INCREMENT=500;SHOW CREATE TABLE user5\\G*************************** 1. row *************************** Table: user5Create Table: CREATE TABLE `user5` ( `id` smallint(6) NOT NULL AUTO_INCREMENT, `username` varchar(20) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=500 DEFAULT CHARSET=utf8 非空约束# 测试非空约束 NOT NULL CREATE TABLE IF NOT EXISTS user7 (id INT UNSIGNED KEY AUTO_INCREMENT,username VARCHAR(20) NOT NULL ,password CHAR(32) NOT NULL,age TINYINT UNSIGNED );DESC user7;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | int(10) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | | NULL | || password | char(32) | NO | | NULL | || age | tinyint(3) unsigned | YES | | NULL | |+----------+---------------------+------+-----+---------+----------------+4 rows in set (0.00 sec)# 插入记录# id 自增 ， 只需要插入用户名和密码， age没有非空约束INSERT user7 (username,password) VALUES(&apos;ZRD&apos;,&apos;ZHOURUDONG&apos;);INSERT user7 (username,password,age) VALUES(&apos;tomcat&apos;,&apos;Apache&apos;,20);SELECT * FROM user7;+----+----------+------------+------+| id | username | password | age |+----+----------+------------+------+| 1 | ZRD | ZHOURUDONG | NULL || 2 | tomcat | Apache | 20 |+----+----------+------------+------+2 rows in set (0.00 sec)# 测试不满足情况INSERT user7 (username,password) VALUES(NULL,NULL);ERROR 1048 (23000): Column &apos;username&apos; cannot be null 默认值 DEFAULT# 默认值# 设置age默认值为18。 addr为beijing sex默认为男CREATE TABLE IF NOT EXISTS user8 (id INT UNSIGNED KEY AUTO_INCREMENT,username VARCHAR(20) NOT NULL ,password CHAR(32) NOT NULL,age TINYINT UNSIGNED DEFAULT 18,addr VARCHAR(50) NOT NULL DEFAULT &apos;beijing&apos;,sex ENUM (&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) NOT NULL DEFAULT &apos;男&apos;);DESC user8;+----------+----------------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------------+------+-----+---------+----------------+| id | int(10) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | | NULL | || password | char(32) | NO | | NULL | || age | tinyint(3) unsigned | YES | | 18 | || addr | varchar(50) | NO | | beijing | || sex | enum(&apos;男&apos;,&apos;女&apos;,&apos;保密&apos;) | NO | | 男 | |+----------+----------------------------+------+-----+---------+----------------+6 rows in set (0.01 sec)# 插入记录测试INSERT INTO user8(username,password) VALUES(&apos;ZRD&apos;,&apos;A123456&apos;);SELECT * FROM user8;+----+----------+----------+------+---------+-----+| id | username | password | age | addr | sex |+----+----------+----------+------+---------+-----+| 1 | ZRD | A123456 | 18 | beijing | 男 |+----+----------+----------+------+---------+-----+1 row in set (0.00 sec)# 插入完整的记录INSERT INTO user8 (username,password,age,addr,sex) VALUES(&apos;Alice&apos;,&apos;SDF123&apos;,23,&apos;上海&apos;,&apos;女&apos;);SELECT * FROM user8;+----+----------+----------+------+---------+-----+| id | username | password | age | addr | sex |+----+----------+----------+------+---------+-----+| 1 | ZRD | A123456 | 18 | beijing | 男 || 2 | Alice | SDF123 | 23 | 上海 | 女 |+----+----------+----------+------+---------+-----+2 rows in set (0.00 sec)# default 默认INSERT INTO user8 (id,username,password,age,addr,sex) VALUES(3,&apos;tomcat&apos;,&apos;SDF123&apos;,DEFAULT,DEFAULT,DEFAULT);SELECT * FROM user8;+----+----------+----------+------+---------+-----+| id | username | password | age | addr | sex |+----+----------+----------+------+---------+-----+| 1 | ZRD | A123456 | 18 | beijing | 男 || 2 | Alice | SDF123 | 23 | 上海 | 女 || 3 | tomcat | SDF123 | 18 | beijing | 男 |+----+----------+----------+------+---------+-----+3 rows in set (0.00 sec)# 当用户没头像时给默认头像 唯一性约束# 唯一性约束 UNIQUE KEY# 一个主键，多个唯一性# 被标识成唯一约束后， 不能出现重复CREATE TABLE IF NOT EXISTS user9(id TINYINT UNSIGNED KEY AUTO_INCREMENT,username VARCHAR(20) NOT NULL UNIQUE,card CHAR(18) UNIQUE);# 可以看到key 中UNI约束DESC user9;+----------+---------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+----------------+| id | tinyint(3) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || card | char(18) | YES | UNI | NULL | |+----------+---------------------+------+-----+---------+----------------+3 rows in set (0.00 sec)SHOW CREATE TABLE user9;+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Table | Create Table |+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| user9 | CREATE TABLE `user9` ( `id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(20) NOT NULL, `card` char(18) DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `username` (`username`), UNIQUE KEY `card` (`card`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 |+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)INSERT INTO user9 (username) VALUES(&apos;A&apos;);Query OK, 1 row affected (0.02 sec)INSERT INTO user9 (username) VALUES(&apos;A&apos;); # 受唯一性约束第二条记录插入失败ERROR 1062 (23000): Duplicate entry &apos;A&apos; for key &apos;username&apos;# NULL 为特殊字符，不算重复INSERT INTO user9(username,card) VALUES(&apos;B&apos;,NULL);INSERT INTO user9(username,card) VALUES(&apos;B1&apos;,NULL);INSERT INTO user9(username,card) VALUES(&apos;B2&apos;,NULL); SELECT * FROM user9;+----+----------+------+| id | username | card |+----+----------+------+| 1 | A | NULL || 3 | B | NULL || 4 | B1 | NULL || 5 | B2 | NULL |+----+----------+------+ 收回权限指定到数据库名REVOKE ALL PRIVILEGES ON `bbs_db`.* FROM &apos;bbs_user&apos;@&apos;10.20.25.15&apos;; 查看权限SHOW GRANTS FOR &apos;bbs_user&apos;@&apos;10.20.25.15&apos;; 授权GRANT SELECT ON `bbs_db`.* TO &apos;bbs_user&apos;@&apos;10.20.25.15&apos; IDENTIFIED BY &apos;1YWRzZmFzZGYK@&apos;; 5.7登录root账户后执行下面操作：1、创建用户,名字为userone,密码为123456 create user userone identified by &apos;123456&apos;;2、创建名字为dbone的数据库 create database dbone;3、授予dbone数据库的所有权限给userone用户： grant all on dbone.* to userone","tags":[{"name":"mysql","slug":"mysql","permalink":"http://zhourudong.cn/tags/mysql/"}]},{"title":"python 解析式","date":"2016-09-10T07:17:27.000Z","path":"2016/09/10/18-python-解析式/","text":"列表解析式 没有列表解析式的情况下: x = []for i in (1,2,3): x.append(i)print x返回：[1, 2, 3] 使用列表解析式的实现: &gt;&gt;&gt; x = [i for i in (1,2,3)]&gt;&gt;&gt; x[1, 2, 3] x = [word.capitalize() for line in ('hello world?','world!','or not')for word in line.split()if not word.startswith('or')]print x# 返回['Hello', 'World?', 'World!', 'Not'] 字典解析式In [18]: &#123;x:x.upper() for x in ['hello',' world']&#125;Out[18]: &#123;' world': ' WORLD', 'hello': 'HELLO'&#125; In [19]: &#123;x.upper() for x in ['hello','world']&#125;Out[19]: &#123;'HELLO', 'WORLD'&#125; In [24]: word = 'letter'In [25]: letter_counts = &#123;letter: word.count(letter) for letter in set(word)&#125;In [26]: letter_countsOut[26]: &#123;'e': 2, 'l': 1, 'r': 1, 't': 2&#125; 集合解析式In [24]: a= &#123;x.upper() for x in ['hello','world']&#125;In [25]: print aset(['WORLD', 'HELLO']) enumerateenumerate(sequence, start=0) 返回一个可迭代enumerate对象，它生成一个元组序列， 不用 enumerate的写法: i = 0mylist = ['first','two','three']while i &lt; len(mylist): print(\"Item %d: %s:\" % (i,mylist[i])) i +=1# 返回Item 0: first:Item 1: two:Item 2: three: enumerate写法 mylist = ['first','two','three']for i,item in enumerate(mylist): print(\"Item %d: %s\" % (i,item))# 返回Item 0: firstItem 1: twoItem 2: three item为列表中的元素 。","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"网站收藏","date":"2016-09-10T03:47:53.000Z","path":"2016/09/10/3-网站收藏/","text":"综合站https://github.com/WangYixin-Tom/wangyixin-tom.github.io MySQL 算法等等 获取外网IPhttps://ifconfig.co/ 博客golang使用 Golang Timer 的正确方式 http://russellluo.com/2018/09/the-correct-way-to-use-timer-in-golang.html https://golang.google.cn/ codis archhttps://www.gliffy.com/go/publish/4767058 hexo主题Yelee: Yelee python操作mysqlhttp://www.coding5.com/coding5/coding5?category=10004 python 学习资料https://python123.io python3 模块https://pymotw.com/3/ 装饰器 http://www.cnblogs.com/echo1937/p/7606924.html Mesos :http://billcloud.me/configuring-a-mesos/marathon-cluster-on-ubuntu-16.04/ http://www.xuliangwei.com/xubusi/422.html http://heqin.blog.51cto.com/8931355/1712426 http://ju.outofmemory.cn/entry/238102 https://linux.cn/article-7902-1.html https://segmentfault.com/a/1190000005946964 http://www.mesoscn.cn/community/weixin.html http://lx.wxqrcode.com/index.php/post/97.html http://www.jingyuyun.com/article/3132.html https://www.weave.works/guides/networking-containers-mesos/https://weaveblogdotcom.wordpress.com/2015/08/03/using-weave-with-apache-mesos-marathon-on-centos/ https://mesosphere.com/ 编辑器http://sublime.emptystack.net/ js csshttp://codepen.io/codedsignal/pen/GjZdAo githttps://doc.gitlab.cc/ dockerhttps://app.arukas.io/sign_up/http://play-with-docker.com/ 博客https://www.dwhd.orghttp://hengyunabc.github.io/page/3/ jenkinsCopy Artifact PluginAnsiColorhttps://testerhome.com/cay iconhttp://www.easyicon.net mac mount nfshttp://www.crazyant.net/1961.html djangodjango resthttp://www.chenxm.cc/post/290.htmlhttps://www.cnblogs.com/vipchenwei/p/7867028.htmlhttp://www.liujiangblog.com/course/django/2https://www.reddit.com/r/django/https://www.codementor.io/jamesezechukwu/working-with-class-based-views-in-django-5zkjnrvwchttp://djangoweekly.com/newsletter/https://www.djangosites.org/https://consideratecode.com/https://hk.saowen.com/search/b::RGphbmdv/page/10https://it-engineer-lab.com/?s=djangohttps://beomi.github.io/category/django/http://tech.high5.science/tags/django/ http://www.marinamele.com/https://www.bedjango.com/blog/https://timonweb.com/technologies/django/?page=2 http://www.crazyant.net/1001.htmlbookhttps://books.agiliq.com/en/latest/cbvhttp://ccbv.co.uk bloghttps://www.programcreek.com/python/ redis 操作https://www.cnblogs.com/wupeiqi/articles/5132791.html model :https://www.cnblogs.com/yuanchenqi/articles/8963244.htmlformhttps://www.cnblogs.com/yuanchenqi/articles/7614921.htmladminhttps://www.cnblogs.com/yuanchenqi/articles/8323452.html restframworkhttps://www.cnblogs.com/yuanchenqi/articles/8719520.html 跨域https://www.cnblogs.com/yuanchenqi/articles/7638956.html#_label6 ubuntu 粘贴板https://paste.ubuntu.com/ 性能之巅作者 Brendan Gregg 安卓下载https://apkpure.com/ python3 内置库https://pymotw.com/3/index.html 各种在线平台http://www.tutorialspoint.com/codingground.htmhttp://www.tutorialspoint.comhttps://www.freecodecamp.com/cucyhttps://codepen.io/pen bookhttp://www.foxebook.nethttp://www.rlslog.net/http://ebook-dl.com/Search/django/pg/2 https://wsvincent.com/books/ good bloghttp://www.cnblogs.com/clsn/p/8022625.html flexboxhttps://hufan-akari.github.io/solved-by-flexbox/demos/grids/ gohttps://github.com/shijuvar/gokithttps://gowebexamples.com/https://gobyexample.com/ go in 5 min https://www.goin5minutes.com/screencasts/ https://github.com/utiq/go-in-5-minutes work flowhttps://github.com/viewflow/viewflow ssh实现https://github.com/blacknon/lsshhttps://github.com/islenbo/autossh git使用http://www.wanysoul.com/2018/01/19/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/ gohttp://www.golangprograms.com/golang-package-examples.html 友好goapi https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis 设计模式http://scrumreferencecard.com/scrum-%E5%8F%82%E8%80%83%E5%8D%A1/ 工具类网站画图https://awwapp.com makefilehttps://www.cnblogs.com/wang_yb/p/3990952.html 搜索http://www.hejizhan.com/html/search ubuntu 第三方源搜索https://launchpad.net/ubuntu/+ppas archhttps://www.webforefront.com/performance/fundamentalconcepts.html 好的课程https://github.com/Berkeley-CS61B/library-sp18https://cs61a.org/https://www.cs.washington.edu/education/courses/http://www.360doc.com/content/17/0111/04/37253146_621671451.shtml api 在线管理http://open.weibo.com/wiki/Error_codehttps://www.eolinker.com/#/https://apizza.net/console/project/71ed324dfa2563a70cc5be7824fe4788/dev m手机测试http://sizzy.co 权限框架https://blog.csdn.net/k7Jz78GeJJ/article/details/78489155 json解释https://www.cnblogs.com/yuanchenqi/articles/7638956.html xss 攻击https://www.cnblogs.com/yuanchenqi/articles/7617280.html 在线运行代码https://jshare.com.cn/new javascripthttps://www.cnblogs.com/majj/p/9042541.html jwthttps://www.cnblogs.com/mantoudev/p/8994341.html bloghttp://sitepoint.comhttp://www.apress.com nginxnginx 路径匹配 https://blog.csdn.net/tzy233/article/details/79780444 好用软件Lightshot — Mac和Win的截图工具 SketchBook_8.7.1.0_Win64","tags":[{"name":"网站收藏","slug":"网站收藏","permalink":"http://zhourudong.cn/tags/网站收藏/"}]},{"title":"一些python例子","date":"2016-08-30T06:57:09.000Z","path":"2016/08/30/43-一些python例子/","text":"列表列表转字典# -*- coding:utf-8 -*-animals = [\"cat\", \"dog\", \"bird\"]for index, value in enumerate(animals): print index, value","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"zabbix server 3.04 安装 ","date":"2016-08-22T10:22:33.000Z","path":"2016/08/22/15-zabbix-server-3-04-grafana-安装/","text":"grafana官网文档 安装centyum install https://grafanarel.s3.amazonaws.com/builds/grafana-4.0.1-1480694114.x86_64.rpm /var/lib/grafana # 默认以SQLite3 数据grafana信息, /var/lib/grafana/plugins # 插件位置 配置文件egrep -v “^;|^#|^$” /etc/grafana/grafana.ini [paths]logs = /var/log/grafana[server]http_addr =123.56.18.160http_port = 3000root_url = http://123.56.18.160:3000router_logging = trueenable_gzip = true[database][session][analytics][security]admin_user = adminadmin_password = admin[snapshots][users][auth][auth.anonymous][auth.github][auth.google][auth.generic_oauth][auth.grafananet][auth.proxy][auth.basic][auth.ldap][smtp][emails][log]mode = file[log.console][log.file][log.syslog][event_publisher][dashboards.json][alerting][metrics][metrics.graphite][grafana_net][external_image_storage][external_image_storage.s3][external_image_storage.webdav] 插件安装plugin安装 grafana-cli plugins install alexanderzobnin-zabbix-app 添加数据源所支持的数据源: The following datasources are officially supported: Graphite, InfluxDB, OpenTSDB, Prometheus, Elasticsearch, CloudWatch, and KairosDB datasource 添加图表","tags":[{"name":"监控 zabbix grafana","slug":"监控-zabbix-grafana","permalink":"http://zhourudong.cn/tags/监控-zabbix-grafana/"}]},{"title":"MySQL 简单主从配置","date":"2016-08-22T10:15:02.000Z","path":"2016/08/22/42-MySQL-简单主从配置/","text":"######################## 主从配置#######################mysqladmin -u root password \"oids\"GRANT ALL ON *.* TO root@'%' IDENTIFIED BY 'oids';主节点授权GRANT REPLICATION CLIENT , REPLICATION SLAVE ON *.* TO 'replication_user'@'10.%' IDENTIFIED BY 'CdFhfeBEI#4!0what';FLUSH PRIVILEGES ;日志位置FLUSH LOGS;SHOW MASTER STATUS;+-----------------+----------+--------------+------------------+-------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+-----------------+----------+--------------+------------------+-------------------+| mybinlog.000006 | 120 | | | |+-----------------+----------+--------------+------------------+-------------------+从节点# 从节点设置，一定记得设置serveridCHANGE MASTER TO MASTER_USER='replication_user' , MASTER_LOG_FILE='mybinlog.000006', MASTER_PORT=3306 , MASTER_LOG_POS=120, MASTER_HOST='10.76.249.162', MASTER_PASSWORD='CdFhfeBEI#4!0what';","tags":[{"name":"mysql","slug":"mysql","permalink":"http://zhourudong.cn/tags/mysql/"}]},{"title":"CentOS 6 安装 percona server 5.6","date":"2016-08-22T09:51:53.000Z","path":"2016/08/22/39-CentOS-6-安装-percona-server-5-6/","text":"1.卸载系统自带库rpm -qa | egrep &quot;mysql|mariadb&quot;yum remove mysql*yum remove mariadb-libs-* 2.修改文件句柄vim /etc/security/limits.conf# 修改* soft nofile 65535* hard nofile 65535 3.添加用户useradd -r -s /usr/sbin/nologin mysql 4.创建数据目录mkdir -p /home/mysql_datachown -R mysql:mysql /home/mysql_data 5.安装依赖包yum install -y jemalloc perl-Data-Dumper perl-Test-Harness perl-Test-Simple openssl098e 5.1 下载二进制通用包percona-Server-5.6.31-77.0-r5c1061c-el7-x86_64-bundle.tarpercona地址 5.2 percona yum源安装yum install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm 6.解压压缩包tar xf Percona-Server-5.6.31-rel77.0-Linux.x86_64.ssl101.tar.gz -C /opt/ln -sv /opt/Percona-Server-5.6.31-rel77.0-Linux.x86_64.ssl101 /opt/mysqlchown -R mysql:mysql /opt/Percona-Server* /opt/mysql 7. 配置my.cnfcat &gt;&gt; /etc/my.cnf &lt;&lt; EOF# --------------------------- Start -----------------------#my.cnf[client]port = 3306socket = /tmp/mysql.sock[mysql]prompt=&quot;\\u@\\h \\D [\\d] \\n--&gt;&quot;# pager=&quot;less -i -n -S&quot;# tee=/home/mysql_data/query.log# no-auto-rehash # 不使用自动补全auto-rehash [mysqld]user = mysqlbasedir = /opt/mysqldatadir = /home/mysql_dataport = 3306socket = /tmp/mysql.sock# bind_address = 0.0.0.0# 线程池thread_handling=pool-of-threadsthread_pool_size=50 # timeoutinteractive_timeout = 3000wait_timeout = 3000# character setcharacter-set-server = utf8open_files_limit = 65535max_connections = 1000max_connect_errors = 100000#logslog-output=fileslow_query_log = 1slow_query_log_file = /home/mysql_data/slow.loglog-error = /home/mysql_data/error.loglog_warnings = 2pid-file = /home/mysql_data/mysql.pidlong_query_time = 1#log-slow-admin-statements = 1#log-queries-not-using-indexes = 1log-slow-slave-statements = 1# binlogbinlog_format = mixedserver-id = 1log-bin = mybinlogbinlog_cache_size = 4Mmax_binlog_size = 512Minnodb_log_files_in_group = 2max_binlog_cache_size = 512Msync_binlog = 1expire_logs_days = 10skip_name_resolve = 1# for 5.6explicit_defaults_for_timestamp = 1# buffers &amp; cachetable_open_cache = 2048table_definition_cache = 2048table_open_cache = 2048max_heap_table_size = 96Msort_buffer_size = 2Mjoin_buffer_size = 2Mthread_cache_size = 256query_cache_size = 0query_cache_type = 0query_cache_limit = 256Kquery_cache_min_res_unit = 512thread_stack = 192Ktmp_table_size = 96Mkey_buffer_size = 8Mread_buffer_size = 2Mread_rnd_buffer_size = 16Mbulk_insert_buffer_size = 32M# myisammyisam_sort_buffer_size = 128Mmyisam_max_sort_file_size = 1Gmyisam_repair_threads = 1# innodb# 注意修改 buffer pool大小 innodb_buffer_pool_size = 1Ginnodb_buffer_pool_instances = 1innodb_data_file_path = ibdata1:1G:autoextendinnodb_flush_log_at_trx_commit = 1innodb_log_buffer_size = 64Minnodb_log_file_size = 256Minnodb_max_dirty_pages_pct = 50innodb_file_per_table = 1innodb_rollback_on_timeoutinnodb_status_file = 1innodb_io_capacity = 2000transaction_isolation = READ-COMMITTEDinnodb_flush_method = O_DIRECT# --------------------------- End -----------------------EOF 8.初始化percona server/opt/mysql/scripts/mysql_install_db --user=mysql --basedir=/opt/mysql --datadir=/home/mysql_data --defaults-file=/etc/my.cnf 9.配置启动脚本cp /opt/mysql/support-files/mysql.server /etc/init.d/mysqldvim /etc/init.d/mysqld# 修改 46 47 行basedir=/opt/mysqldatadir=/home/mysql_datachmod +x /etc/init.d/mysqldchkconfig --add mysqldchkconfig mysqld on 10.配置环境变量vim /etc/profile.d/mysql.shexport PATH=/opt/mysql/bin:$PATHsource /etc/profile.d/mysql.sh# 导出头文件cat &gt;&gt; /etc/ld.so.conf.d/mysql.conf &lt;&lt;EOF/opt/mysql/libEOFldconfig 11.启动percona serverchown -R mysql:mysql /opt/mysql /home/mysql_data /opt/Percona-Server*/etc/init.d/mysqld start # 启动数据库/etc/init.d/mysqld stop # 停止数据库","tags":[{"name":"mysql","slug":"mysql","permalink":"http://zhourudong.cn/tags/mysql/"}]},{"title":"6.迭代器与生成器","date":"2016-08-22T08:20:16.000Z","path":"2016/08/22/6-迭代器与生成器/","text":"","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"5.数字日期和时间","date":"2016-08-22T08:15:34.000Z","path":"2016/08/22/5-数字日期和时间/","text":"数字日期和时间标签： python 5.12 基本的日期与时间转换5.12.1 问题 你需要执行简单的时间转换，比如天到秒，小时到分钟等的转换。 5.12.2 解决方案为了执行不同时间单位的转换和计算，请使用 datetime 模块。比如，为了表示一个时间段，可以创建一个 timedelta 实例，就像下面这样：&gt;&gt;&gt; from datetime import timedelta&gt;&gt;&gt; a = timedelta(days=2, hours=6)&gt;&gt;&gt; b = timedelta(hours=4.5)&gt;&gt;&gt; c = a + b&gt;&gt;&gt; c.days2&gt;&gt;&gt; c.seconds37800&gt;&gt;&gt; c.seconds / 360010.5&gt;&gt;&gt; c.total_seconds() / 360058.5&gt;&gt;&gt; 如果你想表示指定的日期和时间，先创建一个 datetime 实例然后使用标准的数学运算来操作它们。比如：&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; a = datetime(2012, 9, 23)&gt;&gt;&gt; print(a + timedelta(days=10))2012-10-03 00:00:00&gt;&gt;&gt;&gt;&gt;&gt; b = datetime(2012, 12, 21)&gt;&gt;&gt; d = b - a&gt;&gt;&gt; d.days89&gt;&gt;&gt; now = datetime.today()&gt;&gt;&gt; print(now)2012-12-21 14:54:43.094063&gt;&gt;&gt; print(now + timedelta(minutes=10))2012-12-21 15:04:43.094063&gt;&gt;&gt; 在计算的时候，需要注意的是 datetime 会自动处理闰年。比如：&gt;&gt;&gt; a = datetime(2012, 3, 1)&gt;&gt;&gt; b = datetime(2012, 2, 28)&gt;&gt;&gt; a - bdatetime.timedelta(2)&gt;&gt;&gt; (a - b).days2&gt;&gt;&gt; c = datetime(2013, 3, 1)&gt;&gt;&gt; d = datetime(2013, 2, 28)&gt;&gt;&gt; (c - d).days1&gt;&gt;&gt; 5.12.3 讨论对大多数基本的日期和时间处理问题， datetime 模块以及足够了。如果你需要执行更加复杂的日期操作，比如处理时区，模糊时间范围，节假日计算等等，可以考虑使用 dateutil 模块许多类似的时间计算可以使用 dateutil.relativedelta() 函数代替。但是，有一点需要注意的就是，它会在处理月份 (还有它们的天数差距) 的时候填充间隙。看例子最清楚&gt;&gt;&gt; a = datetime(2012, 9, 23)&gt;&gt;&gt; a + timedelta(months=1)Traceback (most recent call last):File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'months' is an invalid keyword argument for this function&gt;&gt;&gt;&gt;&gt;&gt; from dateutil.relativedelta import relativedelta&gt;&gt;&gt; a + relativedelta(months=+1)datetime.datetime(2012, 10, 23, 0, 0)&gt;&gt;&gt; a + relativedelta(months=+4)datetime.datetime(2013, 1, 23, 0, 0)&gt;&gt;&gt;&gt;&gt;&gt; # Time between two dates&gt;&gt;&gt; b = datetime(2012, 12, 21)&gt;&gt;&gt; d = b - a&gt;&gt;&gt; ddatetime.timedelta(89)&gt;&gt;&gt; d = relativedelta(b, a)&gt;&gt;&gt; drelativedelta(months=+2, days=+28)&gt;&gt;&gt; d.months2&gt;&gt;&gt; d.days28&gt;&gt;&gt; 5.13 计算最后一个周五的日期5.13.1 问题你需要查找星期中某一天最后出现的日期，比如星期五。 5.13.2 解决方案Python 的 datetime 模块中有工具函数和类可以帮助你执行这样的计算。下面是对类似这样的问题的一个通用解决方案：#!/usr/bin/env python# -*- encoding: utf-8 -*-\"\"\"Topic: 最后的周五Desc :\"\"\"from datetime import datetime, timedeltaweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday','Friday', 'Saturday', 'Sunday']def get_previous_byday(dayname, start_date=None): if start_date is None: start_date = datetime.today() day_num = start_date.weekday() day_num_target = weekdays.index(dayname) days_ago = (7 + day_num - day_num_target) % 7 if days_ago == 0: days_ago = 7 target_date = start_date - timedelta(days=days_ago) return target_date 在交互式解释器中使用如下：&gt;&gt;&gt; datetime.today() # For referencedatetime.datetime(2012, 8, 28, 22, 4, 30, 263076)&gt;&gt;&gt; get_previous_byday('Monday')datetime.datetime(2012, 8, 27, 22, 3, 57, 29045)&gt;&gt;&gt; get_previous_byday('Tuesday') # Previous week, not todaydatetime.datetime(2012, 8, 21, 22, 4, 12, 629771)&gt;&gt;&gt; get_previous_byday('Friday')datetime.datetime(2012, 8, 24, 22, 5, 9, 911393)&gt;&gt;&gt; 可选的 start date 参数可以由另外一个 datetime 实例来提供。比如：&gt;&gt;&gt; get_previous_byday('Sunday', datetime(2012, 12, 21))datetime.datetime(2012, 12, 16, 0, 0)&gt;&gt;&gt; 5.13.3 讨论上面的算法原理是这样的：先将开始日期和目标日期映射到星期数组的位置上 (星期一索引为 0)，然后通过模运算计算出目标日期要经过多少天才能到达开始日期。然后用开始日期减去那个时间差即得到结果日期。 如果你要像这样执行大量的日期计算的话，你最好安装第三方包 python-dateutil来代替。比如，下面是是使用 dateutil 模块中的 relativedelta() 函数执行同样的计算：&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; from dateutil.relativedelta import relativedelta&gt;&gt;&gt; from dateutil.rrule import *&gt;&gt;&gt; d = datetime.now()&gt;&gt;&gt; print(d)2012-12-23 16:31:52.718111&gt;&gt;&gt; # Next Friday&gt;&gt;&gt; print(d + relativedelta(weekday=FR))2012-12-28 16:31:52.718111&gt;&gt;&gt;&gt;&gt;&gt; # Last Friday&gt;&gt;&gt; print(d + relativedelta(weekday=FR(-1)))2012-12-21 16:31:52.718111&gt;&gt;&gt; 5.14 计算当前月份的日期范围5.14.1 问题你的代码需要在当前月份中循环每一天，想找到一个计算这个日期范围的高效方法。 5.14.2 解决方案在这样的日期上循环并需要事先构造一个包含所有日期的列表。你可以先计算出开始日期和结束日期，然后在你步进的时候使用 datetime.timedelta 对象递增这个日期变量即可。 下面是一个接受任意 datetime对象并返回一个由当前月份开始日和下个月开始日组成的元组对象。from datetime import datetime, date, timedeltaimport calendardef get_month_range(start_date=None): if start_date is None: start_date = date.today().replace(day=1) _, days_in_month = calendar.monthrange(start_date.year, start_date.month) end_date = start_date + timedelta(days=days_in_month) return (start_date, end_date) 有了这个就可以很容易的在返回的日期范围上面做循环操作了&gt;&gt;&gt; a_day = timedelta(days=1)&gt;&gt;&gt; first_day, last_day = get_month_range()&gt;&gt;&gt; while first_day &lt; last_day:... print(first_day)... first_day += a_day...2012-08-012012-08-022012-08-032012-08-042012-08-052012-08-062012-08-072012-08-082012-08-09#... and so on... 5.15 字符串转换为日期5.15.1 问题你的应用程序接受字符串格式的输入，但是你想将它们转换为 datetime 对象以便在上面执行非字符串操作。 5.15.2 解决方案使用 Python 的标准模块 datetime 可以很容易的解决这个问题。比如：&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; text = '2012-09-20'&gt;&gt;&gt; y = datetime.strptime(text, '%Y-%m-%d')&gt;&gt;&gt; z = datetime.now()&gt;&gt;&gt; diff = z - y&gt;&gt;&gt; diffdatetime.timedelta(3, 77824, 177393)&gt;&gt;&gt; 汇总&gt;&gt;&gt; t1=[2010,11,9,19,20,30] #2010年11月9日 19:30:30&gt;&gt;&gt; last_time=datetime.datetime(t1[0],t1[1],t1[2].t1[3],t1[4],t1[5]) #上次更新时间&gt;&gt;&gt; now_time = datetime.datetime.now() #当前时间&gt;&gt;&gt; #以下是亮点&gt;&gt;&gt; mkt_last = time.mktime(last_time.timetuple()) &gt;&gt;&gt; mkt_now = time.mktime(now_time.timetuple())&gt;&gt;&gt; delt_time = (mkt_now-mkt_last)/60 #转成分钟&gt;&gt;&gt; if (delt_time -30) &gt; 0 :&gt;&gt;&gt; print \"超过30分钟没有更新啦!\"这是我在解决问题时,发现的其他一些有用的函数 计算两个时间的差，如两个时间相差几天，几小时等 1.计算两个日期相差天数的计算 &gt;&gt;&gt; import datetime&gt;&gt;&gt; d1 = datetime.datetime(2005, 2, 16)&gt;&gt;&gt; d2 = datetime.datetime(2004, 12, 31)&gt;&gt;&gt; (d1 - d2).days输出结果:47 2.计算两个时间相差的秒数 &gt;&gt;&gt; import datetime&gt;&gt;&gt; starttime = datetime.datetime.now()&gt;&gt;&gt; #long running&gt;&gt;&gt; endtime = datetime.datetime.now()&gt;&gt;&gt; print (endtime - starttime).seconds 3.计算当前时间向后10小时的时间 &gt;&gt;&gt; d1 = datetime.datetime.now()&gt;&gt;&gt; d3 = d1 + datetime.timedelta(hours=10)&gt;&gt;&gt; d3.ctime() 对时间的操作,其本上常用的类有：datetime和timedelta两个。它们之间可以相互加减。每个类都有一些方法和属性可以查看具体的值，如datetime可以查看：天数(day)，小时数(hour)，星期几(weekday())等;timedelta可以查看：天数(days)，秒数(seconds)等。 4.日期的操作必须使用time或datetime库 import time &gt;&gt;&gt; s=\"2006-1-2\" &gt;&gt;&gt; time.strptime(s,\"%Y-%m-%d) 这是将字符串格式的日期及时间转成日期对象 转义符对应意义如下 %a 本地简化星期名称 %A 本地完整星期名称 %b 本地简化的月份名称 %B 本地完整的月份名称 %c 本地相应的日期表示和时间表示 %d 月内中的一天（0-31） %H 24小时制小时数（0-23） %I 12小时制小时数（01-12） %j 年内的一天（001-366） %m 月份（01-12） %M 分钟数（00=59） %p 本地A.M.或P.M.的等价符 %S 秒（00-59） %U 一年中的星期数（00-53）星期天为星期的开始 %w 星期（0-6），星期天为星期的开始 %W 一年中的星期数（00-53）星期一为星期的开始 %x 本地相应的日期表示 %X 本地相应的时间表示 %y 两位数的年份表示（00-99） %Y 四位数的年份表示（000-9999） %Z 当前时区的名称 %% %号本身 5 # 当前时间 加一天后a = datetime.datetime.now() + datetime.timedelta(days=1)# 将一天后的时间跳到某个时间点a.replace(hour=2) 时间格式 2016-08-9T10:01:54.123Z 20160809100154.123Z关于时间格式 2016-08-9T10:01:54.123Z 20160809100154.123Z 处理方法 今天遇到了一个奇怪的时间格式 如以下格式，下面两种时间格式所表示的时间是同一个时间，这个不难理解 2016-08-9T10:01:54.123Z 20160809100154.123Z 如图所示，这是一张由网友提供的图片，里面显示的是时间 然后无论如何，这个奇怪的时间我们可能看不懂，但是我们最终要显示的时间是北京时间（如果你是其他国家的人就另当别论了哦） 那么下面我们就来简单介绍一下关于时间的一些基本知识： 首先是UTC：时间标准时间 协调世界时（英：Coordinated Universal Time ，法：Temps Universel Coordonné），又称世界统一时间，世界标准时间，国际协调时间。英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称UTC。 然后是GMT：格林尼治时间 世界时UT 即格林尼治时间，格林尼治所在地的标准时间。以地球自转为基础的时间计量系统。地球自转的角度可用地方子午线相对于地球上的基本参考点的运动来度量。为了测量地球自转，人们在地球上选取了两个基本参考点：春分点（见分至点）和平太阳，由此确定的时间分别称为恒星时和平太阳时。 然后下面是GST时间：也就是北京时间 通常我们在数据库中存放，或者给用户看的时间都是GST时间 现在我们说说上面的时间 2016-08-9T10:01:54.123Z 20160809100154.123Z 首先字母T：他表示后面跟的时间 而最末尾的Z表示UTC统一时间 而123表示的毫秒，大家可以测试将123改为1230，最后得到的时间，秒会增加1秒 网上很多人在搜索000Z是什么意思，其实他的意思就是 0毫秒 utc统一时间 既然我们知道了Z表示UTC统一时间，那么接下来就好办了 如上面第一个 表达式 2016-08-9T10:01:54.123Z 我们可以这样来获得一个GST（北京时间）时间，看如下代码：String str =&quot;2016-08-9T10:01:54.123Z&quot;;SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS Z&quot;);Date d = format.parse(str.replace(&quot;Z&quot;, &quot; UTC&quot;));//注意是空格+UTCSystem.out.println(d); 这样我们就获得了一个本地的时间 最后我们得到的时间是：Tue Aug 09 18:01:54 CST 2016 而表达式 20160809100154.123Z 他的转换方式也是一样的，知识格式化时，将格式化字符串修改以下即可：yyyyMMddHHmmss.SSS Z 之前我也遇到过一个类似的问题，大家也可以参考下","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"4.字符串和文本","date":"2016-08-22T05:58:40.000Z","path":"2016/08/22/4-字符串和文本/","text":"4.字符串和文本标签： python 4.1.1 问题将一个字段分隔成多个字段，但是分隔符不确定， 4.1.2 解决方案string对象的split()方法只适应简单的字段分割情况，当有多个分隔符，或者分隔符周围又不确定的空格时；最好使用re.splitline = 'asdf fjdk; afed, fjek,asdf, foo'import rea = re.split(r'[;,\\s]\\s*', line)print a['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo'] 以上分隔符： [ ； ， \\s \\s* 多个空格符 4.2.1 问题匹配字符串开头或者结尾 4.2.2 解决方案str.startswith() # 匹配开头str.endswith() # 匹配结尾 &gt;&gt;&gt; filename = 'sapm.txt'&gt;&gt;&gt; filename.endswith('.txt')True&gt;&gt;&gt; filename.startswith('file:')False&gt;&gt;&gt; url = 'http://www.zhourudong.cn'&gt;&gt;&gt; url.startswith('http:')True 匹配多种规则&gt;&gt;&gt; import os&gt;&gt;&gt; filenames = os.listdir('.')&gt;&gt;&gt; filenames[ 'Makefile', 'foo.c', 'bar.py', 'spam.c', 'spam.h' ]&gt;&gt;&gt; [name for name in filenames if name.endswith(('.c', '.h')) ]['foo.c', 'spam.c', 'spam.h'&gt;&gt;&gt; any(name.endswith('.py') for name in filenames)True&gt;&gt;&gt; 类似方法 # 方法1&gt;&gt;&gt; filename = 'spam.txt'&gt;&gt;&gt; filename[-4:] == '.txt'True&gt;&gt;&gt; url = 'http://www.python.org'&gt;&gt;&gt; url[:5] == 'http:' or url[:6] == 'https:' or url[:4] == 'ftp:'True&gt;&gt;&gt;# 方法2: 使用正则表达式匹配&gt;&gt;&gt; import re&gt;&gt;&gt; url = 'http://www.python.org'&gt;&gt;&gt; re.match('http:jhttps:jftp:', url)&lt;_sre.SRE_Match object at 0x101253098&gt; 检测目录内是否有指定的文件类型(结尾) if any(name.endswith(('.c', '.h')) for name in listdir(dirname)):... 4.3 用shell通配符匹配字符串4.3.1 问题使用 Unix Shell 中常用的通配符 (比如 .py , Dat[0-9].csv 等) 去匹配文本字符串 4.3.2 解决方案fnmatch 模块提供了两个函数—— fnmatch() 和 fnmatchcase() ，可以用来实现这样的匹配。用法如下：&gt;&gt;&gt; from fnmatch import fnmatch, fnmatchcase&gt;&gt;&gt; fnmatch('foo.txt', '*.txt')True&gt;&gt;&gt; fnmatch('foo.txt', '?oo.txt')True&gt;&gt;&gt; fnmatch('Dat45.csv', 'Dat[0-9]*')True&gt;&gt;&gt; names = ['Dat1.csv', 'Dat2.csv', 'config.ini', 'foo.py']&gt;&gt;&gt; [name for name in names if fnmatch(name, 'Dat*.csv')]['Dat1.csv', 'Dat2.csv']&gt;&gt;&gt;# 注意*nux 系统区分大小写&gt;&gt;&gt; # On OS X (Mac)&gt;&gt;&gt; fnmatch('foo.txt', '*.TXT')False&gt;&gt;&gt; # On Windows&gt;&gt;&gt; fnmatch('foo.txt', '*.TXT')True&gt;&gt;&gt; 4.4 字符串匹配和搜索4.4.1 问题需要匹配或者搜索特定模式的文本 4.4.2 解决方案你想匹配的是字面字符串，那么你通常只需要调用基本字符串方法就行，比如str.find() , str.endswith() , str.startswith() 或者类似的方法：&gt;&gt;&gt; text = 'yeah, but no, but yeah, but no, but yeah'&gt;&gt;&gt; # Exact match&gt;&gt;&gt; text == 'yeah'False&gt;&gt;&gt; # Match at start or end&gt;&gt;&gt; text.startswith('yeah')True&gt;&gt;&gt; text.endswith('no')False&gt;&gt;&gt; # Search for the location of the first occurrence&gt;&gt;&gt; text.find('no')10&gt;&gt;&gt; 对于复杂的匹配需要使用正则表达式和 re 模块。为了解释正则表达式的基本原理，假设你想匹配数字格式的日期字符串比如 11/27/2012 ，你可以这样做：&gt;&gt;&gt; text1 = '11/27/2012'&gt;&gt;&gt; text2 = 'Nov 27, 2012'&gt;&gt;&gt;&gt;&gt;&gt; import re&gt;&gt;&gt; # Simple matching: \\d+ means match one or more digits&gt;&gt;&gt; if re.match(r'\\d+/\\d+/\\d+', text1):... print('yes')... else:... print('no')...yes&gt;&gt;&gt; if re.match(r'\\d+/\\d+/\\d+', text2):... print('yes')... else:... print('no')...no&gt;&gt;&gt; 4.5 字符串搜索和替换4.5.1你想在字符串中搜索和匹配指定的文本模式 4.5.2 解决方案 对于简单的字面模式，直接使用 str.repalce() 方法即可，比如： &gt;&gt;&gt; text = 'yeah, but no, but yeah, but no, but yeah'&gt;&gt;&gt; text.replace('yeah', 'yep')'yep, but no, but yep, but no, but yep'&gt;&gt;&gt; 对于复杂的模式，请使用 re 模块中的 sub() 函数。为了说明这个，假设你想将形式为 11/27/2012 的日期字符串改成 2012-11-27 。示例如下： &gt;&gt;&gt; text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'&gt;&gt;&gt; import re&gt;&gt;&gt; re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text)'Today is 2012-11-27. PyCon starts 2013-3-13.'&gt;&gt;&gt; 说明：sub() 函数中的第一个参数是被匹配的模式，第二个参数是替换模式。反斜杠数字比如 n3 指向前面模式的捕获组号。 4.6 字符串忽略大小写的搜索替换4.6.1 问题你需要以忽略大小写的方式搜索与替换文本字符串 4.6.2 解决方案为了在文本操作时忽略大小写，你需要在使用 re模块的时候给这些操作提供re.IGNORECASE 标志参数。比如： &gt;&gt;&gt; text = 'UPPER PYTHON, lower python, Mixed Python'&gt;&gt;&gt; re.findall('python', text, flags=re.IGNORECASE)['PYTHON', 'python', 'Python']&gt;&gt;&gt; re.sub('python', 'snake', text, flags=re.IGNORECASE)'UPPER snake, lower snake, Mixed snake'&gt;&gt;&gt; 最后的那个例子揭示了一个小缺陷，替换字符串并不会自动跟被匹配字符串的大小写保持一致。为了修复这个，你可能需要一个辅助函数，就像下面的这样： def matchcase(word): def replace(m): text = m.group() if text.isupper(): return word.upper() elif text.islower(): return word.lower() elif text[0].isupper(): return word.capitalize() else: return word return replace 下面使用上述函数的方法： &gt;&gt;&gt; re.sub('python', matchcase('snake'), text, flags=re.IGNORECASE)'UPPER SNAKE, lower snake, Mixed Snake'&gt;&gt;&gt; 4.8 多行匹配4.8.1 问题你正在试着使用正则表达式去匹配一大块的文本，而你需要跨越多行去匹配。 4.8.2 解决方案这个问题很典型的出现在当你用点 (.) 去匹配任意字符的时候，忘记了点 (.) 不能匹配换行符的事实。比如，假设你想试着去匹配 C 语言分割的注释：&gt;&gt;&gt; comment = re.compile(r'/\\*(.*?)\\*/')&gt;&gt;&gt; text1 = '/* this is a comment */'&gt;&gt;&gt; text2 = '''/* this is a... multiline comment */... '''&gt;&gt;&gt;&gt;&gt;&gt; comment.findall(text1)[' this is a comment ']&gt;&gt;&gt; comment.findall(text2)[]&gt;&gt;&gt;# 解决方法&gt;&gt;&gt; comment = re.compile(r'/\\*(.*?)\\*/', re.DOTALL)&gt;&gt;&gt; comment.findall(text2)[' this is a\\n multiline comment '] 4.11 删除字符串不需要的字符4.11.1 问题你想去掉文本字符串开头，结尾或者中间不想要的字符，比如空白。","tags":[{"name":"python","slug":"python","permalink":"http://zhourudong.cn/tags/python/"}]},{"title":"","date":"1970-01-01T00:00:00.000Z","path":"1970/01/01/59-gotips/","text":"title: gotipsdate: 2018-05-16 10:13:27 tags: gotipsgo 面向对象继承https://hackthology.com/golangzhong-de-mian-xiang-dui-xiang-ji-cheng.html go interfacehttps://blog.chewxy.com/2018/03/18/golang-interfaces/?utm_campaign=Revue%20newsletter&amp;utm_medium=Newsletter&amp;utm_source=A%20Semana%20Gohttps://medium.com/@_jesus_rafael/composing-interfaces-in-go-58980969e897 bologhttps://liudanking.com 网站https://gobyexample.com/ gobrotobufhttps://blog.csdn.net/arvin_kai/article/details/77532595","tags":[]}]